Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTRIBUTES
    CHAR
    CLASS
    COLON
    CONST_CHAR
    DEF
    DO
    ELSEIF
    GREATER_EQUAL
    LESS_EQUAL
    METHODS
    MOREBOOL
    NEGATION
    NUMBER
    PERIOD

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main
Rule 2     main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main
Rule 3     vars_rec -> var_dec vars_rec
Rule 4     vars_rec -> empty
Rule 5     pn_internal_scope -> empty
Rule 6     pn_start_program -> empty
Rule 7     pn_start_func -> empty
Rule 8     init_dec -> empty
Rule 9     init_dec -> dec init_dec
Rule 10    dec -> var_dec
Rule 11    dec -> func_dec
Rule 12    dec -> class_dec
Rule 13    class_dec -> empty
Rule 14    var -> ID varArray
Rule 15    varArray -> empty
Rule 16    varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return
Rule 17    pn_array_access1 -> empty
Rule 18    pn_array_access2 -> empty
Rule 19    pn_array_access3 -> empty
Rule 20    pn_access_return -> empty
Rule 21    var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
Rule 22    var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
Rule 23    list1 -> empty
Rule 24    pn_add_dim_list -> empty
Rule 25    pn_add_dim -> empty
Rule 26    pn_var_type -> empty
Rule 27    pn_value_type -> empty
Rule 28    pn_current_name -> empty
Rule 29    pn_add_variable -> empty
Rule 30    bloque -> asignacion
Rule 31    bloque -> condicional
Rule 32    bloque -> while
Rule 33    bloque -> read
Rule 34    bloque -> write
Rule 35    bloque -> func_call SEMICOLON
Rule 36    asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
Rule 37    pn_var_assign -> empty
Rule 38    pn_operator -> empty
Rule 39    all_logical -> logical_exp pn_all_logical all_logical_rec
Rule 40    all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec
Rule 41    all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec
Rule 42    all_logical_rec -> empty
Rule 43    pn_all_logical -> empty
Rule 44    logical_exp -> exp pn_logical_exp logical_exp_rec
Rule 45    logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
Rule 46    logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
Rule 47    logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
Rule 48    logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
Rule 49    logical_exp_rec -> empty
Rule 50    pn_logical_exp -> empty
Rule 51    exp -> termino pn_exp exp_rec
Rule 52    pn_exp -> empty
Rule 53    exp_rec -> PLUS pn_operator termino pn_exp exp_rec
Rule 54    exp_rec -> MINUS pn_operator termino pn_exp exp_rec
Rule 55    exp_rec -> empty
Rule 56    termino -> factor pn_termino termino_rec
Rule 57    termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec
Rule 58    termino_rec -> DIVISION pn_operator factor pn_termino termino_rec
Rule 59    termino_rec -> empty
Rule 60    pn_termino -> empty
Rule 61    factor -> cte_int pn_add_constant
Rule 62    factor -> cte_float pn_add_constant
Rule 63    factor -> CONST_BOOL pn_add_constant
Rule 64    factor -> CONST_STRING empty empty
Rule 65    factor -> var
Rule 66    factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
Rule 67    factor -> func_call
Rule 68    cte_int -> CONST_INT
Rule 69    cte_int -> MINUS CONST_INT
Rule 70    cte_float -> CONST_FLOAT
Rule 71    cte_float -> MINUS CONST_FLOAT
Rule 72    pn_add_constant -> empty
Rule 73    pn_open_parenthesis -> empty
Rule 74    pn_close_parenthesis -> empty
Rule 75    tipo -> INT
Rule 76    tipo -> FLOAT
Rule 77    tipo -> BOOL
Rule 78    tipo -> STRING
Rule 79    return_module -> tipo
Rule 80    return_module -> VOID
Rule 81    parametro -> tipo ID parametro_rec
Rule 82    parametro -> empty
Rule 83    parametro_rec -> COMMA tipo ID parametro_rec
Rule 84    parametro_rec -> empty
Rule 85    condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
Rule 86    condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
Rule 87    condicional_else -> pn_condicional_final
Rule 88    pn_condicional -> empty
Rule 89    pn_condicional_else -> empty
Rule 90    pn_condicional_final -> empty
Rule 91    while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
Rule 92    while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1
Rule 93    pn_while -> empty
Rule 94    pn_while_jump -> empty
Rule 95    pn_while_jump1 -> empty
Rule 96    read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
Rule 97    var_readRec -> var var_readRec1
Rule 98    var_readRec1 -> COMMA var var_readRec1
Rule 99    var_readRec1 -> empty
Rule 100   write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
Rule 101   write_rec -> all_logical pn_write_quad write_rec1
Rule 102   write_rec1 -> MORE all_logical pn_write_quad write_rec1
Rule 103   write_rec1 -> empty
Rule 104   pn_write_quad -> empty
Rule 105   func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
Rule 106   pn_verify_func -> empty
Rule 107   pn_param_counter -> empty
Rule 108   func_call_rec -> func_call_rec1
Rule 109   func_call_rec -> empty
Rule 110   func_call_rec1 -> all_logical pn_param_match func_call_rec2
Rule 111   func_call_rec2 -> COMMA all_logical pn_param_match func_call_rec2
Rule 112   func_call_rec2 -> empty
Rule 113   pn_param_match -> empty
Rule 114   func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
Rule 115   pn_add_param_vartable -> empty
Rule 116   pn_gen_vartable -> empty
Rule 117   pn_func_quad -> empty
Rule 118   pn_end_main -> empty
Rule 119   pn_end_func -> empty
Rule 120   pn_add_func -> empty
Rule 121   pn_return_type -> empty
Rule 122   func_return -> RETURN all_logical SEMICOLON
Rule 123   func_return -> RETURN SEMICOLON
Rule 124   bloque_rec -> bloque bloque_rec
Rule 125   bloque_rec -> empty
Rule 126   empty -> <empty>

Terminals, with rules where they appear

AND                  : 40
ATTRIBUTES           : 
BOOL                 : 77
CALL                 : 105
CHAR                 : 
CLASS                : 
COLON                : 
COMMA                : 83 98 111
CONST_BOOL           : 63
CONST_CHAR           : 
CONST_FLOAT          : 70 71
CONST_INT            : 68 69
CONST_STRING         : 64
DEF                  : 
DIVISION             : 58
DO                   : 
ELSE                 : 86
ELSEIF               : 
EQUAL_ASSIGN         : 36
EQUAL_COMPARE        : 47
FLOAT                : 76
FUNC                 : 114
GREATER_EQUAL        : 
GREATER_THAN         : 45
ID                   : 1 14 21 22 81 83 105 114
IF                   : 85
INT                  : 75
LEFT_BRACKET         : 16 22
LEFT_CURLYB          : 2 85 86 92 114
LEFT_PARENTHESIS     : 2 66 85 91 96 100 105 114
LESS_EQUAL           : 
LESS_THAN            : 46
LIST                 : 22
MAIN                 : 2
METHODS              : 
MINUS                : 54 69 71
MORE                 : 102
MOREBOOL             : 
MULTIPLICATION       : 57
NEGATION             : 
NOT_EQUAL            : 48
NUMBER               : 
OR                   : 41
PERIOD               : 
PLUS                 : 53
PROGRAM              : 1
READ                 : 96
RETURN               : 122 123
RIGHT_BRACKET        : 16 22
RIGHT_CURLYB         : 2 85 86 92 114
RIGHT_PARENTHESIS    : 2 66 85 91 96 100 105 114
SEMICOLON            : 1 21 22 35 36 96 100 122 123
STRING               : 78
VAR                  : 21
VOID                 : 80
WHILE                : 91
WRITE                : 100
error                : 

Nonterminals, with rules where they appear

all_logical          : 16 36 66 85 91 101 102 110 111 122
all_logical_rec      : 39 40 41
asignacion           : 30
bloque               : 124
bloque_rec           : 2 85 86 92 114 124
class_dec            : 12
condicional          : 31
condicional_else     : 85
cte_float            : 62
cte_int              : 22 61
dec                  : 9
empty                : 4 5 6 7 8 13 15 17 18 19 20 23 24 25 26 27 28 29 37 38 42 43 49 50 52 55 59 60 64 64 72 73 74 82 84 88 89 90 93 94 95 99 103 104 106 107 109 112 113 115 116 117 118 119 120 121 125
exp                  : 44 45 46 47 48
exp_rec              : 51 53 54
factor               : 56 57 58
func_call            : 35 67
func_call_rec        : 105
func_call_rec1       : 108
func_call_rec2       : 110 111
func_dec             : 11
func_return          : 114
init_dec             : 1 9
list1                : 22
logical_exp          : 39 40 41
logical_exp_rec      : 44 45 46 47 48
main                 : 1
parametro            : 114
parametro_rec        : 81 83
pn_access_return     : 16
pn_add_constant      : 61 62 63
pn_add_dim           : 22
pn_add_dim_list      : 22
pn_add_func          : 114
pn_add_param_vartable : 114
pn_add_variable      : 21 22
pn_all_logical       : 39 40 41
pn_array_access1     : 16
pn_array_access2     : 16
pn_array_access3     : 16
pn_close_parenthesis : 66 105
pn_condicional       : 85
pn_condicional_else  : 86
pn_condicional_final : 86 87
pn_current_name      : 21 22
pn_end_func          : 114
pn_end_main          : 2
pn_exp               : 51 53 54
pn_func_quad         : 114
pn_gen_vartable      : 2 114
pn_internal_scope    : 2
pn_logical_exp       : 44 45 46 47 48
pn_open_parenthesis  : 66 105
pn_operator          : 40 41 45 46 47 48 53 54 57 58
pn_param_counter     : 105
pn_param_match       : 110 111
pn_return_type       : 114
pn_start_func        : 1
pn_start_program     : 1
pn_termino           : 56 57 58
pn_value_type        : 21 22
pn_var_assign        : 36
pn_var_type          : 21 22
pn_verify_func       : 105
pn_while             : 91
pn_while_jump        : 91
pn_while_jump1       : 92
pn_write_quad        : 101 102
program              : 0
read                 : 33
return_module        : 114
termino              : 51 53 54
termino_rec          : 56 57 58
tipo                 : 21 22 79 81 83
var                  : 36 65 97 98
varArray             : 14
var_dec              : 3 10
var_readRec          : 96
var_readRec1         : 97 98
vars_rec             : 2 3 114
while                : 32
while_loop           : 91
write                : 34
write_rec            : 100
write_rec1           : 101 102

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . pn_start_program pn_start_func ID SEMICOLON init_dec main
    (6) pn_start_program -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    pn_start_program               shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM pn_start_program . pn_start_func ID SEMICOLON init_dec main
    (7) pn_start_func -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    pn_start_func                  shift and go to state 5
    empty                          shift and go to state 6

state 4

    (6) pn_start_program -> empty .

    ID              reduce using rule 6 (pn_start_program -> empty .)


state 5

    (1) program -> PROGRAM pn_start_program pn_start_func . ID SEMICOLON init_dec main

    ID              shift and go to state 7


state 6

    (7) pn_start_func -> empty .

    ID              reduce using rule 7 (pn_start_func -> empty .)


state 7

    (1) program -> PROGRAM pn_start_program pn_start_func ID . SEMICOLON init_dec main

    SEMICOLON       shift and go to state 8


state 8

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON . init_dec main
    (8) init_dec -> . empty
    (9) init_dec -> . dec init_dec
    (126) empty -> .
    (10) dec -> . var_dec
    (11) dec -> . func_dec
    (12) dec -> . class_dec
    (21) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (22) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (114) func_dec -> . FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (13) class_dec -> . empty

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    MAIN            reduce using rule 126 (empty -> .)
    VAR             shift and go to state 15
    LIST            shift and go to state 16
    FUNC            shift and go to state 17

  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! LIST            [ reduce using rule 126 (empty -> .) ]
  ! FUNC            [ reduce using rule 126 (empty -> .) ]

    init_dec                       shift and go to state 9
    empty                          shift and go to state 10
    dec                            shift and go to state 11
    var_dec                        shift and go to state 12
    func_dec                       shift and go to state 13
    class_dec                      shift and go to state 14

state 9

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec . main
    (2) main -> . MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 10

    (8) init_dec -> empty .
    (13) class_dec -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 8 (init_dec -> empty .)
    MAIN            reduce using rule 8 (init_dec -> empty .)
    VAR             reduce using rule 13 (class_dec -> empty .)
    LIST            reduce using rule 13 (class_dec -> empty .)
    FUNC            reduce using rule 13 (class_dec -> empty .)

  ! MAIN            [ reduce using rule 13 (class_dec -> empty .) ]


state 11

    (9) init_dec -> dec . init_dec
    (8) init_dec -> . empty
    (9) init_dec -> . dec init_dec
    (126) empty -> .
    (10) dec -> . var_dec
    (11) dec -> . func_dec
    (12) dec -> . class_dec
    (21) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (22) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (114) func_dec -> . FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (13) class_dec -> . empty

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    MAIN            reduce using rule 126 (empty -> .)
    VAR             shift and go to state 15
    LIST            shift and go to state 16
    FUNC            shift and go to state 17

  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! LIST            [ reduce using rule 126 (empty -> .) ]
  ! FUNC            [ reduce using rule 126 (empty -> .) ]

    dec                            shift and go to state 11
    init_dec                       shift and go to state 20
    empty                          shift and go to state 10
    var_dec                        shift and go to state 12
    func_dec                       shift and go to state 13
    class_dec                      shift and go to state 14

state 12

    (10) dec -> var_dec .

    VAR             reduce using rule 10 (dec -> var_dec .)
    LIST            reduce using rule 10 (dec -> var_dec .)
    FUNC            reduce using rule 10 (dec -> var_dec .)
    MAIN            reduce using rule 10 (dec -> var_dec .)


state 13

    (11) dec -> func_dec .

    VAR             reduce using rule 11 (dec -> func_dec .)
    LIST            reduce using rule 11 (dec -> func_dec .)
    FUNC            reduce using rule 11 (dec -> func_dec .)
    MAIN            reduce using rule 11 (dec -> func_dec .)


state 14

    (12) dec -> class_dec .

    VAR             reduce using rule 12 (dec -> class_dec .)
    LIST            reduce using rule 12 (dec -> class_dec .)
    FUNC            reduce using rule 12 (dec -> class_dec .)
    MAIN            reduce using rule 12 (dec -> class_dec .)


state 15

    (21) var_dec -> VAR . tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (75) tipo -> . INT
    (76) tipo -> . FLOAT
    (77) tipo -> . BOOL
    (78) tipo -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    tipo                           shift and go to state 21

state 16

    (22) var_dec -> LIST . tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (75) tipo -> . INT
    (76) tipo -> . FLOAT
    (77) tipo -> . BOOL
    (78) tipo -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    tipo                           shift and go to state 26

state 17

    (114) func_dec -> FUNC . return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (79) return_module -> . tipo
    (80) return_module -> . VOID
    (75) tipo -> . INT
    (76) tipo -> . FLOAT
    (77) tipo -> . BOOL
    (78) tipo -> . STRING

    VOID            shift and go to state 29
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    return_module                  shift and go to state 27
    tipo                           shift and go to state 28

state 18

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main .

    $end            reduce using rule 1 (program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main .)


state 19

    (2) main -> MAIN . pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main
    (5) pn_internal_scope -> . empty
    (126) empty -> .

    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_internal_scope              shift and go to state 30
    empty                          shift and go to state 31

state 20

    (9) init_dec -> dec init_dec .

    MAIN            reduce using rule 9 (init_dec -> dec init_dec .)


state 21

    (21) var_dec -> VAR tipo . pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (26) pn_var_type -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    pn_var_type                    shift and go to state 32
    empty                          shift and go to state 33

state 22

    (75) tipo -> INT .

    ID              reduce using rule 75 (tipo -> INT .)


state 23

    (76) tipo -> FLOAT .

    ID              reduce using rule 76 (tipo -> FLOAT .)


state 24

    (77) tipo -> BOOL .

    ID              reduce using rule 77 (tipo -> BOOL .)


state 25

    (78) tipo -> STRING .

    ID              reduce using rule 78 (tipo -> STRING .)


state 26

    (22) var_dec -> LIST tipo . pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (26) pn_var_type -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    pn_var_type                    shift and go to state 34
    empty                          shift and go to state 33

state 27

    (114) func_dec -> FUNC return_module . ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    ID              shift and go to state 35


state 28

    (79) return_module -> tipo .

    ID              reduce using rule 79 (return_module -> tipo .)


state 29

    (80) return_module -> VOID .

    ID              reduce using rule 80 (return_module -> VOID .)


state 30

    (2) main -> MAIN pn_internal_scope . LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main

    LEFT_PARENTHESIS shift and go to state 36


state 31

    (5) pn_internal_scope -> empty .

    LEFT_PARENTHESIS reduce using rule 5 (pn_internal_scope -> empty .)


state 32

    (21) var_dec -> VAR tipo pn_var_type . pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (27) pn_value_type -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    pn_value_type                  shift and go to state 37
    empty                          shift and go to state 38

state 33

    (26) pn_var_type -> empty .

    ID              reduce using rule 26 (pn_var_type -> empty .)


state 34

    (22) var_dec -> LIST tipo pn_var_type . pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (27) pn_value_type -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)

    pn_value_type                  shift and go to state 39
    empty                          shift and go to state 38

state 35

    (114) func_dec -> FUNC return_module ID . pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (120) pn_add_func -> . empty
    (126) empty -> .

    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_add_func                    shift and go to state 40
    empty                          shift and go to state 41

state 36

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS . RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main

    RIGHT_PARENTHESIS shift and go to state 42


state 37

    (21) var_dec -> VAR tipo pn_var_type pn_value_type . ID pn_current_name SEMICOLON pn_add_variable

    ID              shift and go to state 43


state 38

    (27) pn_value_type -> empty .

    ID              reduce using rule 27 (pn_value_type -> empty .)


state 39

    (22) var_dec -> LIST tipo pn_var_type pn_value_type . ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON

    ID              shift and go to state 44


state 40

    (114) func_dec -> FUNC return_module ID pn_add_func . LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    LEFT_PARENTHESIS shift and go to state 45


state 41

    (120) pn_add_func -> empty .

    LEFT_PARENTHESIS reduce using rule 120 (pn_add_func -> empty .)


state 42

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS . LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main

    LEFT_CURLYB     shift and go to state 46


state 43

    (21) var_dec -> VAR tipo pn_var_type pn_value_type ID . pn_current_name SEMICOLON pn_add_variable
    (28) pn_current_name -> . empty
    (126) empty -> .

    SEMICOLON       reduce using rule 126 (empty -> .)

    pn_current_name                shift and go to state 47
    empty                          shift and go to state 48

state 44

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID . pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (28) pn_current_name -> . empty
    (126) empty -> .

    LEFT_BRACKET    reduce using rule 126 (empty -> .)

    pn_current_name                shift and go to state 49
    empty                          shift and go to state 48

state 45

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS . parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (81) parametro -> . tipo ID parametro_rec
    (82) parametro -> . empty
    (75) tipo -> . INT
    (76) tipo -> . FLOAT
    (77) tipo -> . BOOL
    (78) tipo -> . STRING
    (126) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    parametro                      shift and go to state 50
    tipo                           shift and go to state 51
    empty                          shift and go to state 52

state 46

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB . vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (21) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (22) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (126) empty -> .

    VAR             shift and go to state 15
    LIST            shift and go to state 16
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)

    vars_rec                       shift and go to state 53
    var_dec                        shift and go to state 54
    empty                          shift and go to state 55

state 47

    (21) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name . SEMICOLON pn_add_variable

    SEMICOLON       shift and go to state 56


state 48

    (28) pn_current_name -> empty .

    SEMICOLON       reduce using rule 28 (pn_current_name -> empty .)
    LEFT_BRACKET    reduce using rule 28 (pn_current_name -> empty .)


state 49

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name . LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON

    LEFT_BRACKET    shift and go to state 57


state 50

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro . pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (115) pn_add_param_vartable -> . empty
    (126) empty -> .

    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_add_param_vartable          shift and go to state 58
    empty                          shift and go to state 59

state 51

    (81) parametro -> tipo . ID parametro_rec

    ID              shift and go to state 60


state 52

    (82) parametro -> empty .

    RIGHT_PARENTHESIS reduce using rule 82 (parametro -> empty .)


state 53

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec . pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main
    (116) pn_gen_vartable -> . empty
    (126) empty -> .

    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)

    pn_gen_vartable                shift and go to state 61
    empty                          shift and go to state 62

state 54

    (3) vars_rec -> var_dec . vars_rec
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (21) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (22) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (126) empty -> .

    VAR             shift and go to state 15
    LIST            shift and go to state 16
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    var_dec                        shift and go to state 54
    vars_rec                       shift and go to state 63
    empty                          shift and go to state 55

state 55

    (4) vars_rec -> empty .

    IF              reduce using rule 4 (vars_rec -> empty .)
    WHILE           reduce using rule 4 (vars_rec -> empty .)
    READ            reduce using rule 4 (vars_rec -> empty .)
    WRITE           reduce using rule 4 (vars_rec -> empty .)
    CALL            reduce using rule 4 (vars_rec -> empty .)
    ID              reduce using rule 4 (vars_rec -> empty .)
    RIGHT_CURLYB    reduce using rule 4 (vars_rec -> empty .)
    RETURN          reduce using rule 4 (vars_rec -> empty .)


state 56

    (21) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON . pn_add_variable
    (29) pn_add_variable -> . empty
    (126) empty -> .

    VAR             reduce using rule 126 (empty -> .)
    LIST            reduce using rule 126 (empty -> .)
    FUNC            reduce using rule 126 (empty -> .)
    MAIN            reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    pn_add_variable                shift and go to state 64
    empty                          shift and go to state 65

state 57

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET . cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT

    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 68

    cte_int                        shift and go to state 66

state 58

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable . pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (121) pn_return_type -> . empty
    (126) empty -> .

    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_return_type                 shift and go to state 69
    empty                          shift and go to state 70

state 59

    (115) pn_add_param_vartable -> empty .

    RIGHT_PARENTHESIS reduce using rule 115 (pn_add_param_vartable -> empty .)


state 60

    (81) parametro -> tipo ID . parametro_rec
    (83) parametro_rec -> . COMMA tipo ID parametro_rec
    (84) parametro_rec -> . empty
    (126) empty -> .

    COMMA           shift and go to state 72
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    parametro_rec                  shift and go to state 71
    empty                          shift and go to state 73

state 61

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable . bloque_rec RIGHT_CURLYB pn_end_main
    (124) bloque_rec -> . bloque bloque_rec
    (125) bloque_rec -> . empty
    (30) bloque -> . asignacion
    (31) bloque -> . condicional
    (32) bloque -> . while
    (33) bloque -> . read
    (34) bloque -> . write
    (35) bloque -> . func_call SEMICOLON
    (126) empty -> .
    (36) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
    (100) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    CALL            shift and go to state 88
    ID              shift and go to state 89

    bloque_rec                     shift and go to state 74
    bloque                         shift and go to state 75
    empty                          shift and go to state 76
    asignacion                     shift and go to state 77
    condicional                    shift and go to state 78
    while                          shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    func_call                      shift and go to state 82
    var                            shift and go to state 83

state 62

    (116) pn_gen_vartable -> empty .

    IF              reduce using rule 116 (pn_gen_vartable -> empty .)
    WHILE           reduce using rule 116 (pn_gen_vartable -> empty .)
    READ            reduce using rule 116 (pn_gen_vartable -> empty .)
    WRITE           reduce using rule 116 (pn_gen_vartable -> empty .)
    CALL            reduce using rule 116 (pn_gen_vartable -> empty .)
    ID              reduce using rule 116 (pn_gen_vartable -> empty .)
    RIGHT_CURLYB    reduce using rule 116 (pn_gen_vartable -> empty .)
    RETURN          reduce using rule 116 (pn_gen_vartable -> empty .)


state 63

    (3) vars_rec -> var_dec vars_rec .

    IF              reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    WHILE           reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    READ            reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    WRITE           reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    CALL            reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    ID              reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    RIGHT_CURLYB    reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    RETURN          reduce using rule 3 (vars_rec -> var_dec vars_rec .)


state 64

    (21) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .

    VAR             reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    LIST            reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    FUNC            reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    MAIN            reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    IF              reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    WHILE           reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    READ            reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    WRITE           reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    CALL            reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    ID              reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    RIGHT_CURLYB    reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    RETURN          reduce using rule 21 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)


state 65

    (29) pn_add_variable -> empty .

    VAR             reduce using rule 29 (pn_add_variable -> empty .)
    LIST            reduce using rule 29 (pn_add_variable -> empty .)
    FUNC            reduce using rule 29 (pn_add_variable -> empty .)
    MAIN            reduce using rule 29 (pn_add_variable -> empty .)
    IF              reduce using rule 29 (pn_add_variable -> empty .)
    WHILE           reduce using rule 29 (pn_add_variable -> empty .)
    READ            reduce using rule 29 (pn_add_variable -> empty .)
    WRITE           reduce using rule 29 (pn_add_variable -> empty .)
    CALL            reduce using rule 29 (pn_add_variable -> empty .)
    ID              reduce using rule 29 (pn_add_variable -> empty .)
    RIGHT_CURLYB    reduce using rule 29 (pn_add_variable -> empty .)
    RETURN          reduce using rule 29 (pn_add_variable -> empty .)
    RIGHT_BRACKET   reduce using rule 29 (pn_add_variable -> empty .)


state 66

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int . pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (29) pn_add_variable -> . empty
    (126) empty -> .

    RIGHT_BRACKET   reduce using rule 126 (empty -> .)

    pn_add_variable                shift and go to state 90
    empty                          shift and go to state 65

state 67

    (68) cte_int -> CONST_INT .

    RIGHT_BRACKET   reduce using rule 68 (cte_int -> CONST_INT .)
    MULTIPLICATION  reduce using rule 68 (cte_int -> CONST_INT .)
    DIVISION        reduce using rule 68 (cte_int -> CONST_INT .)
    PLUS            reduce using rule 68 (cte_int -> CONST_INT .)
    MINUS           reduce using rule 68 (cte_int -> CONST_INT .)
    GREATER_THAN    reduce using rule 68 (cte_int -> CONST_INT .)
    LESS_THAN       reduce using rule 68 (cte_int -> CONST_INT .)
    EQUAL_COMPARE   reduce using rule 68 (cte_int -> CONST_INT .)
    NOT_EQUAL       reduce using rule 68 (cte_int -> CONST_INT .)
    AND             reduce using rule 68 (cte_int -> CONST_INT .)
    OR              reduce using rule 68 (cte_int -> CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 68 (cte_int -> CONST_INT .)
    MORE            reduce using rule 68 (cte_int -> CONST_INT .)
    SEMICOLON       reduce using rule 68 (cte_int -> CONST_INT .)
    COMMA           reduce using rule 68 (cte_int -> CONST_INT .)


state 68

    (69) cte_int -> MINUS . CONST_INT

    CONST_INT       shift and go to state 91


state 69

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type . RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    RIGHT_PARENTHESIS shift and go to state 92


state 70

    (121) pn_return_type -> empty .

    RIGHT_PARENTHESIS reduce using rule 121 (pn_return_type -> empty .)


state 71

    (81) parametro -> tipo ID parametro_rec .

    RIGHT_PARENTHESIS reduce using rule 81 (parametro -> tipo ID parametro_rec .)


state 72

    (83) parametro_rec -> COMMA . tipo ID parametro_rec
    (75) tipo -> . INT
    (76) tipo -> . FLOAT
    (77) tipo -> . BOOL
    (78) tipo -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    tipo                           shift and go to state 93

state 73

    (84) parametro_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 84 (parametro_rec -> empty .)


state 74

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec . RIGHT_CURLYB pn_end_main

    RIGHT_CURLYB    shift and go to state 94


state 75

    (124) bloque_rec -> bloque . bloque_rec
    (124) bloque_rec -> . bloque bloque_rec
    (125) bloque_rec -> . empty
    (30) bloque -> . asignacion
    (31) bloque -> . condicional
    (32) bloque -> . while
    (33) bloque -> . read
    (34) bloque -> . write
    (35) bloque -> . func_call SEMICOLON
    (126) empty -> .
    (36) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
    (100) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    CALL            shift and go to state 88
    ID              shift and go to state 89

    bloque                         shift and go to state 75
    bloque_rec                     shift and go to state 95
    empty                          shift and go to state 76
    asignacion                     shift and go to state 77
    condicional                    shift and go to state 78
    while                          shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    func_call                      shift and go to state 82
    var                            shift and go to state 83

state 76

    (125) bloque_rec -> empty .

    RIGHT_CURLYB    reduce using rule 125 (bloque_rec -> empty .)
    RETURN          reduce using rule 125 (bloque_rec -> empty .)


state 77

    (30) bloque -> asignacion .

    IF              reduce using rule 30 (bloque -> asignacion .)
    WHILE           reduce using rule 30 (bloque -> asignacion .)
    READ            reduce using rule 30 (bloque -> asignacion .)
    WRITE           reduce using rule 30 (bloque -> asignacion .)
    CALL            reduce using rule 30 (bloque -> asignacion .)
    ID              reduce using rule 30 (bloque -> asignacion .)
    RIGHT_CURLYB    reduce using rule 30 (bloque -> asignacion .)
    RETURN          reduce using rule 30 (bloque -> asignacion .)


state 78

    (31) bloque -> condicional .

    IF              reduce using rule 31 (bloque -> condicional .)
    WHILE           reduce using rule 31 (bloque -> condicional .)
    READ            reduce using rule 31 (bloque -> condicional .)
    WRITE           reduce using rule 31 (bloque -> condicional .)
    CALL            reduce using rule 31 (bloque -> condicional .)
    ID              reduce using rule 31 (bloque -> condicional .)
    RIGHT_CURLYB    reduce using rule 31 (bloque -> condicional .)
    RETURN          reduce using rule 31 (bloque -> condicional .)


state 79

    (32) bloque -> while .

    IF              reduce using rule 32 (bloque -> while .)
    WHILE           reduce using rule 32 (bloque -> while .)
    READ            reduce using rule 32 (bloque -> while .)
    WRITE           reduce using rule 32 (bloque -> while .)
    CALL            reduce using rule 32 (bloque -> while .)
    ID              reduce using rule 32 (bloque -> while .)
    RIGHT_CURLYB    reduce using rule 32 (bloque -> while .)
    RETURN          reduce using rule 32 (bloque -> while .)


state 80

    (33) bloque -> read .

    IF              reduce using rule 33 (bloque -> read .)
    WHILE           reduce using rule 33 (bloque -> read .)
    READ            reduce using rule 33 (bloque -> read .)
    WRITE           reduce using rule 33 (bloque -> read .)
    CALL            reduce using rule 33 (bloque -> read .)
    ID              reduce using rule 33 (bloque -> read .)
    RIGHT_CURLYB    reduce using rule 33 (bloque -> read .)
    RETURN          reduce using rule 33 (bloque -> read .)


state 81

    (34) bloque -> write .

    IF              reduce using rule 34 (bloque -> write .)
    WHILE           reduce using rule 34 (bloque -> write .)
    READ            reduce using rule 34 (bloque -> write .)
    WRITE           reduce using rule 34 (bloque -> write .)
    CALL            reduce using rule 34 (bloque -> write .)
    ID              reduce using rule 34 (bloque -> write .)
    RIGHT_CURLYB    reduce using rule 34 (bloque -> write .)
    RETURN          reduce using rule 34 (bloque -> write .)


state 82

    (35) bloque -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 96


state 83

    (36) asignacion -> var . pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (37) pn_var_assign -> . empty
    (126) empty -> .

    EQUAL_ASSIGN    reduce using rule 126 (empty -> .)

    pn_var_assign                  shift and go to state 97
    empty                          shift and go to state 98

state 84

    (85) condicional -> IF . LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    LEFT_PARENTHESIS shift and go to state 99


state 85

    (91) while -> WHILE . pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) pn_while -> . empty
    (126) empty -> .

    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_while                       shift and go to state 100
    empty                          shift and go to state 101

state 86

    (96) read -> READ . LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 102


state 87

    (100) write -> WRITE . LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 103


state 88

    (105) func_call -> CALL . ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    ID              shift and go to state 104


state 89

    (14) var -> ID . varArray
    (15) varArray -> . empty
    (16) varArray -> . pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return
    (126) empty -> .
    (17) pn_array_access1 -> . empty

    EQUAL_ASSIGN    reduce using rule 126 (empty -> .)
    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    LEFT_BRACKET    reduce using rule 126 (empty -> .)

    varArray                       shift and go to state 105
    empty                          shift and go to state 106
    pn_array_access1               shift and go to state 107

state 90

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable . pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (24) pn_add_dim_list -> . empty
    (126) empty -> .

    RIGHT_BRACKET   reduce using rule 126 (empty -> .)

    pn_add_dim_list                shift and go to state 108
    empty                          shift and go to state 109

state 91

    (69) cte_int -> MINUS CONST_INT .

    RIGHT_BRACKET   reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    MULTIPLICATION  reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    DIVISION        reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    PLUS            reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    MINUS           reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    GREATER_THAN    reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    LESS_THAN       reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    EQUAL_COMPARE   reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    NOT_EQUAL       reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    AND             reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    OR              reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    MORE            reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    SEMICOLON       reduce using rule 69 (cte_int -> MINUS CONST_INT .)
    COMMA           reduce using rule 69 (cte_int -> MINUS CONST_INT .)


state 92

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS . LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    LEFT_CURLYB     shift and go to state 110


state 93

    (83) parametro_rec -> COMMA tipo . ID parametro_rec

    ID              shift and go to state 111


state 94

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB . pn_end_main
    (118) pn_end_main -> . empty
    (126) empty -> .

    $end            reduce using rule 126 (empty -> .)

    pn_end_main                    shift and go to state 112
    empty                          shift and go to state 113

state 95

    (124) bloque_rec -> bloque bloque_rec .

    RIGHT_CURLYB    reduce using rule 124 (bloque_rec -> bloque bloque_rec .)
    RETURN          reduce using rule 124 (bloque_rec -> bloque bloque_rec .)


state 96

    (35) bloque -> func_call SEMICOLON .

    IF              reduce using rule 35 (bloque -> func_call SEMICOLON .)
    WHILE           reduce using rule 35 (bloque -> func_call SEMICOLON .)
    READ            reduce using rule 35 (bloque -> func_call SEMICOLON .)
    WRITE           reduce using rule 35 (bloque -> func_call SEMICOLON .)
    CALL            reduce using rule 35 (bloque -> func_call SEMICOLON .)
    ID              reduce using rule 35 (bloque -> func_call SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 35 (bloque -> func_call SEMICOLON .)
    RETURN          reduce using rule 35 (bloque -> func_call SEMICOLON .)


state 97

    (36) asignacion -> var pn_var_assign . EQUAL_ASSIGN all_logical SEMICOLON

    EQUAL_ASSIGN    shift and go to state 114


state 98

    (37) pn_var_assign -> empty .

    EQUAL_ASSIGN    reduce using rule 37 (pn_var_assign -> empty .)


state 99

    (85) condicional -> IF LEFT_PARENTHESIS . all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 116
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 100

    (91) while -> WHILE pn_while . LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop

    LEFT_PARENTHESIS shift and go to state 129


state 101

    (93) pn_while -> empty .

    LEFT_PARENTHESIS reduce using rule 93 (pn_while -> empty .)


state 102

    (96) read -> READ LEFT_PARENTHESIS . var_readRec RIGHT_PARENTHESIS SEMICOLON
    (97) var_readRec -> . var var_readRec1
    (14) var -> . ID varArray

    ID              shift and go to state 89

    var_readRec                    shift and go to state 130
    var                            shift and go to state 131

state 103

    (100) write -> WRITE LEFT_PARENTHESIS . write_rec RIGHT_PARENTHESIS SEMICOLON
    (101) write_rec -> . all_logical pn_write_quad write_rec1
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    write_rec                      shift and go to state 132
    all_logical                    shift and go to state 133
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 104

    (105) func_call -> CALL ID . pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (106) pn_verify_func -> . empty
    (126) empty -> .

    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_verify_func                 shift and go to state 134
    empty                          shift and go to state 135

state 105

    (14) var -> ID varArray .

    EQUAL_ASSIGN    reduce using rule 14 (var -> ID varArray .)
    MULTIPLICATION  reduce using rule 14 (var -> ID varArray .)
    DIVISION        reduce using rule 14 (var -> ID varArray .)
    PLUS            reduce using rule 14 (var -> ID varArray .)
    MINUS           reduce using rule 14 (var -> ID varArray .)
    GREATER_THAN    reduce using rule 14 (var -> ID varArray .)
    LESS_THAN       reduce using rule 14 (var -> ID varArray .)
    EQUAL_COMPARE   reduce using rule 14 (var -> ID varArray .)
    NOT_EQUAL       reduce using rule 14 (var -> ID varArray .)
    AND             reduce using rule 14 (var -> ID varArray .)
    OR              reduce using rule 14 (var -> ID varArray .)
    RIGHT_PARENTHESIS reduce using rule 14 (var -> ID varArray .)
    COMMA           reduce using rule 14 (var -> ID varArray .)
    MORE            reduce using rule 14 (var -> ID varArray .)
    SEMICOLON       reduce using rule 14 (var -> ID varArray .)
    RIGHT_BRACKET   reduce using rule 14 (var -> ID varArray .)


state 106

    (15) varArray -> empty .
    (17) pn_array_access1 -> empty .

    EQUAL_ASSIGN    reduce using rule 15 (varArray -> empty .)
    MULTIPLICATION  reduce using rule 15 (varArray -> empty .)
    DIVISION        reduce using rule 15 (varArray -> empty .)
    PLUS            reduce using rule 15 (varArray -> empty .)
    MINUS           reduce using rule 15 (varArray -> empty .)
    GREATER_THAN    reduce using rule 15 (varArray -> empty .)
    LESS_THAN       reduce using rule 15 (varArray -> empty .)
    EQUAL_COMPARE   reduce using rule 15 (varArray -> empty .)
    NOT_EQUAL       reduce using rule 15 (varArray -> empty .)
    AND             reduce using rule 15 (varArray -> empty .)
    OR              reduce using rule 15 (varArray -> empty .)
    RIGHT_PARENTHESIS reduce using rule 15 (varArray -> empty .)
    COMMA           reduce using rule 15 (varArray -> empty .)
    MORE            reduce using rule 15 (varArray -> empty .)
    SEMICOLON       reduce using rule 15 (varArray -> empty .)
    RIGHT_BRACKET   reduce using rule 15 (varArray -> empty .)
    LEFT_BRACKET    reduce using rule 17 (pn_array_access1 -> empty .)


state 107

    (16) varArray -> pn_array_access1 . LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return

    LEFT_BRACKET    shift and go to state 136


state 108

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list . pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (25) pn_add_dim -> . empty
    (126) empty -> .

    RIGHT_BRACKET   reduce using rule 126 (empty -> .)

    pn_add_dim                     shift and go to state 137
    empty                          shift and go to state 138

state 109

    (24) pn_add_dim_list -> empty .

    RIGHT_BRACKET   reduce using rule 24 (pn_add_dim_list -> empty .)


state 110

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB . vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (21) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (22) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON
    (126) empty -> .

    VAR             shift and go to state 15
    LIST            shift and go to state 16
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    vars_rec                       shift and go to state 139
    var_dec                        shift and go to state 54
    empty                          shift and go to state 55

state 111

    (83) parametro_rec -> COMMA tipo ID . parametro_rec
    (83) parametro_rec -> . COMMA tipo ID parametro_rec
    (84) parametro_rec -> . empty
    (126) empty -> .

    COMMA           shift and go to state 72
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    parametro_rec                  shift and go to state 140
    empty                          shift and go to state 73

state 112

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main .

    $end            reduce using rule 2 (main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main .)


state 113

    (118) pn_end_main -> empty .

    $end            reduce using rule 118 (pn_end_main -> empty .)


state 114

    (36) asignacion -> var pn_var_assign EQUAL_ASSIGN . all_logical SEMICOLON
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    var                            shift and go to state 125
    all_logical                    shift and go to state 141
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    func_call                      shift and go to state 126

state 115

    (66) factor -> LEFT_PARENTHESIS . pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (73) pn_open_parenthesis -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_open_parenthesis            shift and go to state 142
    empty                          shift and go to state 143

state 116

    (85) condicional -> IF LEFT_PARENTHESIS all_logical . RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    RIGHT_PARENTHESIS shift and go to state 144


state 117

    (39) all_logical -> logical_exp . pn_all_logical all_logical_rec
    (43) pn_all_logical -> . empty
    (126) empty -> .

    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_all_logical                 shift and go to state 145
    empty                          shift and go to state 146

state 118

    (44) logical_exp -> exp . pn_logical_exp logical_exp_rec
    (50) pn_logical_exp -> . empty
    (126) empty -> .

    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_logical_exp                 shift and go to state 147
    empty                          shift and go to state 148

state 119

    (51) exp -> termino . pn_exp exp_rec
    (52) pn_exp -> . empty
    (126) empty -> .

    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_exp                         shift and go to state 149
    empty                          shift and go to state 150

state 120

    (56) termino -> factor . pn_termino termino_rec
    (60) pn_termino -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_termino                     shift and go to state 151
    empty                          shift and go to state 152

state 121

    (61) factor -> cte_int . pn_add_constant
    (72) pn_add_constant -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_add_constant                shift and go to state 153
    empty                          shift and go to state 154

state 122

    (62) factor -> cte_float . pn_add_constant
    (72) pn_add_constant -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_add_constant                shift and go to state 155
    empty                          shift and go to state 154

state 123

    (63) factor -> CONST_BOOL . pn_add_constant
    (72) pn_add_constant -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_add_constant                shift and go to state 156
    empty                          shift and go to state 154

state 124

    (64) factor -> CONST_STRING . empty empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    empty                          shift and go to state 157

state 125

    (65) factor -> var .

    MULTIPLICATION  reduce using rule 65 (factor -> var .)
    DIVISION        reduce using rule 65 (factor -> var .)
    PLUS            reduce using rule 65 (factor -> var .)
    MINUS           reduce using rule 65 (factor -> var .)
    GREATER_THAN    reduce using rule 65 (factor -> var .)
    LESS_THAN       reduce using rule 65 (factor -> var .)
    EQUAL_COMPARE   reduce using rule 65 (factor -> var .)
    NOT_EQUAL       reduce using rule 65 (factor -> var .)
    AND             reduce using rule 65 (factor -> var .)
    OR              reduce using rule 65 (factor -> var .)
    RIGHT_PARENTHESIS reduce using rule 65 (factor -> var .)
    MORE            reduce using rule 65 (factor -> var .)
    SEMICOLON       reduce using rule 65 (factor -> var .)
    RIGHT_BRACKET   reduce using rule 65 (factor -> var .)
    COMMA           reduce using rule 65 (factor -> var .)


state 126

    (67) factor -> func_call .

    MULTIPLICATION  reduce using rule 67 (factor -> func_call .)
    DIVISION        reduce using rule 67 (factor -> func_call .)
    PLUS            reduce using rule 67 (factor -> func_call .)
    MINUS           reduce using rule 67 (factor -> func_call .)
    GREATER_THAN    reduce using rule 67 (factor -> func_call .)
    LESS_THAN       reduce using rule 67 (factor -> func_call .)
    EQUAL_COMPARE   reduce using rule 67 (factor -> func_call .)
    NOT_EQUAL       reduce using rule 67 (factor -> func_call .)
    AND             reduce using rule 67 (factor -> func_call .)
    OR              reduce using rule 67 (factor -> func_call .)
    RIGHT_PARENTHESIS reduce using rule 67 (factor -> func_call .)
    MORE            reduce using rule 67 (factor -> func_call .)
    SEMICOLON       reduce using rule 67 (factor -> func_call .)
    RIGHT_BRACKET   reduce using rule 67 (factor -> func_call .)
    COMMA           reduce using rule 67 (factor -> func_call .)


state 127

    (69) cte_int -> MINUS . CONST_INT
    (71) cte_float -> MINUS . CONST_FLOAT

    CONST_INT       shift and go to state 91
    CONST_FLOAT     shift and go to state 158


state 128

    (70) cte_float -> CONST_FLOAT .

    MULTIPLICATION  reduce using rule 70 (cte_float -> CONST_FLOAT .)
    DIVISION        reduce using rule 70 (cte_float -> CONST_FLOAT .)
    PLUS            reduce using rule 70 (cte_float -> CONST_FLOAT .)
    MINUS           reduce using rule 70 (cte_float -> CONST_FLOAT .)
    GREATER_THAN    reduce using rule 70 (cte_float -> CONST_FLOAT .)
    LESS_THAN       reduce using rule 70 (cte_float -> CONST_FLOAT .)
    EQUAL_COMPARE   reduce using rule 70 (cte_float -> CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 70 (cte_float -> CONST_FLOAT .)
    AND             reduce using rule 70 (cte_float -> CONST_FLOAT .)
    OR              reduce using rule 70 (cte_float -> CONST_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 70 (cte_float -> CONST_FLOAT .)
    MORE            reduce using rule 70 (cte_float -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 70 (cte_float -> CONST_FLOAT .)
    RIGHT_BRACKET   reduce using rule 70 (cte_float -> CONST_FLOAT .)
    COMMA           reduce using rule 70 (cte_float -> CONST_FLOAT .)


state 129

    (91) while -> WHILE pn_while LEFT_PARENTHESIS . all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 159
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 130

    (96) read -> READ LEFT_PARENTHESIS var_readRec . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 160


state 131

    (97) var_readRec -> var . var_readRec1
    (98) var_readRec1 -> . COMMA var var_readRec1
    (99) var_readRec1 -> . empty
    (126) empty -> .

    COMMA           shift and go to state 162
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    var_readRec1                   shift and go to state 161
    empty                          shift and go to state 163

state 132

    (100) write -> WRITE LEFT_PARENTHESIS write_rec . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 164


state 133

    (101) write_rec -> all_logical . pn_write_quad write_rec1
    (104) pn_write_quad -> . empty
    (126) empty -> .

    MORE            reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_write_quad                  shift and go to state 165
    empty                          shift and go to state 166

state 134

    (105) func_call -> CALL ID pn_verify_func . LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 167


state 135

    (106) pn_verify_func -> empty .

    LEFT_PARENTHESIS reduce using rule 106 (pn_verify_func -> empty .)


state 136

    (16) varArray -> pn_array_access1 LEFT_BRACKET . pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return
    (18) pn_array_access2 -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_array_access2               shift and go to state 168
    empty                          shift and go to state 169

state 137

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim . RIGHT_BRACKET list1 SEMICOLON

    RIGHT_BRACKET   shift and go to state 170


state 138

    (25) pn_add_dim -> empty .

    RIGHT_BRACKET   reduce using rule 25 (pn_add_dim -> empty .)


state 139

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec . pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (116) pn_gen_vartable -> . empty
    (126) empty -> .

    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    pn_gen_vartable                shift and go to state 171
    empty                          shift and go to state 62

state 140

    (83) parametro_rec -> COMMA tipo ID parametro_rec .

    RIGHT_PARENTHESIS reduce using rule 83 (parametro_rec -> COMMA tipo ID parametro_rec .)


state 141

    (36) asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical . SEMICOLON

    SEMICOLON       shift and go to state 172


state 142

    (66) factor -> LEFT_PARENTHESIS pn_open_parenthesis . all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 173
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 143

    (73) pn_open_parenthesis -> empty .

    CONST_BOOL      reduce using rule 73 (pn_open_parenthesis -> empty .)
    CONST_STRING    reduce using rule 73 (pn_open_parenthesis -> empty .)
    LEFT_PARENTHESIS reduce using rule 73 (pn_open_parenthesis -> empty .)
    CONST_INT       reduce using rule 73 (pn_open_parenthesis -> empty .)
    MINUS           reduce using rule 73 (pn_open_parenthesis -> empty .)
    CONST_FLOAT     reduce using rule 73 (pn_open_parenthesis -> empty .)
    ID              reduce using rule 73 (pn_open_parenthesis -> empty .)
    CALL            reduce using rule 73 (pn_open_parenthesis -> empty .)
    RIGHT_PARENTHESIS reduce using rule 73 (pn_open_parenthesis -> empty .)


state 144

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS . pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) pn_condicional -> . empty
    (126) empty -> .

    LEFT_CURLYB     reduce using rule 126 (empty -> .)

    pn_condicional                 shift and go to state 174
    empty                          shift and go to state 175

state 145

    (39) all_logical -> logical_exp pn_all_logical . all_logical_rec
    (40) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (41) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (42) all_logical_rec -> . empty
    (126) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 178
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    all_logical_rec                shift and go to state 176
    empty                          shift and go to state 179

state 146

    (43) pn_all_logical -> empty .

    AND             reduce using rule 43 (pn_all_logical -> empty .)
    OR              reduce using rule 43 (pn_all_logical -> empty .)
    RIGHT_PARENTHESIS reduce using rule 43 (pn_all_logical -> empty .)
    MORE            reduce using rule 43 (pn_all_logical -> empty .)
    SEMICOLON       reduce using rule 43 (pn_all_logical -> empty .)
    RIGHT_BRACKET   reduce using rule 43 (pn_all_logical -> empty .)
    COMMA           reduce using rule 43 (pn_all_logical -> empty .)


state 147

    (44) logical_exp -> exp pn_logical_exp . logical_exp_rec
    (45) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (48) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (49) logical_exp_rec -> . empty
    (126) empty -> .

    GREATER_THAN    shift and go to state 181
    LESS_THAN       shift and go to state 182
    EQUAL_COMPARE   shift and go to state 183
    NOT_EQUAL       shift and go to state 184
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    logical_exp_rec                shift and go to state 180
    empty                          shift and go to state 185

state 148

    (50) pn_logical_exp -> empty .

    GREATER_THAN    reduce using rule 50 (pn_logical_exp -> empty .)
    LESS_THAN       reduce using rule 50 (pn_logical_exp -> empty .)
    EQUAL_COMPARE   reduce using rule 50 (pn_logical_exp -> empty .)
    NOT_EQUAL       reduce using rule 50 (pn_logical_exp -> empty .)
    AND             reduce using rule 50 (pn_logical_exp -> empty .)
    OR              reduce using rule 50 (pn_logical_exp -> empty .)
    RIGHT_PARENTHESIS reduce using rule 50 (pn_logical_exp -> empty .)
    MORE            reduce using rule 50 (pn_logical_exp -> empty .)
    SEMICOLON       reduce using rule 50 (pn_logical_exp -> empty .)
    RIGHT_BRACKET   reduce using rule 50 (pn_logical_exp -> empty .)
    COMMA           reduce using rule 50 (pn_logical_exp -> empty .)


state 149

    (51) exp -> termino pn_exp . exp_rec
    (53) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (54) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (55) exp_rec -> . empty
    (126) empty -> .

    PLUS            shift and go to state 187
    MINUS           shift and go to state 188
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    exp_rec                        shift and go to state 186
    empty                          shift and go to state 189

state 150

    (52) pn_exp -> empty .

    PLUS            reduce using rule 52 (pn_exp -> empty .)
    MINUS           reduce using rule 52 (pn_exp -> empty .)
    GREATER_THAN    reduce using rule 52 (pn_exp -> empty .)
    LESS_THAN       reduce using rule 52 (pn_exp -> empty .)
    EQUAL_COMPARE   reduce using rule 52 (pn_exp -> empty .)
    NOT_EQUAL       reduce using rule 52 (pn_exp -> empty .)
    AND             reduce using rule 52 (pn_exp -> empty .)
    OR              reduce using rule 52 (pn_exp -> empty .)
    RIGHT_PARENTHESIS reduce using rule 52 (pn_exp -> empty .)
    MORE            reduce using rule 52 (pn_exp -> empty .)
    SEMICOLON       reduce using rule 52 (pn_exp -> empty .)
    RIGHT_BRACKET   reduce using rule 52 (pn_exp -> empty .)
    COMMA           reduce using rule 52 (pn_exp -> empty .)


state 151

    (56) termino -> factor pn_termino . termino_rec
    (57) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (58) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (59) termino_rec -> . empty
    (126) empty -> .

    MULTIPLICATION  shift and go to state 191
    DIVISION        shift and go to state 192
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    termino_rec                    shift and go to state 190
    empty                          shift and go to state 193

state 152

    (60) pn_termino -> empty .

    MULTIPLICATION  reduce using rule 60 (pn_termino -> empty .)
    DIVISION        reduce using rule 60 (pn_termino -> empty .)
    PLUS            reduce using rule 60 (pn_termino -> empty .)
    MINUS           reduce using rule 60 (pn_termino -> empty .)
    GREATER_THAN    reduce using rule 60 (pn_termino -> empty .)
    LESS_THAN       reduce using rule 60 (pn_termino -> empty .)
    EQUAL_COMPARE   reduce using rule 60 (pn_termino -> empty .)
    NOT_EQUAL       reduce using rule 60 (pn_termino -> empty .)
    AND             reduce using rule 60 (pn_termino -> empty .)
    OR              reduce using rule 60 (pn_termino -> empty .)
    RIGHT_PARENTHESIS reduce using rule 60 (pn_termino -> empty .)
    MORE            reduce using rule 60 (pn_termino -> empty .)
    SEMICOLON       reduce using rule 60 (pn_termino -> empty .)
    RIGHT_BRACKET   reduce using rule 60 (pn_termino -> empty .)
    COMMA           reduce using rule 60 (pn_termino -> empty .)


state 153

    (61) factor -> cte_int pn_add_constant .

    MULTIPLICATION  reduce using rule 61 (factor -> cte_int pn_add_constant .)
    DIVISION        reduce using rule 61 (factor -> cte_int pn_add_constant .)
    PLUS            reduce using rule 61 (factor -> cte_int pn_add_constant .)
    MINUS           reduce using rule 61 (factor -> cte_int pn_add_constant .)
    GREATER_THAN    reduce using rule 61 (factor -> cte_int pn_add_constant .)
    LESS_THAN       reduce using rule 61 (factor -> cte_int pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 61 (factor -> cte_int pn_add_constant .)
    NOT_EQUAL       reduce using rule 61 (factor -> cte_int pn_add_constant .)
    AND             reduce using rule 61 (factor -> cte_int pn_add_constant .)
    OR              reduce using rule 61 (factor -> cte_int pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 61 (factor -> cte_int pn_add_constant .)
    MORE            reduce using rule 61 (factor -> cte_int pn_add_constant .)
    SEMICOLON       reduce using rule 61 (factor -> cte_int pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 61 (factor -> cte_int pn_add_constant .)
    COMMA           reduce using rule 61 (factor -> cte_int pn_add_constant .)


state 154

    (72) pn_add_constant -> empty .

    MULTIPLICATION  reduce using rule 72 (pn_add_constant -> empty .)
    DIVISION        reduce using rule 72 (pn_add_constant -> empty .)
    PLUS            reduce using rule 72 (pn_add_constant -> empty .)
    MINUS           reduce using rule 72 (pn_add_constant -> empty .)
    GREATER_THAN    reduce using rule 72 (pn_add_constant -> empty .)
    LESS_THAN       reduce using rule 72 (pn_add_constant -> empty .)
    EQUAL_COMPARE   reduce using rule 72 (pn_add_constant -> empty .)
    NOT_EQUAL       reduce using rule 72 (pn_add_constant -> empty .)
    AND             reduce using rule 72 (pn_add_constant -> empty .)
    OR              reduce using rule 72 (pn_add_constant -> empty .)
    RIGHT_PARENTHESIS reduce using rule 72 (pn_add_constant -> empty .)
    MORE            reduce using rule 72 (pn_add_constant -> empty .)
    SEMICOLON       reduce using rule 72 (pn_add_constant -> empty .)
    RIGHT_BRACKET   reduce using rule 72 (pn_add_constant -> empty .)
    COMMA           reduce using rule 72 (pn_add_constant -> empty .)


state 155

    (62) factor -> cte_float pn_add_constant .

    MULTIPLICATION  reduce using rule 62 (factor -> cte_float pn_add_constant .)
    DIVISION        reduce using rule 62 (factor -> cte_float pn_add_constant .)
    PLUS            reduce using rule 62 (factor -> cte_float pn_add_constant .)
    MINUS           reduce using rule 62 (factor -> cte_float pn_add_constant .)
    GREATER_THAN    reduce using rule 62 (factor -> cte_float pn_add_constant .)
    LESS_THAN       reduce using rule 62 (factor -> cte_float pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 62 (factor -> cte_float pn_add_constant .)
    NOT_EQUAL       reduce using rule 62 (factor -> cte_float pn_add_constant .)
    AND             reduce using rule 62 (factor -> cte_float pn_add_constant .)
    OR              reduce using rule 62 (factor -> cte_float pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 62 (factor -> cte_float pn_add_constant .)
    MORE            reduce using rule 62 (factor -> cte_float pn_add_constant .)
    SEMICOLON       reduce using rule 62 (factor -> cte_float pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 62 (factor -> cte_float pn_add_constant .)
    COMMA           reduce using rule 62 (factor -> cte_float pn_add_constant .)


state 156

    (63) factor -> CONST_BOOL pn_add_constant .

    MULTIPLICATION  reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    DIVISION        reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    PLUS            reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    MINUS           reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    GREATER_THAN    reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    LESS_THAN       reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    NOT_EQUAL       reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    AND             reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    OR              reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    MORE            reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    SEMICOLON       reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)
    COMMA           reduce using rule 63 (factor -> CONST_BOOL pn_add_constant .)


state 157

    (64) factor -> CONST_STRING empty . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    empty                          shift and go to state 194

state 158

    (71) cte_float -> MINUS CONST_FLOAT .

    MULTIPLICATION  reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    DIVISION        reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    PLUS            reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    MINUS           reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    GREATER_THAN    reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    LESS_THAN       reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    EQUAL_COMPARE   reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    AND             reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    OR              reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    MORE            reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    SEMICOLON       reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    RIGHT_BRACKET   reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)
    COMMA           reduce using rule 71 (cte_float -> MINUS CONST_FLOAT .)


state 159

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical . RIGHT_PARENTHESIS pn_while_jump while_loop

    RIGHT_PARENTHESIS shift and go to state 195


state 160

    (96) read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 196


state 161

    (97) var_readRec -> var var_readRec1 .

    RIGHT_PARENTHESIS reduce using rule 97 (var_readRec -> var var_readRec1 .)


state 162

    (98) var_readRec1 -> COMMA . var var_readRec1
    (14) var -> . ID varArray

    ID              shift and go to state 89

    var                            shift and go to state 197

state 163

    (99) var_readRec1 -> empty .

    RIGHT_PARENTHESIS reduce using rule 99 (var_readRec1 -> empty .)


state 164

    (100) write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 198


state 165

    (101) write_rec -> all_logical pn_write_quad . write_rec1
    (102) write_rec1 -> . MORE all_logical pn_write_quad write_rec1
    (103) write_rec1 -> . empty
    (126) empty -> .

    MORE            shift and go to state 200
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    write_rec1                     shift and go to state 199
    empty                          shift and go to state 201

state 166

    (104) pn_write_quad -> empty .

    MORE            reduce using rule 104 (pn_write_quad -> empty .)
    RIGHT_PARENTHESIS reduce using rule 104 (pn_write_quad -> empty .)


state 167

    (105) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS . pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (107) pn_param_counter -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_param_counter               shift and go to state 202
    empty                          shift and go to state 203

state 168

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 . all_logical pn_array_access3 RIGHT_BRACKET pn_access_return
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 204
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 169

    (18) pn_array_access2 -> empty .

    CONST_BOOL      reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_STRING    reduce using rule 18 (pn_array_access2 -> empty .)
    LEFT_PARENTHESIS reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_INT       reduce using rule 18 (pn_array_access2 -> empty .)
    MINUS           reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_FLOAT     reduce using rule 18 (pn_array_access2 -> empty .)
    ID              reduce using rule 18 (pn_array_access2 -> empty .)
    CALL            reduce using rule 18 (pn_array_access2 -> empty .)


state 170

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET . list1 SEMICOLON
    (23) list1 -> . empty
    (126) empty -> .

    SEMICOLON       reduce using rule 126 (empty -> .)

    list1                          shift and go to state 205
    empty                          shift and go to state 206

state 171

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable . pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (117) pn_func_quad -> . empty
    (126) empty -> .

    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    pn_func_quad                   shift and go to state 207
    empty                          shift and go to state 208

state 172

    (36) asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .

    IF              reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    WHILE           reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    READ            reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    WRITE           reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    CALL            reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    ID              reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    RETURN          reduce using rule 36 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)


state 173

    (66) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical . RIGHT_PARENTHESIS pn_close_parenthesis

    RIGHT_PARENTHESIS shift and go to state 209


state 174

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional . LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    LEFT_CURLYB     shift and go to state 210


state 175

    (88) pn_condicional -> empty .

    LEFT_CURLYB     reduce using rule 88 (pn_condicional -> empty .)


state 176

    (39) all_logical -> logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 39 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 39 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 39 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 39 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 39 (all_logical -> logical_exp pn_all_logical all_logical_rec .)


state 177

    (40) all_logical_rec -> AND . pn_operator logical_exp pn_all_logical all_logical_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 211
    empty                          shift and go to state 212

state 178

    (41) all_logical_rec -> OR . pn_operator logical_exp pn_all_logical all_logical_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 213
    empty                          shift and go to state 212

state 179

    (42) all_logical_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 42 (all_logical_rec -> empty .)
    MORE            reduce using rule 42 (all_logical_rec -> empty .)
    SEMICOLON       reduce using rule 42 (all_logical_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 42 (all_logical_rec -> empty .)
    COMMA           reduce using rule 42 (all_logical_rec -> empty .)


state 180

    (44) logical_exp -> exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 44 (logical_exp -> exp pn_logical_exp logical_exp_rec .)


state 181

    (45) logical_exp_rec -> GREATER_THAN . pn_operator exp pn_logical_exp logical_exp_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 214
    empty                          shift and go to state 212

state 182

    (46) logical_exp_rec -> LESS_THAN . pn_operator exp pn_logical_exp logical_exp_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 215
    empty                          shift and go to state 212

state 183

    (47) logical_exp_rec -> EQUAL_COMPARE . pn_operator exp pn_logical_exp logical_exp_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 216
    empty                          shift and go to state 212

state 184

    (48) logical_exp_rec -> NOT_EQUAL . pn_operator exp pn_logical_exp logical_exp_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 217
    empty                          shift and go to state 212

state 185

    (49) logical_exp_rec -> empty .

    AND             reduce using rule 49 (logical_exp_rec -> empty .)
    OR              reduce using rule 49 (logical_exp_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 49 (logical_exp_rec -> empty .)
    MORE            reduce using rule 49 (logical_exp_rec -> empty .)
    SEMICOLON       reduce using rule 49 (logical_exp_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 49 (logical_exp_rec -> empty .)
    COMMA           reduce using rule 49 (logical_exp_rec -> empty .)


state 186

    (51) exp -> termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    AND             reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    OR              reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    MORE            reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 51 (exp -> termino pn_exp exp_rec .)
    COMMA           reduce using rule 51 (exp -> termino pn_exp exp_rec .)


state 187

    (53) exp_rec -> PLUS . pn_operator termino pn_exp exp_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 218
    empty                          shift and go to state 212

state 188

    (54) exp_rec -> MINUS . pn_operator termino pn_exp exp_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 219
    empty                          shift and go to state 212

state 189

    (55) exp_rec -> empty .

    GREATER_THAN    reduce using rule 55 (exp_rec -> empty .)
    LESS_THAN       reduce using rule 55 (exp_rec -> empty .)
    EQUAL_COMPARE   reduce using rule 55 (exp_rec -> empty .)
    NOT_EQUAL       reduce using rule 55 (exp_rec -> empty .)
    AND             reduce using rule 55 (exp_rec -> empty .)
    OR              reduce using rule 55 (exp_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 55 (exp_rec -> empty .)
    MORE            reduce using rule 55 (exp_rec -> empty .)
    SEMICOLON       reduce using rule 55 (exp_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 55 (exp_rec -> empty .)
    COMMA           reduce using rule 55 (exp_rec -> empty .)


state 190

    (56) termino -> factor pn_termino termino_rec .

    PLUS            reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    MINUS           reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    AND             reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    OR              reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    MORE            reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 56 (termino -> factor pn_termino termino_rec .)
    COMMA           reduce using rule 56 (termino -> factor pn_termino termino_rec .)


state 191

    (57) termino_rec -> MULTIPLICATION . pn_operator factor pn_termino termino_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 220
    empty                          shift and go to state 212

state 192

    (58) termino_rec -> DIVISION . pn_operator factor pn_termino termino_rec
    (38) pn_operator -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)

    pn_operator                    shift and go to state 221
    empty                          shift and go to state 212

state 193

    (59) termino_rec -> empty .

    PLUS            reduce using rule 59 (termino_rec -> empty .)
    MINUS           reduce using rule 59 (termino_rec -> empty .)
    GREATER_THAN    reduce using rule 59 (termino_rec -> empty .)
    LESS_THAN       reduce using rule 59 (termino_rec -> empty .)
    EQUAL_COMPARE   reduce using rule 59 (termino_rec -> empty .)
    NOT_EQUAL       reduce using rule 59 (termino_rec -> empty .)
    AND             reduce using rule 59 (termino_rec -> empty .)
    OR              reduce using rule 59 (termino_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 59 (termino_rec -> empty .)
    MORE            reduce using rule 59 (termino_rec -> empty .)
    SEMICOLON       reduce using rule 59 (termino_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 59 (termino_rec -> empty .)
    COMMA           reduce using rule 59 (termino_rec -> empty .)


state 194

    (64) factor -> CONST_STRING empty empty .

    MULTIPLICATION  reduce using rule 64 (factor -> CONST_STRING empty empty .)
    DIVISION        reduce using rule 64 (factor -> CONST_STRING empty empty .)
    PLUS            reduce using rule 64 (factor -> CONST_STRING empty empty .)
    MINUS           reduce using rule 64 (factor -> CONST_STRING empty empty .)
    GREATER_THAN    reduce using rule 64 (factor -> CONST_STRING empty empty .)
    LESS_THAN       reduce using rule 64 (factor -> CONST_STRING empty empty .)
    EQUAL_COMPARE   reduce using rule 64 (factor -> CONST_STRING empty empty .)
    NOT_EQUAL       reduce using rule 64 (factor -> CONST_STRING empty empty .)
    AND             reduce using rule 64 (factor -> CONST_STRING empty empty .)
    OR              reduce using rule 64 (factor -> CONST_STRING empty empty .)
    RIGHT_PARENTHESIS reduce using rule 64 (factor -> CONST_STRING empty empty .)
    MORE            reduce using rule 64 (factor -> CONST_STRING empty empty .)
    SEMICOLON       reduce using rule 64 (factor -> CONST_STRING empty empty .)
    RIGHT_BRACKET   reduce using rule 64 (factor -> CONST_STRING empty empty .)
    COMMA           reduce using rule 64 (factor -> CONST_STRING empty empty .)


state 195

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS . pn_while_jump while_loop
    (94) pn_while_jump -> . empty
    (126) empty -> .

    LEFT_CURLYB     reduce using rule 126 (empty -> .)

    pn_while_jump                  shift and go to state 222
    empty                          shift and go to state 223

state 196

    (96) read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .

    IF              reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    CALL            reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 96 (read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON .)


state 197

    (98) var_readRec1 -> COMMA var . var_readRec1
    (98) var_readRec1 -> . COMMA var var_readRec1
    (99) var_readRec1 -> . empty
    (126) empty -> .

    COMMA           shift and go to state 162
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    var_readRec1                   shift and go to state 224
    empty                          shift and go to state 163

state 198

    (100) write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .

    IF              reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    CALL            reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 100 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)


state 199

    (101) write_rec -> all_logical pn_write_quad write_rec1 .

    RIGHT_PARENTHESIS reduce using rule 101 (write_rec -> all_logical pn_write_quad write_rec1 .)


state 200

    (102) write_rec1 -> MORE . all_logical pn_write_quad write_rec1
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 225
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 201

    (103) write_rec1 -> empty .

    RIGHT_PARENTHESIS reduce using rule 103 (write_rec1 -> empty .)


state 202

    (105) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter . pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (73) pn_open_parenthesis -> . empty
    (126) empty -> .

    CONST_BOOL      reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_open_parenthesis            shift and go to state 226
    empty                          shift and go to state 143

state 203

    (107) pn_param_counter -> empty .

    CONST_BOOL      reduce using rule 107 (pn_param_counter -> empty .)
    CONST_STRING    reduce using rule 107 (pn_param_counter -> empty .)
    LEFT_PARENTHESIS reduce using rule 107 (pn_param_counter -> empty .)
    CONST_INT       reduce using rule 107 (pn_param_counter -> empty .)
    MINUS           reduce using rule 107 (pn_param_counter -> empty .)
    CONST_FLOAT     reduce using rule 107 (pn_param_counter -> empty .)
    ID              reduce using rule 107 (pn_param_counter -> empty .)
    CALL            reduce using rule 107 (pn_param_counter -> empty .)
    RIGHT_PARENTHESIS reduce using rule 107 (pn_param_counter -> empty .)


state 204

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical . pn_array_access3 RIGHT_BRACKET pn_access_return
    (19) pn_array_access3 -> . empty
    (126) empty -> .

    RIGHT_BRACKET   reduce using rule 126 (empty -> .)

    pn_array_access3               shift and go to state 227
    empty                          shift and go to state 228

state 205

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 . SEMICOLON

    SEMICOLON       shift and go to state 229


state 206

    (23) list1 -> empty .

    SEMICOLON       reduce using rule 23 (list1 -> empty .)


state 207

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad . bloque_rec func_return RIGHT_CURLYB pn_end_func
    (124) bloque_rec -> . bloque bloque_rec
    (125) bloque_rec -> . empty
    (30) bloque -> . asignacion
    (31) bloque -> . condicional
    (32) bloque -> . while
    (33) bloque -> . read
    (34) bloque -> . write
    (35) bloque -> . func_call SEMICOLON
    (126) empty -> .
    (36) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
    (100) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RETURN          reduce using rule 126 (empty -> .)
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    CALL            shift and go to state 88
    ID              shift and go to state 89

    bloque_rec                     shift and go to state 230
    bloque                         shift and go to state 75
    empty                          shift and go to state 76
    asignacion                     shift and go to state 77
    condicional                    shift and go to state 78
    while                          shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    func_call                      shift and go to state 82
    var                            shift and go to state 83

state 208

    (117) pn_func_quad -> empty .

    IF              reduce using rule 117 (pn_func_quad -> empty .)
    WHILE           reduce using rule 117 (pn_func_quad -> empty .)
    READ            reduce using rule 117 (pn_func_quad -> empty .)
    WRITE           reduce using rule 117 (pn_func_quad -> empty .)
    CALL            reduce using rule 117 (pn_func_quad -> empty .)
    ID              reduce using rule 117 (pn_func_quad -> empty .)
    RETURN          reduce using rule 117 (pn_func_quad -> empty .)


state 209

    (66) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS . pn_close_parenthesis
    (74) pn_close_parenthesis -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_close_parenthesis           shift and go to state 231
    empty                          shift and go to state 232

state 210

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB . bloque_rec RIGHT_CURLYB condicional_else
    (124) bloque_rec -> . bloque bloque_rec
    (125) bloque_rec -> . empty
    (30) bloque -> . asignacion
    (31) bloque -> . condicional
    (32) bloque -> . while
    (33) bloque -> . read
    (34) bloque -> . write
    (35) bloque -> . func_call SEMICOLON
    (126) empty -> .
    (36) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
    (100) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    CALL            shift and go to state 88
    ID              shift and go to state 89

    bloque_rec                     shift and go to state 233
    bloque                         shift and go to state 75
    empty                          shift and go to state 76
    asignacion                     shift and go to state 77
    condicional                    shift and go to state 78
    while                          shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    func_call                      shift and go to state 82
    var                            shift and go to state 83

state 211

    (40) all_logical_rec -> AND pn_operator . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    logical_exp                    shift and go to state 234
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 212

    (38) pn_operator -> empty .

    CONST_BOOL      reduce using rule 38 (pn_operator -> empty .)
    CONST_STRING    reduce using rule 38 (pn_operator -> empty .)
    LEFT_PARENTHESIS reduce using rule 38 (pn_operator -> empty .)
    CONST_INT       reduce using rule 38 (pn_operator -> empty .)
    MINUS           reduce using rule 38 (pn_operator -> empty .)
    CONST_FLOAT     reduce using rule 38 (pn_operator -> empty .)
    ID              reduce using rule 38 (pn_operator -> empty .)
    CALL            reduce using rule 38 (pn_operator -> empty .)


state 213

    (41) all_logical_rec -> OR pn_operator . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    logical_exp                    shift and go to state 235
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 214

    (45) logical_exp_rec -> GREATER_THAN pn_operator . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    exp                            shift and go to state 236
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 215

    (46) logical_exp_rec -> LESS_THAN pn_operator . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    exp                            shift and go to state 237
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 216

    (47) logical_exp_rec -> EQUAL_COMPARE pn_operator . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    exp                            shift and go to state 238
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 217

    (48) logical_exp_rec -> NOT_EQUAL pn_operator . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    exp                            shift and go to state 239
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 218

    (53) exp_rec -> PLUS pn_operator . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    termino                        shift and go to state 240
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 219

    (54) exp_rec -> MINUS pn_operator . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    termino                        shift and go to state 241
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 220

    (57) termino_rec -> MULTIPLICATION pn_operator . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    factor                         shift and go to state 242
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 221

    (58) termino_rec -> DIVISION pn_operator . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    factor                         shift and go to state 243
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 222

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump . while_loop
    (92) while_loop -> . LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1

    LEFT_CURLYB     shift and go to state 245

    while_loop                     shift and go to state 244

state 223

    (94) pn_while_jump -> empty .

    LEFT_CURLYB     reduce using rule 94 (pn_while_jump -> empty .)


state 224

    (98) var_readRec1 -> COMMA var var_readRec1 .

    RIGHT_PARENTHESIS reduce using rule 98 (var_readRec1 -> COMMA var var_readRec1 .)


state 225

    (102) write_rec1 -> MORE all_logical . pn_write_quad write_rec1
    (104) pn_write_quad -> . empty
    (126) empty -> .

    MORE            reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_write_quad                  shift and go to state 246
    empty                          shift and go to state 166

state 226

    (105) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis . func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (108) func_call_rec -> . func_call_rec1
    (109) func_call_rec -> . empty
    (110) func_call_rec1 -> . all_logical pn_param_match func_call_rec2
    (126) empty -> .
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    func_call_rec                  shift and go to state 247
    func_call_rec1                 shift and go to state 248
    empty                          shift and go to state 249
    all_logical                    shift and go to state 250
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 227

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 . RIGHT_BRACKET pn_access_return

    RIGHT_BRACKET   shift and go to state 251


state 228

    (19) pn_array_access3 -> empty .

    RIGHT_BRACKET   reduce using rule 19 (pn_array_access3 -> empty .)


state 229

    (22) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .

    VAR             reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    LIST            reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    FUNC            reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    MAIN            reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    IF              reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    WHILE           reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    READ            reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    WRITE           reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    CALL            reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    ID              reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)
    RETURN          reduce using rule 22 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON .)


state 230

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec . func_return RIGHT_CURLYB pn_end_func
    (122) func_return -> . RETURN all_logical SEMICOLON
    (123) func_return -> . RETURN SEMICOLON

    RETURN          shift and go to state 253

    func_return                    shift and go to state 252

state 231

    (66) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .

    MULTIPLICATION  reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    DIVISION        reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    PLUS            reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    MINUS           reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    GREATER_THAN    reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    LESS_THAN       reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    EQUAL_COMPARE   reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    NOT_EQUAL       reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    AND             reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    OR              reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    RIGHT_PARENTHESIS reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    MORE            reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    SEMICOLON       reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    RIGHT_BRACKET   reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    COMMA           reduce using rule 66 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)


state 232

    (74) pn_close_parenthesis -> empty .

    MULTIPLICATION  reduce using rule 74 (pn_close_parenthesis -> empty .)
    DIVISION        reduce using rule 74 (pn_close_parenthesis -> empty .)
    PLUS            reduce using rule 74 (pn_close_parenthesis -> empty .)
    MINUS           reduce using rule 74 (pn_close_parenthesis -> empty .)
    GREATER_THAN    reduce using rule 74 (pn_close_parenthesis -> empty .)
    LESS_THAN       reduce using rule 74 (pn_close_parenthesis -> empty .)
    EQUAL_COMPARE   reduce using rule 74 (pn_close_parenthesis -> empty .)
    NOT_EQUAL       reduce using rule 74 (pn_close_parenthesis -> empty .)
    AND             reduce using rule 74 (pn_close_parenthesis -> empty .)
    OR              reduce using rule 74 (pn_close_parenthesis -> empty .)
    RIGHT_PARENTHESIS reduce using rule 74 (pn_close_parenthesis -> empty .)
    MORE            reduce using rule 74 (pn_close_parenthesis -> empty .)
    SEMICOLON       reduce using rule 74 (pn_close_parenthesis -> empty .)
    RIGHT_BRACKET   reduce using rule 74 (pn_close_parenthesis -> empty .)
    COMMA           reduce using rule 74 (pn_close_parenthesis -> empty .)


state 233

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec . RIGHT_CURLYB condicional_else

    RIGHT_CURLYB    shift and go to state 254


state 234

    (40) all_logical_rec -> AND pn_operator logical_exp . pn_all_logical all_logical_rec
    (43) pn_all_logical -> . empty
    (126) empty -> .

    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_all_logical                 shift and go to state 255
    empty                          shift and go to state 146

state 235

    (41) all_logical_rec -> OR pn_operator logical_exp . pn_all_logical all_logical_rec
    (43) pn_all_logical -> . empty
    (126) empty -> .

    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_all_logical                 shift and go to state 256
    empty                          shift and go to state 146

state 236

    (45) logical_exp_rec -> GREATER_THAN pn_operator exp . pn_logical_exp logical_exp_rec
    (50) pn_logical_exp -> . empty
    (126) empty -> .

    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_logical_exp                 shift and go to state 257
    empty                          shift and go to state 148

state 237

    (46) logical_exp_rec -> LESS_THAN pn_operator exp . pn_logical_exp logical_exp_rec
    (50) pn_logical_exp -> . empty
    (126) empty -> .

    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_logical_exp                 shift and go to state 258
    empty                          shift and go to state 148

state 238

    (47) logical_exp_rec -> EQUAL_COMPARE pn_operator exp . pn_logical_exp logical_exp_rec
    (50) pn_logical_exp -> . empty
    (126) empty -> .

    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_logical_exp                 shift and go to state 259
    empty                          shift and go to state 148

state 239

    (48) logical_exp_rec -> NOT_EQUAL pn_operator exp . pn_logical_exp logical_exp_rec
    (50) pn_logical_exp -> . empty
    (126) empty -> .

    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_logical_exp                 shift and go to state 260
    empty                          shift and go to state 148

state 240

    (53) exp_rec -> PLUS pn_operator termino . pn_exp exp_rec
    (52) pn_exp -> . empty
    (126) empty -> .

    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_exp                         shift and go to state 261
    empty                          shift and go to state 150

state 241

    (54) exp_rec -> MINUS pn_operator termino . pn_exp exp_rec
    (52) pn_exp -> . empty
    (126) empty -> .

    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_exp                         shift and go to state 262
    empty                          shift and go to state 150

state 242

    (57) termino_rec -> MULTIPLICATION pn_operator factor . pn_termino termino_rec
    (60) pn_termino -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_termino                     shift and go to state 263
    empty                          shift and go to state 152

state 243

    (58) termino_rec -> DIVISION pn_operator factor . pn_termino termino_rec
    (60) pn_termino -> . empty
    (126) empty -> .

    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    pn_termino                     shift and go to state 264
    empty                          shift and go to state 152

state 244

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .

    IF              reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    WHILE           reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    READ            reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    WRITE           reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    CALL            reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    ID              reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    RIGHT_CURLYB    reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    RETURN          reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)


state 245

    (92) while_loop -> LEFT_CURLYB . bloque_rec RIGHT_CURLYB pn_while_jump1
    (124) bloque_rec -> . bloque bloque_rec
    (125) bloque_rec -> . empty
    (30) bloque -> . asignacion
    (31) bloque -> . condicional
    (32) bloque -> . while
    (33) bloque -> . read
    (34) bloque -> . write
    (35) bloque -> . func_call SEMICOLON
    (126) empty -> .
    (36) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
    (100) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    CALL            shift and go to state 88
    ID              shift and go to state 89

    bloque_rec                     shift and go to state 265
    bloque                         shift and go to state 75
    empty                          shift and go to state 76
    asignacion                     shift and go to state 77
    condicional                    shift and go to state 78
    while                          shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    func_call                      shift and go to state 82
    var                            shift and go to state 83

state 246

    (102) write_rec1 -> MORE all_logical pn_write_quad . write_rec1
    (102) write_rec1 -> . MORE all_logical pn_write_quad write_rec1
    (103) write_rec1 -> . empty
    (126) empty -> .

    MORE            shift and go to state 200
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    write_rec1                     shift and go to state 266
    empty                          shift and go to state 201

state 247

    (105) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec . pn_close_parenthesis RIGHT_PARENTHESIS
    (74) pn_close_parenthesis -> . empty
    (126) empty -> .

    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_close_parenthesis           shift and go to state 267
    empty                          shift and go to state 232

state 248

    (108) func_call_rec -> func_call_rec1 .

    RIGHT_PARENTHESIS reduce using rule 108 (func_call_rec -> func_call_rec1 .)


state 249

    (109) func_call_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 109 (func_call_rec -> empty .)


state 250

    (110) func_call_rec1 -> all_logical . pn_param_match func_call_rec2
    (113) pn_param_match -> . empty
    (126) empty -> .

    COMMA           reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_param_match                 shift and go to state 268
    empty                          shift and go to state 269

state 251

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET . pn_access_return
    (20) pn_access_return -> . empty
    (126) empty -> .

    EQUAL_ASSIGN    reduce using rule 126 (empty -> .)
    MULTIPLICATION  reduce using rule 126 (empty -> .)
    DIVISION        reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)

    pn_access_return               shift and go to state 270
    empty                          shift and go to state 271

state 252

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return . RIGHT_CURLYB pn_end_func

    RIGHT_CURLYB    shift and go to state 272


state 253

    (122) func_return -> RETURN . all_logical SEMICOLON
    (123) func_return -> RETURN . SEMICOLON
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 274
    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 273
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 254

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB . condicional_else
    (86) condicional_else -> . ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
    (87) condicional_else -> . pn_condicional_final
    (90) pn_condicional_final -> . empty
    (126) empty -> .

    ELSE            shift and go to state 276
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    condicional_else               shift and go to state 275
    pn_condicional_final           shift and go to state 277
    empty                          shift and go to state 278

state 255

    (40) all_logical_rec -> AND pn_operator logical_exp pn_all_logical . all_logical_rec
    (40) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (41) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (42) all_logical_rec -> . empty
    (126) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 178
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    all_logical_rec                shift and go to state 279
    empty                          shift and go to state 179

state 256

    (41) all_logical_rec -> OR pn_operator logical_exp pn_all_logical . all_logical_rec
    (40) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (41) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (42) all_logical_rec -> . empty
    (126) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 178
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    all_logical_rec                shift and go to state 280
    empty                          shift and go to state 179

state 257

    (45) logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp . logical_exp_rec
    (45) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (48) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (49) logical_exp_rec -> . empty
    (126) empty -> .

    GREATER_THAN    shift and go to state 181
    LESS_THAN       shift and go to state 182
    EQUAL_COMPARE   shift and go to state 183
    NOT_EQUAL       shift and go to state 184
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    logical_exp_rec                shift and go to state 281
    empty                          shift and go to state 185

state 258

    (46) logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp . logical_exp_rec
    (45) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (48) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (49) logical_exp_rec -> . empty
    (126) empty -> .

    GREATER_THAN    shift and go to state 181
    LESS_THAN       shift and go to state 182
    EQUAL_COMPARE   shift and go to state 183
    NOT_EQUAL       shift and go to state 184
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    logical_exp_rec                shift and go to state 282
    empty                          shift and go to state 185

state 259

    (47) logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp . logical_exp_rec
    (45) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (48) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (49) logical_exp_rec -> . empty
    (126) empty -> .

    GREATER_THAN    shift and go to state 181
    LESS_THAN       shift and go to state 182
    EQUAL_COMPARE   shift and go to state 183
    NOT_EQUAL       shift and go to state 184
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    logical_exp_rec                shift and go to state 283
    empty                          shift and go to state 185

state 260

    (48) logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp . logical_exp_rec
    (45) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (48) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (49) logical_exp_rec -> . empty
    (126) empty -> .

    GREATER_THAN    shift and go to state 181
    LESS_THAN       shift and go to state 182
    EQUAL_COMPARE   shift and go to state 183
    NOT_EQUAL       shift and go to state 184
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    logical_exp_rec                shift and go to state 284
    empty                          shift and go to state 185

state 261

    (53) exp_rec -> PLUS pn_operator termino pn_exp . exp_rec
    (53) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (54) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (55) exp_rec -> . empty
    (126) empty -> .

    PLUS            shift and go to state 187
    MINUS           shift and go to state 188
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    exp_rec                        shift and go to state 285
    empty                          shift and go to state 189

state 262

    (54) exp_rec -> MINUS pn_operator termino pn_exp . exp_rec
    (53) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (54) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (55) exp_rec -> . empty
    (126) empty -> .

    PLUS            shift and go to state 187
    MINUS           shift and go to state 188
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    exp_rec                        shift and go to state 286
    empty                          shift and go to state 189

state 263

    (57) termino_rec -> MULTIPLICATION pn_operator factor pn_termino . termino_rec
    (57) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (58) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (59) termino_rec -> . empty
    (126) empty -> .

    MULTIPLICATION  shift and go to state 191
    DIVISION        shift and go to state 192
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    termino_rec                    shift and go to state 287
    empty                          shift and go to state 193

state 264

    (58) termino_rec -> DIVISION pn_operator factor pn_termino . termino_rec
    (57) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (58) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (59) termino_rec -> . empty
    (126) empty -> .

    MULTIPLICATION  shift and go to state 191
    DIVISION        shift and go to state 192
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    EQUAL_COMPARE   reduce using rule 126 (empty -> .)
    NOT_EQUAL       reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)
    MORE            reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RIGHT_BRACKET   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    termino_rec                    shift and go to state 288
    empty                          shift and go to state 193

state 265

    (92) while_loop -> LEFT_CURLYB bloque_rec . RIGHT_CURLYB pn_while_jump1

    RIGHT_CURLYB    shift and go to state 289


state 266

    (102) write_rec1 -> MORE all_logical pn_write_quad write_rec1 .

    RIGHT_PARENTHESIS reduce using rule 102 (write_rec1 -> MORE all_logical pn_write_quad write_rec1 .)


state 267

    (105) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 290


state 268

    (110) func_call_rec1 -> all_logical pn_param_match . func_call_rec2
    (111) func_call_rec2 -> . COMMA all_logical pn_param_match func_call_rec2
    (112) func_call_rec2 -> . empty
    (126) empty -> .

    COMMA           shift and go to state 292
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    func_call_rec2                 shift and go to state 291
    empty                          shift and go to state 293

state 269

    (113) pn_param_match -> empty .

    COMMA           reduce using rule 113 (pn_param_match -> empty .)
    RIGHT_PARENTHESIS reduce using rule 113 (pn_param_match -> empty .)


state 270

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .

    EQUAL_ASSIGN    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    MULTIPLICATION  reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    DIVISION        reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    PLUS            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    MINUS           reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    GREATER_THAN    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    LESS_THAN       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    EQUAL_COMPARE   reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    NOT_EQUAL       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    AND             reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    OR              reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    RIGHT_PARENTHESIS reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    COMMA           reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    MORE            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    SEMICOLON       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)
    RIGHT_BRACKET   reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return .)


state 271

    (20) pn_access_return -> empty .

    EQUAL_ASSIGN    reduce using rule 20 (pn_access_return -> empty .)
    MULTIPLICATION  reduce using rule 20 (pn_access_return -> empty .)
    DIVISION        reduce using rule 20 (pn_access_return -> empty .)
    PLUS            reduce using rule 20 (pn_access_return -> empty .)
    MINUS           reduce using rule 20 (pn_access_return -> empty .)
    GREATER_THAN    reduce using rule 20 (pn_access_return -> empty .)
    LESS_THAN       reduce using rule 20 (pn_access_return -> empty .)
    EQUAL_COMPARE   reduce using rule 20 (pn_access_return -> empty .)
    NOT_EQUAL       reduce using rule 20 (pn_access_return -> empty .)
    AND             reduce using rule 20 (pn_access_return -> empty .)
    OR              reduce using rule 20 (pn_access_return -> empty .)
    RIGHT_PARENTHESIS reduce using rule 20 (pn_access_return -> empty .)
    COMMA           reduce using rule 20 (pn_access_return -> empty .)
    MORE            reduce using rule 20 (pn_access_return -> empty .)
    SEMICOLON       reduce using rule 20 (pn_access_return -> empty .)
    RIGHT_BRACKET   reduce using rule 20 (pn_access_return -> empty .)


state 272

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB . pn_end_func
    (119) pn_end_func -> . empty
    (126) empty -> .

    VAR             reduce using rule 126 (empty -> .)
    LIST            reduce using rule 126 (empty -> .)
    FUNC            reduce using rule 126 (empty -> .)
    MAIN            reduce using rule 126 (empty -> .)

    pn_end_func                    shift and go to state 294
    empty                          shift and go to state 295

state 273

    (122) func_return -> RETURN all_logical . SEMICOLON

    SEMICOLON       shift and go to state 296


state 274

    (123) func_return -> RETURN SEMICOLON .

    RIGHT_CURLYB    reduce using rule 123 (func_return -> RETURN SEMICOLON .)


state 275

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .

    IF              reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    WHILE           reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    READ            reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    WRITE           reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    CALL            reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    ID              reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    RIGHT_CURLYB    reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    RETURN          reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)


state 276

    (86) condicional_else -> ELSE . pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
    (89) pn_condicional_else -> . empty
    (126) empty -> .

    LEFT_CURLYB     reduce using rule 126 (empty -> .)

    pn_condicional_else            shift and go to state 297
    empty                          shift and go to state 298

state 277

    (87) condicional_else -> pn_condicional_final .

    IF              reduce using rule 87 (condicional_else -> pn_condicional_final .)
    WHILE           reduce using rule 87 (condicional_else -> pn_condicional_final .)
    READ            reduce using rule 87 (condicional_else -> pn_condicional_final .)
    WRITE           reduce using rule 87 (condicional_else -> pn_condicional_final .)
    CALL            reduce using rule 87 (condicional_else -> pn_condicional_final .)
    ID              reduce using rule 87 (condicional_else -> pn_condicional_final .)
    RIGHT_CURLYB    reduce using rule 87 (condicional_else -> pn_condicional_final .)
    RETURN          reduce using rule 87 (condicional_else -> pn_condicional_final .)


state 278

    (90) pn_condicional_final -> empty .

    IF              reduce using rule 90 (pn_condicional_final -> empty .)
    WHILE           reduce using rule 90 (pn_condicional_final -> empty .)
    READ            reduce using rule 90 (pn_condicional_final -> empty .)
    WRITE           reduce using rule 90 (pn_condicional_final -> empty .)
    CALL            reduce using rule 90 (pn_condicional_final -> empty .)
    ID              reduce using rule 90 (pn_condicional_final -> empty .)
    RIGHT_CURLYB    reduce using rule 90 (pn_condicional_final -> empty .)
    RETURN          reduce using rule 90 (pn_condicional_final -> empty .)


state 279

    (40) all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 40 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 40 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 40 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 40 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 40 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)


state 280

    (41) all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 41 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 41 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 41 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 41 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 41 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)


state 281

    (45) logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 45 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)


state 282

    (46) logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 46 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)


state 283

    (47) logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 47 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)


state 284

    (48) logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 48 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)


state 285

    (53) exp_rec -> PLUS pn_operator termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    AND             reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    OR              reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    MORE            reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    COMMA           reduce using rule 53 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)


state 286

    (54) exp_rec -> MINUS pn_operator termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    AND             reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    OR              reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    MORE            reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    COMMA           reduce using rule 54 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)


state 287

    (57) termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .

    PLUS            reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    MINUS           reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    AND             reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    OR              reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    MORE            reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    COMMA           reduce using rule 57 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)


state 288

    (58) termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .

    PLUS            reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    MINUS           reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    AND             reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    OR              reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    MORE            reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    COMMA           reduce using rule 58 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)


state 289

    (92) while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB . pn_while_jump1
    (95) pn_while_jump1 -> . empty
    (126) empty -> .

    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    pn_while_jump1                 shift and go to state 299
    empty                          shift and go to state 300

state 290

    (105) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MULTIPLICATION  reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    DIVISION        reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    EQUAL_COMPARE   reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    AND             reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    OR              reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MORE            reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 105 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)


state 291

    (110) func_call_rec1 -> all_logical pn_param_match func_call_rec2 .

    RIGHT_PARENTHESIS reduce using rule 110 (func_call_rec1 -> all_logical pn_param_match func_call_rec2 .)


state 292

    (111) func_call_rec2 -> COMMA . all_logical pn_param_match func_call_rec2
    (39) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (44) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (51) exp -> . termino pn_exp exp_rec
    (56) termino -> . factor pn_termino termino_rec
    (61) factor -> . cte_int pn_add_constant
    (62) factor -> . cte_float pn_add_constant
    (63) factor -> . CONST_BOOL pn_add_constant
    (64) factor -> . CONST_STRING empty empty
    (65) factor -> . var
    (66) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (67) factor -> . func_call
    (68) cte_int -> . CONST_INT
    (69) cte_int -> . MINUS CONST_INT
    (70) cte_float -> . CONST_FLOAT
    (71) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    CONST_BOOL      shift and go to state 123
    CONST_STRING    shift and go to state 124
    LEFT_PARENTHESIS shift and go to state 115
    CONST_INT       shift and go to state 67
    MINUS           shift and go to state 127
    CONST_FLOAT     shift and go to state 128
    ID              shift and go to state 89
    CALL            shift and go to state 88

    all_logical                    shift and go to state 301
    logical_exp                    shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    cte_int                        shift and go to state 121
    cte_float                      shift and go to state 122
    var                            shift and go to state 125
    func_call                      shift and go to state 126

state 293

    (112) func_call_rec2 -> empty .

    RIGHT_PARENTHESIS reduce using rule 112 (func_call_rec2 -> empty .)


state 294

    (114) func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .

    VAR             reduce using rule 114 (func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    LIST            reduce using rule 114 (func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    FUNC            reduce using rule 114 (func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    MAIN            reduce using rule 114 (func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)


state 295

    (119) pn_end_func -> empty .

    VAR             reduce using rule 119 (pn_end_func -> empty .)
    LIST            reduce using rule 119 (pn_end_func -> empty .)
    FUNC            reduce using rule 119 (pn_end_func -> empty .)
    MAIN            reduce using rule 119 (pn_end_func -> empty .)


state 296

    (122) func_return -> RETURN all_logical SEMICOLON .

    RIGHT_CURLYB    reduce using rule 122 (func_return -> RETURN all_logical SEMICOLON .)


state 297

    (86) condicional_else -> ELSE pn_condicional_else . LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final

    LEFT_CURLYB     shift and go to state 302


state 298

    (89) pn_condicional_else -> empty .

    LEFT_CURLYB     reduce using rule 89 (pn_condicional_else -> empty .)


state 299

    (92) while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .

    IF              reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    WHILE           reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    READ            reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    WRITE           reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    CALL            reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    ID              reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    RIGHT_CURLYB    reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    RETURN          reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)


state 300

    (95) pn_while_jump1 -> empty .

    IF              reduce using rule 95 (pn_while_jump1 -> empty .)
    WHILE           reduce using rule 95 (pn_while_jump1 -> empty .)
    READ            reduce using rule 95 (pn_while_jump1 -> empty .)
    WRITE           reduce using rule 95 (pn_while_jump1 -> empty .)
    CALL            reduce using rule 95 (pn_while_jump1 -> empty .)
    ID              reduce using rule 95 (pn_while_jump1 -> empty .)
    RIGHT_CURLYB    reduce using rule 95 (pn_while_jump1 -> empty .)
    RETURN          reduce using rule 95 (pn_while_jump1 -> empty .)


state 301

    (111) func_call_rec2 -> COMMA all_logical . pn_param_match func_call_rec2
    (113) pn_param_match -> . empty
    (126) empty -> .

    COMMA           reduce using rule 126 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    pn_param_match                 shift and go to state 303
    empty                          shift and go to state 269

state 302

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB . bloque_rec RIGHT_CURLYB pn_condicional_final
    (124) bloque_rec -> . bloque bloque_rec
    (125) bloque_rec -> . empty
    (30) bloque -> . asignacion
    (31) bloque -> . condicional
    (32) bloque -> . while
    (33) bloque -> . read
    (34) bloque -> . write
    (35) bloque -> . func_call SEMICOLON
    (126) empty -> .
    (36) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON
    (100) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (105) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    CALL            shift and go to state 88
    ID              shift and go to state 89

    bloque_rec                     shift and go to state 304
    bloque                         shift and go to state 75
    empty                          shift and go to state 76
    asignacion                     shift and go to state 77
    condicional                    shift and go to state 78
    while                          shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    func_call                      shift and go to state 82
    var                            shift and go to state 83

state 303

    (111) func_call_rec2 -> COMMA all_logical pn_param_match . func_call_rec2
    (111) func_call_rec2 -> . COMMA all_logical pn_param_match func_call_rec2
    (112) func_call_rec2 -> . empty
    (126) empty -> .

    COMMA           shift and go to state 292
    RIGHT_PARENTHESIS reduce using rule 126 (empty -> .)

    func_call_rec2                 shift and go to state 305
    empty                          shift and go to state 293

state 304

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec . RIGHT_CURLYB pn_condicional_final

    RIGHT_CURLYB    shift and go to state 306


state 305

    (111) func_call_rec2 -> COMMA all_logical pn_param_match func_call_rec2 .

    RIGHT_PARENTHESIS reduce using rule 111 (func_call_rec2 -> COMMA all_logical pn_param_match func_call_rec2 .)


state 306

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB . pn_condicional_final
    (90) pn_condicional_final -> . empty
    (126) empty -> .

    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    CALL            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    RIGHT_CURLYB    reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    pn_condicional_final           shift and go to state 307
    empty                          shift and go to state 278

state 307

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .

    IF              reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    WHILE           reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    READ            reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    WRITE           reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    CALL            reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    ID              reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    RIGHT_CURLYB    reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    RETURN          reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 8 resolved as shift
WARNING: shift/reduce conflict for LIST in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 8 resolved as shift
WARNING: shift/reduce conflict for VAR in state 11 resolved as shift
WARNING: shift/reduce conflict for LIST in state 11 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 11 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (init_dec -> empty)
WARNING: rejected rule (class_dec -> empty) in state 10
