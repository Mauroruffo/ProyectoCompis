Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTRIBUTES
    CHAR
    CLASS
    COLON
    CONST_CHAR
    DEF
    DO
    ELSEIF
    GREATER_EQUAL
    LESS_EQUAL
    METHODS
    MOREBOOL
    NEGATION
    NUMBER
    PERIOD

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main
Rule 2     main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
Rule 3     vars_rec -> var_dec vars_rec
Rule 4     vars_rec -> empty
Rule 5     pn_internal_scope -> empty
Rule 6     pn_start_program -> empty
Rule 7     pn_start_func -> empty
Rule 8     init_dec -> empty
Rule 9     init_dec -> dec init_dec
Rule 10    dec -> var_dec
Rule 11    dec -> func_dec
Rule 12    dec -> class_dec
Rule 13    class_dec -> empty
Rule 14    var -> ID varArray
Rule 15    varArray -> empty
Rule 16    varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET
Rule 17    pn_array_access1 -> empty
Rule 18    pn_array_access2 -> empty
Rule 19    pn_array_access3 -> empty
Rule 20    var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
Rule 21    pn_var_type -> empty
Rule 22    pn_value_type -> empty
Rule 23    pn_current_name -> empty
Rule 24    pn_add_variable -> empty
Rule 25    bloque -> asignacion
Rule 26    bloque -> condicional
Rule 27    bloque -> while
Rule 28    bloque -> read
Rule 29    bloque -> write
Rule 30    bloque -> func_call SEMICOLON
Rule 31    asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
Rule 32    pn_var_assign -> empty
Rule 33    pn_operator -> empty
Rule 34    all_logical -> logical_exp pn_all_logical all_logical_rec
Rule 35    all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec
Rule 36    all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec
Rule 37    all_logical_rec -> empty
Rule 38    pn_all_logical -> empty
Rule 39    logical_exp -> exp pn_logical_exp logical_exp_rec
Rule 40    logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
Rule 41    logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
Rule 42    logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
Rule 43    logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
Rule 44    logical_exp_rec -> empty
Rule 45    pn_logical_exp -> empty
Rule 46    exp -> termino pn_exp exp_rec
Rule 47    pn_exp -> empty
Rule 48    exp_rec -> PLUS pn_operator termino pn_exp exp_rec
Rule 49    exp_rec -> MINUS pn_operator termino pn_exp exp_rec
Rule 50    exp_rec -> empty
Rule 51    termino -> factor pn_termino termino_rec
Rule 52    termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec
Rule 53    termino_rec -> DIVISION pn_operator factor pn_termino termino_rec
Rule 54    termino_rec -> empty
Rule 55    pn_termino -> empty
Rule 56    factor -> varcte
Rule 57    factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
Rule 58    factor -> func_call
Rule 59    varcte -> cte_int pn_add_constant
Rule 60    varcte -> cte_float pn_add_constant
Rule 61    varcte -> CONST_BOOL pn_add_constant
Rule 62    varcte -> CONST_STRING empty empty
Rule 63    varcte -> var
Rule 64    cte_int -> CONST_INT
Rule 65    cte_int -> MINUS CONST_INT
Rule 66    cte_float -> CONST_FLOAT
Rule 67    cte_float -> MINUS CONST_FLOAT
Rule 68    pn_add_constant -> empty
Rule 69    pn_open_parenthesis -> empty
Rule 70    pn_close_parenthesis -> empty
Rule 71    tipo -> INT
Rule 72    tipo -> FLOAT
Rule 73    tipo -> BOOL
Rule 74    tipo -> STRING
Rule 75    return_module -> tipo
Rule 76    return_module -> VOID
Rule 77    parametro -> tipo ID parametro_rec
Rule 78    parametro -> empty
Rule 79    parametro_rec -> COMMA tipo ID parametro_rec
Rule 80    parametro_rec -> empty
Rule 81    pn_parametro_varTable -> empty
Rule 82    condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
Rule 83    condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
Rule 84    condicional_else -> pn_condicional_final
Rule 85    pn_condicional -> empty
Rule 86    pn_condicional_else -> empty
Rule 87    pn_condicional_final -> empty
Rule 88    while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
Rule 89    while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1
Rule 90    pn_while -> empty
Rule 91    pn_while_jump -> empty
Rule 92    pn_while_jump1 -> empty
Rule 93    read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
Rule 94    write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
Rule 95    write_rec -> all_logical pn_write_quad write_rec1
Rule 96    write_rec1 -> MORE all_logical pn_write_quad write_rec1
Rule 97    write_rec1 -> empty
Rule 98    pn_write_quad -> empty
Rule 99    func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
Rule 100   pn_verify_func -> empty
Rule 101   pn_param_counter -> empty
Rule 102   func_call_rec -> all_logical pn_param_match func_call_rec1
Rule 103   func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec
Rule 104   func_call_rec1 -> empty
Rule 105   pn_param_match -> empty
Rule 106   func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
Rule 107   pn_add_param_vartable -> empty
Rule 108   pn_gen_vartable -> empty
Rule 109   pn_func_quad -> empty
Rule 110   pn_end_main -> empty
Rule 111   pn_end_func -> empty
Rule 112   pn_add_func -> empty
Rule 113   pn_return_type -> empty
Rule 114   func_return -> RETURN all_logical SEMICOLON
Rule 115   func_return -> RETURN SEMICOLON
Rule 116   bloque_rec -> bloque bloque_rec
Rule 117   bloque_rec -> empty
Rule 118   empty -> <empty>

Terminals, with rules where they appear

AND                  : 35
ATTRIBUTES           : 
BOOL                 : 73
CALL                 : 99
CHAR                 : 
CLASS                : 
COLON                : 
COMMA                : 79 103
CONST_BOOL           : 61
CONST_CHAR           : 
CONST_FLOAT          : 66 67
CONST_INT            : 64 65
CONST_STRING         : 62
DEF                  : 
DIVISION             : 53
DO                   : 
ELSE                 : 83
ELSEIF               : 
EQUAL_ASSIGN         : 31
EQUAL_COMPARE        : 42
FLOAT                : 72
FUNC                 : 106
GREATER_EQUAL        : 
GREATER_THAN         : 40
ID                   : 1 14 20 77 79 99 106
IF                   : 82
INT                  : 71
LEFT_BRACKET         : 16
LEFT_CURLYB          : 2 82 83 89 106
LEFT_PARENTHESIS     : 2 57 82 88 93 94 99 106
LESS_EQUAL           : 
LESS_THAN            : 41
MAIN                 : 2
METHODS              : 
MINUS                : 49 65 67
MORE                 : 96
MOREBOOL             : 
MULTIPLICATION       : 52
NEGATION             : 
NOT_EQUAL            : 43
NUMBER               : 
OR                   : 36
PERIOD               : 
PLUS                 : 48
PROGRAM              : 1
READ                 : 93
RETURN               : 114 115
RIGHT_BRACKET        : 16
RIGHT_CURLYB         : 2 82 83 89 106
RIGHT_PARENTHESIS    : 2 57 82 88 93 94 99 106
SEMICOLON            : 1 20 30 31 93 94 114 115
STRING               : 74
VAR                  : 20
VOID                 : 76
WHILE                : 88
WRITE                : 94
error                : 

Nonterminals, with rules where they appear

all_logical          : 16 31 57 82 88 95 96 102 103 114
all_logical_rec      : 34 35 36
asignacion           : 25
bloque               : 116
bloque_rec           : 2 82 83 89 106 116
class_dec            : 12
condicional          : 26
condicional_else     : 82
cte_float            : 60
cte_int              : 59
dec                  : 9
empty                : 4 5 6 7 8 13 15 17 18 19 21 22 23 24 32 33 37 38 44 45 47 50 54 55 62 62 68 69 70 78 80 81 85 86 87 90 91 92 97 98 100 101 104 105 107 108 109 110 111 112 113 117
exp                  : 39 40 41 42 43
exp_rec              : 46 48 49
factor               : 51 52 53
func_call            : 30 58
func_call_rec        : 99 103
func_call_rec1       : 102
func_dec             : 11
func_return          : 106
init_dec             : 1 9
logical_exp          : 34 35 36
logical_exp_rec      : 39 40 41 42 43
main                 : 1
parametro            : 106
parametro_rec        : 77 79
pn_add_constant      : 59 60 61
pn_add_func          : 106
pn_add_param_vartable : 106
pn_add_variable      : 20
pn_all_logical       : 34 35 36
pn_array_access1     : 16
pn_array_access2     : 16
pn_array_access3     : 16
pn_close_parenthesis : 57 99
pn_condicional       : 82
pn_condicional_else  : 83
pn_condicional_final : 83 84
pn_current_name      : 20
pn_end_func          : 106
pn_end_main          : 2
pn_exp               : 46 48 49
pn_func_quad         : 106
pn_gen_vartable      : 2 106
pn_internal_scope    : 2
pn_logical_exp       : 39 40 41 42 43
pn_open_parenthesis  : 57 99
pn_operator          : 35 36 40 41 42 43 48 49 52 53
pn_param_counter     : 99
pn_param_match       : 102 103
pn_parametro_varTable : 
pn_return_type       : 106
pn_start_func        : 1 2
pn_start_program     : 1
pn_termino           : 51 52 53
pn_value_type        : 20
pn_var_assign        : 31
pn_var_type          : 20
pn_verify_func       : 99
pn_while             : 88
pn_while_jump        : 88
pn_while_jump1       : 89
pn_write_quad        : 95 96
program              : 0
read                 : 28
return_module        : 106
termino              : 46 48 49
termino_rec          : 51 52 53
tipo                 : 20 75 77 79
var                  : 31 63 93
varArray             : 14
var_dec              : 3 10
varcte               : 56
vars_rec             : 2 3
while                : 27
while_loop           : 88
write                : 29
write_rec            : 94
write_rec1           : 95 96

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . pn_start_program pn_start_func ID SEMICOLON init_dec main
    (6) pn_start_program -> . empty
    (118) empty -> .

    ID              reduce using rule 118 (empty -> .)

    pn_start_program               shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM pn_start_program . pn_start_func ID SEMICOLON init_dec main
    (7) pn_start_func -> . empty
    (118) empty -> .

    ID              reduce using rule 118 (empty -> .)

    pn_start_func                  shift and go to state 5
    empty                          shift and go to state 6

state 4

    (6) pn_start_program -> empty .

    ID              reduce using rule 6 (pn_start_program -> empty .)


state 5

    (1) program -> PROGRAM pn_start_program pn_start_func . ID SEMICOLON init_dec main

    ID              shift and go to state 7


state 6

    (7) pn_start_func -> empty .

    ID              reduce using rule 7 (pn_start_func -> empty .)
    IF              reduce using rule 7 (pn_start_func -> empty .)
    WHILE           reduce using rule 7 (pn_start_func -> empty .)
    READ            reduce using rule 7 (pn_start_func -> empty .)
    WRITE           reduce using rule 7 (pn_start_func -> empty .)
    CALL            reduce using rule 7 (pn_start_func -> empty .)
    RIGHT_CURLYB    reduce using rule 7 (pn_start_func -> empty .)


state 7

    (1) program -> PROGRAM pn_start_program pn_start_func ID . SEMICOLON init_dec main

    SEMICOLON       shift and go to state 8


state 8

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON . init_dec main
    (8) init_dec -> . empty
    (9) init_dec -> . dec init_dec
    (118) empty -> .
    (10) dec -> . var_dec
    (11) dec -> . func_dec
    (12) dec -> . class_dec
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (106) func_dec -> . FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (13) class_dec -> . empty

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    MAIN            reduce using rule 118 (empty -> .)
    VAR             shift and go to state 15
    FUNC            shift and go to state 16

  ! VAR             [ reduce using rule 118 (empty -> .) ]
  ! FUNC            [ reduce using rule 118 (empty -> .) ]

    init_dec                       shift and go to state 9
    empty                          shift and go to state 10
    dec                            shift and go to state 11
    var_dec                        shift and go to state 12
    func_dec                       shift and go to state 13
    class_dec                      shift and go to state 14

state 9

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec . main
    (2) main -> . MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 10

    (8) init_dec -> empty .
    (13) class_dec -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 8 (init_dec -> empty .)
    MAIN            reduce using rule 8 (init_dec -> empty .)
    VAR             reduce using rule 13 (class_dec -> empty .)
    FUNC            reduce using rule 13 (class_dec -> empty .)

  ! MAIN            [ reduce using rule 13 (class_dec -> empty .) ]


state 11

    (9) init_dec -> dec . init_dec
    (8) init_dec -> . empty
    (9) init_dec -> . dec init_dec
    (118) empty -> .
    (10) dec -> . var_dec
    (11) dec -> . func_dec
    (12) dec -> . class_dec
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (106) func_dec -> . FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (13) class_dec -> . empty

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    MAIN            reduce using rule 118 (empty -> .)
    VAR             shift and go to state 15
    FUNC            shift and go to state 16

  ! VAR             [ reduce using rule 118 (empty -> .) ]
  ! FUNC            [ reduce using rule 118 (empty -> .) ]

    dec                            shift and go to state 11
    init_dec                       shift and go to state 19
    empty                          shift and go to state 10
    var_dec                        shift and go to state 12
    func_dec                       shift and go to state 13
    class_dec                      shift and go to state 14

state 12

    (10) dec -> var_dec .

    VAR             reduce using rule 10 (dec -> var_dec .)
    FUNC            reduce using rule 10 (dec -> var_dec .)
    MAIN            reduce using rule 10 (dec -> var_dec .)


state 13

    (11) dec -> func_dec .

    VAR             reduce using rule 11 (dec -> func_dec .)
    FUNC            reduce using rule 11 (dec -> func_dec .)
    MAIN            reduce using rule 11 (dec -> func_dec .)


state 14

    (12) dec -> class_dec .

    VAR             reduce using rule 12 (dec -> class_dec .)
    FUNC            reduce using rule 12 (dec -> class_dec .)
    MAIN            reduce using rule 12 (dec -> class_dec .)


state 15

    (20) var_dec -> VAR . tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . STRING

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24

    tipo                           shift and go to state 20

state 16

    (106) func_dec -> FUNC . return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (75) return_module -> . tipo
    (76) return_module -> . VOID
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . STRING

    VOID            shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24

    return_module                  shift and go to state 25
    tipo                           shift and go to state 26

state 17

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main .

    $end            reduce using rule 1 (program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main .)


state 18

    (2) main -> MAIN . pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (5) pn_internal_scope -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_internal_scope              shift and go to state 28
    empty                          shift and go to state 29

state 19

    (9) init_dec -> dec init_dec .

    MAIN            reduce using rule 9 (init_dec -> dec init_dec .)


state 20

    (20) var_dec -> VAR tipo . pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (21) pn_var_type -> . empty
    (118) empty -> .

    ID              reduce using rule 118 (empty -> .)

    pn_var_type                    shift and go to state 30
    empty                          shift and go to state 31

state 21

    (71) tipo -> INT .

    ID              reduce using rule 71 (tipo -> INT .)


state 22

    (72) tipo -> FLOAT .

    ID              reduce using rule 72 (tipo -> FLOAT .)


state 23

    (73) tipo -> BOOL .

    ID              reduce using rule 73 (tipo -> BOOL .)


state 24

    (74) tipo -> STRING .

    ID              reduce using rule 74 (tipo -> STRING .)


state 25

    (106) func_dec -> FUNC return_module . pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (113) pn_return_type -> . empty
    (118) empty -> .

    ID              reduce using rule 118 (empty -> .)

    pn_return_type                 shift and go to state 32
    empty                          shift and go to state 33

state 26

    (75) return_module -> tipo .

    ID              reduce using rule 75 (return_module -> tipo .)


state 27

    (76) return_module -> VOID .

    ID              reduce using rule 76 (return_module -> VOID .)


state 28

    (2) main -> MAIN pn_internal_scope . LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    LEFT_PARENTHESIS shift and go to state 34


state 29

    (5) pn_internal_scope -> empty .

    LEFT_PARENTHESIS reduce using rule 5 (pn_internal_scope -> empty .)


state 30

    (20) var_dec -> VAR tipo pn_var_type . pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (22) pn_value_type -> . empty
    (118) empty -> .

    ID              reduce using rule 118 (empty -> .)

    pn_value_type                  shift and go to state 35
    empty                          shift and go to state 36

state 31

    (21) pn_var_type -> empty .

    ID              reduce using rule 21 (pn_var_type -> empty .)


state 32

    (106) func_dec -> FUNC return_module pn_return_type . ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    ID              shift and go to state 37


state 33

    (113) pn_return_type -> empty .

    ID              reduce using rule 113 (pn_return_type -> empty .)


state 34

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS . RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    RIGHT_PARENTHESIS shift and go to state 38


state 35

    (20) var_dec -> VAR tipo pn_var_type pn_value_type . ID pn_current_name SEMICOLON pn_add_variable

    ID              shift and go to state 39


state 36

    (22) pn_value_type -> empty .

    ID              reduce using rule 22 (pn_value_type -> empty .)


state 37

    (106) func_dec -> FUNC return_module pn_return_type ID . pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (112) pn_add_func -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_add_func                    shift and go to state 40
    empty                          shift and go to state 41

state 38

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS . LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    LEFT_CURLYB     shift and go to state 42


state 39

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID . pn_current_name SEMICOLON pn_add_variable
    (23) pn_current_name -> . empty
    (118) empty -> .

    SEMICOLON       reduce using rule 118 (empty -> .)

    pn_current_name                shift and go to state 43
    empty                          shift and go to state 44

state 40

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func . LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    LEFT_PARENTHESIS shift and go to state 45


state 41

    (112) pn_add_func -> empty .

    LEFT_PARENTHESIS reduce using rule 112 (pn_add_func -> empty .)


state 42

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB . vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (118) empty -> .

    VAR             shift and go to state 15
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)

    vars_rec                       shift and go to state 46
    var_dec                        shift and go to state 47
    empty                          shift and go to state 48

state 43

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name . SEMICOLON pn_add_variable

    SEMICOLON       shift and go to state 49


state 44

    (23) pn_current_name -> empty .

    SEMICOLON       reduce using rule 23 (pn_current_name -> empty .)


state 45

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS . parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (77) parametro -> . tipo ID parametro_rec
    (78) parametro -> . empty
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . STRING
    (118) empty -> .

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    parametro                      shift and go to state 50
    tipo                           shift and go to state 51
    empty                          shift and go to state 52

state 46

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec . pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (108) pn_gen_vartable -> . empty
    (118) empty -> .

    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)

    pn_gen_vartable                shift and go to state 53
    empty                          shift and go to state 54

state 47

    (3) vars_rec -> var_dec . vars_rec
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (118) empty -> .

    VAR             shift and go to state 15
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)

    var_dec                        shift and go to state 47
    vars_rec                       shift and go to state 55
    empty                          shift and go to state 48

state 48

    (4) vars_rec -> empty .

    IF              reduce using rule 4 (vars_rec -> empty .)
    WHILE           reduce using rule 4 (vars_rec -> empty .)
    READ            reduce using rule 4 (vars_rec -> empty .)
    WRITE           reduce using rule 4 (vars_rec -> empty .)
    CALL            reduce using rule 4 (vars_rec -> empty .)
    ID              reduce using rule 4 (vars_rec -> empty .)
    RIGHT_CURLYB    reduce using rule 4 (vars_rec -> empty .)


state 49

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON . pn_add_variable
    (24) pn_add_variable -> . empty
    (118) empty -> .

    VAR             reduce using rule 118 (empty -> .)
    FUNC            reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)

    pn_add_variable                shift and go to state 56
    empty                          shift and go to state 57

state 50

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro . pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (107) pn_add_param_vartable -> . empty
    (118) empty -> .

    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_add_param_vartable          shift and go to state 58
    empty                          shift and go to state 59

state 51

    (77) parametro -> tipo . ID parametro_rec

    ID              shift and go to state 60


state 52

    (78) parametro -> empty .

    RIGHT_PARENTHESIS reduce using rule 78 (parametro -> empty .)


state 53

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable . pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (7) pn_start_func -> . empty
    (118) empty -> .

    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)

    pn_start_func                  shift and go to state 61
    empty                          shift and go to state 6

state 54

    (108) pn_gen_vartable -> empty .

    IF              reduce using rule 108 (pn_gen_vartable -> empty .)
    WHILE           reduce using rule 108 (pn_gen_vartable -> empty .)
    READ            reduce using rule 108 (pn_gen_vartable -> empty .)
    WRITE           reduce using rule 108 (pn_gen_vartable -> empty .)
    CALL            reduce using rule 108 (pn_gen_vartable -> empty .)
    ID              reduce using rule 108 (pn_gen_vartable -> empty .)
    RIGHT_CURLYB    reduce using rule 108 (pn_gen_vartable -> empty .)
    RETURN          reduce using rule 108 (pn_gen_vartable -> empty .)


state 55

    (3) vars_rec -> var_dec vars_rec .

    IF              reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    WHILE           reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    READ            reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    WRITE           reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    CALL            reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    ID              reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    RIGHT_CURLYB    reduce using rule 3 (vars_rec -> var_dec vars_rec .)


state 56

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .

    VAR             reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    FUNC            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    MAIN            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    IF              reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    WHILE           reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    READ            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    WRITE           reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    CALL            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    ID              reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    RIGHT_CURLYB    reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)


state 57

    (24) pn_add_variable -> empty .

    VAR             reduce using rule 24 (pn_add_variable -> empty .)
    FUNC            reduce using rule 24 (pn_add_variable -> empty .)
    MAIN            reduce using rule 24 (pn_add_variable -> empty .)
    IF              reduce using rule 24 (pn_add_variable -> empty .)
    WHILE           reduce using rule 24 (pn_add_variable -> empty .)
    READ            reduce using rule 24 (pn_add_variable -> empty .)
    WRITE           reduce using rule 24 (pn_add_variable -> empty .)
    CALL            reduce using rule 24 (pn_add_variable -> empty .)
    ID              reduce using rule 24 (pn_add_variable -> empty .)
    RIGHT_CURLYB    reduce using rule 24 (pn_add_variable -> empty .)


state 58

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable . RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    RIGHT_PARENTHESIS shift and go to state 62


state 59

    (107) pn_add_param_vartable -> empty .

    RIGHT_PARENTHESIS reduce using rule 107 (pn_add_param_vartable -> empty .)


state 60

    (77) parametro -> tipo ID . parametro_rec
    (79) parametro_rec -> . COMMA tipo ID parametro_rec
    (80) parametro_rec -> . empty
    (118) empty -> .

    COMMA           shift and go to state 64
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    parametro_rec                  shift and go to state 63
    empty                          shift and go to state 65

state 61

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func . bloque_rec RIGHT_CURLYB pn_end_main
    (116) bloque_rec -> . bloque bloque_rec
    (117) bloque_rec -> . empty
    (25) bloque -> . asignacion
    (26) bloque -> . condicional
    (27) bloque -> . while
    (28) bloque -> . read
    (29) bloque -> . write
    (30) bloque -> . func_call SEMICOLON
    (118) empty -> .
    (31) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (82) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (94) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    CALL            shift and go to state 80
    ID              shift and go to state 81

    bloque_rec                     shift and go to state 66
    bloque                         shift and go to state 67
    empty                          shift and go to state 68
    asignacion                     shift and go to state 69
    condicional                    shift and go to state 70
    while                          shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    func_call                      shift and go to state 74
    var                            shift and go to state 75

state 62

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS . LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    LEFT_CURLYB     shift and go to state 82


state 63

    (77) parametro -> tipo ID parametro_rec .

    RIGHT_PARENTHESIS reduce using rule 77 (parametro -> tipo ID parametro_rec .)


state 64

    (79) parametro_rec -> COMMA . tipo ID parametro_rec
    (71) tipo -> . INT
    (72) tipo -> . FLOAT
    (73) tipo -> . BOOL
    (74) tipo -> . STRING

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24

    tipo                           shift and go to state 83

state 65

    (80) parametro_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 80 (parametro_rec -> empty .)


state 66

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec . RIGHT_CURLYB pn_end_main

    RIGHT_CURLYB    shift and go to state 84


state 67

    (116) bloque_rec -> bloque . bloque_rec
    (116) bloque_rec -> . bloque bloque_rec
    (117) bloque_rec -> . empty
    (25) bloque -> . asignacion
    (26) bloque -> . condicional
    (27) bloque -> . while
    (28) bloque -> . read
    (29) bloque -> . write
    (30) bloque -> . func_call SEMICOLON
    (118) empty -> .
    (31) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (82) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (94) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    CALL            shift and go to state 80
    ID              shift and go to state 81

    bloque                         shift and go to state 67
    bloque_rec                     shift and go to state 85
    empty                          shift and go to state 68
    asignacion                     shift and go to state 69
    condicional                    shift and go to state 70
    while                          shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    func_call                      shift and go to state 74
    var                            shift and go to state 75

state 68

    (117) bloque_rec -> empty .

    RIGHT_CURLYB    reduce using rule 117 (bloque_rec -> empty .)
    RETURN          reduce using rule 117 (bloque_rec -> empty .)


state 69

    (25) bloque -> asignacion .

    IF              reduce using rule 25 (bloque -> asignacion .)
    WHILE           reduce using rule 25 (bloque -> asignacion .)
    READ            reduce using rule 25 (bloque -> asignacion .)
    WRITE           reduce using rule 25 (bloque -> asignacion .)
    CALL            reduce using rule 25 (bloque -> asignacion .)
    ID              reduce using rule 25 (bloque -> asignacion .)
    RIGHT_CURLYB    reduce using rule 25 (bloque -> asignacion .)
    RETURN          reduce using rule 25 (bloque -> asignacion .)


state 70

    (26) bloque -> condicional .

    IF              reduce using rule 26 (bloque -> condicional .)
    WHILE           reduce using rule 26 (bloque -> condicional .)
    READ            reduce using rule 26 (bloque -> condicional .)
    WRITE           reduce using rule 26 (bloque -> condicional .)
    CALL            reduce using rule 26 (bloque -> condicional .)
    ID              reduce using rule 26 (bloque -> condicional .)
    RIGHT_CURLYB    reduce using rule 26 (bloque -> condicional .)
    RETURN          reduce using rule 26 (bloque -> condicional .)


state 71

    (27) bloque -> while .

    IF              reduce using rule 27 (bloque -> while .)
    WHILE           reduce using rule 27 (bloque -> while .)
    READ            reduce using rule 27 (bloque -> while .)
    WRITE           reduce using rule 27 (bloque -> while .)
    CALL            reduce using rule 27 (bloque -> while .)
    ID              reduce using rule 27 (bloque -> while .)
    RIGHT_CURLYB    reduce using rule 27 (bloque -> while .)
    RETURN          reduce using rule 27 (bloque -> while .)


state 72

    (28) bloque -> read .

    IF              reduce using rule 28 (bloque -> read .)
    WHILE           reduce using rule 28 (bloque -> read .)
    READ            reduce using rule 28 (bloque -> read .)
    WRITE           reduce using rule 28 (bloque -> read .)
    CALL            reduce using rule 28 (bloque -> read .)
    ID              reduce using rule 28 (bloque -> read .)
    RIGHT_CURLYB    reduce using rule 28 (bloque -> read .)
    RETURN          reduce using rule 28 (bloque -> read .)


state 73

    (29) bloque -> write .

    IF              reduce using rule 29 (bloque -> write .)
    WHILE           reduce using rule 29 (bloque -> write .)
    READ            reduce using rule 29 (bloque -> write .)
    WRITE           reduce using rule 29 (bloque -> write .)
    CALL            reduce using rule 29 (bloque -> write .)
    ID              reduce using rule 29 (bloque -> write .)
    RIGHT_CURLYB    reduce using rule 29 (bloque -> write .)
    RETURN          reduce using rule 29 (bloque -> write .)


state 74

    (30) bloque -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 86


state 75

    (31) asignacion -> var . pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (32) pn_var_assign -> . empty
    (118) empty -> .

    EQUAL_ASSIGN    reduce using rule 118 (empty -> .)

    pn_var_assign                  shift and go to state 87
    empty                          shift and go to state 88

state 76

    (82) condicional -> IF . LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    LEFT_PARENTHESIS shift and go to state 89


state 77

    (88) while -> WHILE . pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (90) pn_while -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_while                       shift and go to state 90
    empty                          shift and go to state 91

state 78

    (93) read -> READ . LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 92


state 79

    (94) write -> WRITE . LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 93


state 80

    (99) func_call -> CALL . ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    ID              shift and go to state 94


state 81

    (14) var -> ID . varArray
    (15) varArray -> . empty
    (16) varArray -> . pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET
    (118) empty -> .
    (17) pn_array_access1 -> . empty

    EQUAL_ASSIGN    reduce using rule 118 (empty -> .)
    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    LEFT_BRACKET    reduce using rule 118 (empty -> .)

    varArray                       shift and go to state 95
    empty                          shift and go to state 96
    pn_array_access1               shift and go to state 97

state 82

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB . pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (108) pn_gen_vartable -> . empty
    (118) empty -> .

    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)

    pn_gen_vartable                shift and go to state 98
    empty                          shift and go to state 54

state 83

    (79) parametro_rec -> COMMA tipo . ID parametro_rec

    ID              shift and go to state 99


state 84

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB . pn_end_main
    (110) pn_end_main -> . empty
    (118) empty -> .

    $end            reduce using rule 118 (empty -> .)

    pn_end_main                    shift and go to state 100
    empty                          shift and go to state 101

state 85

    (116) bloque_rec -> bloque bloque_rec .

    RIGHT_CURLYB    reduce using rule 116 (bloque_rec -> bloque bloque_rec .)
    RETURN          reduce using rule 116 (bloque_rec -> bloque bloque_rec .)


state 86

    (30) bloque -> func_call SEMICOLON .

    IF              reduce using rule 30 (bloque -> func_call SEMICOLON .)
    WHILE           reduce using rule 30 (bloque -> func_call SEMICOLON .)
    READ            reduce using rule 30 (bloque -> func_call SEMICOLON .)
    WRITE           reduce using rule 30 (bloque -> func_call SEMICOLON .)
    CALL            reduce using rule 30 (bloque -> func_call SEMICOLON .)
    ID              reduce using rule 30 (bloque -> func_call SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 30 (bloque -> func_call SEMICOLON .)
    RETURN          reduce using rule 30 (bloque -> func_call SEMICOLON .)


state 87

    (31) asignacion -> var pn_var_assign . EQUAL_ASSIGN all_logical SEMICOLON

    EQUAL_ASSIGN    shift and go to state 102


state 88

    (32) pn_var_assign -> empty .

    EQUAL_ASSIGN    reduce using rule 32 (pn_var_assign -> empty .)


state 89

    (82) condicional -> IF LEFT_PARENTHESIS . all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 104
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 90

    (88) while -> WHILE pn_while . LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop

    LEFT_PARENTHESIS shift and go to state 119


state 91

    (90) pn_while -> empty .

    LEFT_PARENTHESIS reduce using rule 90 (pn_while -> empty .)


state 92

    (93) read -> READ LEFT_PARENTHESIS . var RIGHT_PARENTHESIS SEMICOLON
    (14) var -> . ID varArray

    ID              shift and go to state 81

    var                            shift and go to state 120

state 93

    (94) write -> WRITE LEFT_PARENTHESIS . write_rec RIGHT_PARENTHESIS SEMICOLON
    (95) write_rec -> . all_logical pn_write_quad write_rec1
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    write_rec                      shift and go to state 121
    all_logical                    shift and go to state 122
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 94

    (99) func_call -> CALL ID . pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (100) pn_verify_func -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_verify_func                 shift and go to state 123
    empty                          shift and go to state 124

state 95

    (14) var -> ID varArray .

    EQUAL_ASSIGN    reduce using rule 14 (var -> ID varArray .)
    MULTIPLICATION  reduce using rule 14 (var -> ID varArray .)
    DIVISION        reduce using rule 14 (var -> ID varArray .)
    PLUS            reduce using rule 14 (var -> ID varArray .)
    MINUS           reduce using rule 14 (var -> ID varArray .)
    GREATER_THAN    reduce using rule 14 (var -> ID varArray .)
    LESS_THAN       reduce using rule 14 (var -> ID varArray .)
    EQUAL_COMPARE   reduce using rule 14 (var -> ID varArray .)
    NOT_EQUAL       reduce using rule 14 (var -> ID varArray .)
    AND             reduce using rule 14 (var -> ID varArray .)
    OR              reduce using rule 14 (var -> ID varArray .)
    RIGHT_PARENTHESIS reduce using rule 14 (var -> ID varArray .)
    MORE            reduce using rule 14 (var -> ID varArray .)
    SEMICOLON       reduce using rule 14 (var -> ID varArray .)
    RIGHT_BRACKET   reduce using rule 14 (var -> ID varArray .)
    COMMA           reduce using rule 14 (var -> ID varArray .)
    LEFT_PARENTHESIS reduce using rule 14 (var -> ID varArray .)
    CONST_BOOL      reduce using rule 14 (var -> ID varArray .)
    CONST_STRING    reduce using rule 14 (var -> ID varArray .)
    CALL            reduce using rule 14 (var -> ID varArray .)
    CONST_INT       reduce using rule 14 (var -> ID varArray .)
    CONST_FLOAT     reduce using rule 14 (var -> ID varArray .)
    ID              reduce using rule 14 (var -> ID varArray .)


state 96

    (15) varArray -> empty .
    (17) pn_array_access1 -> empty .

    EQUAL_ASSIGN    reduce using rule 15 (varArray -> empty .)
    MULTIPLICATION  reduce using rule 15 (varArray -> empty .)
    DIVISION        reduce using rule 15 (varArray -> empty .)
    PLUS            reduce using rule 15 (varArray -> empty .)
    MINUS           reduce using rule 15 (varArray -> empty .)
    GREATER_THAN    reduce using rule 15 (varArray -> empty .)
    LESS_THAN       reduce using rule 15 (varArray -> empty .)
    EQUAL_COMPARE   reduce using rule 15 (varArray -> empty .)
    NOT_EQUAL       reduce using rule 15 (varArray -> empty .)
    AND             reduce using rule 15 (varArray -> empty .)
    OR              reduce using rule 15 (varArray -> empty .)
    RIGHT_PARENTHESIS reduce using rule 15 (varArray -> empty .)
    MORE            reduce using rule 15 (varArray -> empty .)
    SEMICOLON       reduce using rule 15 (varArray -> empty .)
    RIGHT_BRACKET   reduce using rule 15 (varArray -> empty .)
    COMMA           reduce using rule 15 (varArray -> empty .)
    LEFT_PARENTHESIS reduce using rule 15 (varArray -> empty .)
    CONST_BOOL      reduce using rule 15 (varArray -> empty .)
    CONST_STRING    reduce using rule 15 (varArray -> empty .)
    CALL            reduce using rule 15 (varArray -> empty .)
    CONST_INT       reduce using rule 15 (varArray -> empty .)
    CONST_FLOAT     reduce using rule 15 (varArray -> empty .)
    ID              reduce using rule 15 (varArray -> empty .)
    LEFT_BRACKET    reduce using rule 17 (pn_array_access1 -> empty .)


state 97

    (16) varArray -> pn_array_access1 . LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 125


state 98

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable . pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (109) pn_func_quad -> . empty
    (118) empty -> .

    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)

    pn_func_quad                   shift and go to state 126
    empty                          shift and go to state 127

state 99

    (79) parametro_rec -> COMMA tipo ID . parametro_rec
    (79) parametro_rec -> . COMMA tipo ID parametro_rec
    (80) parametro_rec -> . empty
    (118) empty -> .

    COMMA           shift and go to state 64
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    parametro_rec                  shift and go to state 128
    empty                          shift and go to state 65

state 100

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main .

    $end            reduce using rule 2 (main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main .)


state 101

    (110) pn_end_main -> empty .

    $end            reduce using rule 110 (pn_end_main -> empty .)


state 102

    (31) asignacion -> var pn_var_assign EQUAL_ASSIGN . all_logical SEMICOLON
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    var                            shift and go to state 115
    all_logical                    shift and go to state 129
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112

state 103

    (57) factor -> LEFT_PARENTHESIS . pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (69) pn_open_parenthesis -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_open_parenthesis            shift and go to state 130
    empty                          shift and go to state 131

state 104

    (82) condicional -> IF LEFT_PARENTHESIS all_logical . RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    RIGHT_PARENTHESIS shift and go to state 132


state 105

    (34) all_logical -> logical_exp . pn_all_logical all_logical_rec
    (38) pn_all_logical -> . empty
    (118) empty -> .

    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_all_logical                 shift and go to state 133
    empty                          shift and go to state 134

state 106

    (39) logical_exp -> exp . pn_logical_exp logical_exp_rec
    (45) pn_logical_exp -> . empty
    (118) empty -> .

    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_logical_exp                 shift and go to state 135
    empty                          shift and go to state 136

state 107

    (46) exp -> termino . pn_exp exp_rec
    (47) pn_exp -> . empty
    (118) empty -> .

    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_exp                         shift and go to state 137
    empty                          shift and go to state 138

state 108

    (51) termino -> factor . pn_termino termino_rec
    (55) pn_termino -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_termino                     shift and go to state 139
    empty                          shift and go to state 140

state 109

    (56) factor -> varcte .

    MULTIPLICATION  reduce using rule 56 (factor -> varcte .)
    DIVISION        reduce using rule 56 (factor -> varcte .)
    PLUS            reduce using rule 56 (factor -> varcte .)
    MINUS           reduce using rule 56 (factor -> varcte .)
    GREATER_THAN    reduce using rule 56 (factor -> varcte .)
    LESS_THAN       reduce using rule 56 (factor -> varcte .)
    EQUAL_COMPARE   reduce using rule 56 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 56 (factor -> varcte .)
    AND             reduce using rule 56 (factor -> varcte .)
    OR              reduce using rule 56 (factor -> varcte .)
    RIGHT_PARENTHESIS reduce using rule 56 (factor -> varcte .)
    MORE            reduce using rule 56 (factor -> varcte .)
    SEMICOLON       reduce using rule 56 (factor -> varcte .)
    RIGHT_BRACKET   reduce using rule 56 (factor -> varcte .)
    COMMA           reduce using rule 56 (factor -> varcte .)
    LEFT_PARENTHESIS reduce using rule 56 (factor -> varcte .)
    CONST_BOOL      reduce using rule 56 (factor -> varcte .)
    CONST_STRING    reduce using rule 56 (factor -> varcte .)
    CALL            reduce using rule 56 (factor -> varcte .)
    CONST_INT       reduce using rule 56 (factor -> varcte .)
    CONST_FLOAT     reduce using rule 56 (factor -> varcte .)
    ID              reduce using rule 56 (factor -> varcte .)


state 110

    (58) factor -> func_call .

    MULTIPLICATION  reduce using rule 58 (factor -> func_call .)
    DIVISION        reduce using rule 58 (factor -> func_call .)
    PLUS            reduce using rule 58 (factor -> func_call .)
    MINUS           reduce using rule 58 (factor -> func_call .)
    GREATER_THAN    reduce using rule 58 (factor -> func_call .)
    LESS_THAN       reduce using rule 58 (factor -> func_call .)
    EQUAL_COMPARE   reduce using rule 58 (factor -> func_call .)
    NOT_EQUAL       reduce using rule 58 (factor -> func_call .)
    AND             reduce using rule 58 (factor -> func_call .)
    OR              reduce using rule 58 (factor -> func_call .)
    RIGHT_PARENTHESIS reduce using rule 58 (factor -> func_call .)
    MORE            reduce using rule 58 (factor -> func_call .)
    SEMICOLON       reduce using rule 58 (factor -> func_call .)
    RIGHT_BRACKET   reduce using rule 58 (factor -> func_call .)
    COMMA           reduce using rule 58 (factor -> func_call .)
    LEFT_PARENTHESIS reduce using rule 58 (factor -> func_call .)
    CONST_BOOL      reduce using rule 58 (factor -> func_call .)
    CONST_STRING    reduce using rule 58 (factor -> func_call .)
    CALL            reduce using rule 58 (factor -> func_call .)
    CONST_INT       reduce using rule 58 (factor -> func_call .)
    CONST_FLOAT     reduce using rule 58 (factor -> func_call .)
    ID              reduce using rule 58 (factor -> func_call .)


state 111

    (59) varcte -> cte_int . pn_add_constant
    (68) pn_add_constant -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_add_constant                shift and go to state 141
    empty                          shift and go to state 142

state 112

    (60) varcte -> cte_float . pn_add_constant
    (68) pn_add_constant -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_add_constant                shift and go to state 143
    empty                          shift and go to state 142

state 113

    (61) varcte -> CONST_BOOL . pn_add_constant
    (68) pn_add_constant -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_add_constant                shift and go to state 144
    empty                          shift and go to state 142

state 114

    (62) varcte -> CONST_STRING . empty empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    empty                          shift and go to state 145

state 115

    (63) varcte -> var .

    MULTIPLICATION  reduce using rule 63 (varcte -> var .)
    DIVISION        reduce using rule 63 (varcte -> var .)
    PLUS            reduce using rule 63 (varcte -> var .)
    MINUS           reduce using rule 63 (varcte -> var .)
    GREATER_THAN    reduce using rule 63 (varcte -> var .)
    LESS_THAN       reduce using rule 63 (varcte -> var .)
    EQUAL_COMPARE   reduce using rule 63 (varcte -> var .)
    NOT_EQUAL       reduce using rule 63 (varcte -> var .)
    AND             reduce using rule 63 (varcte -> var .)
    OR              reduce using rule 63 (varcte -> var .)
    RIGHT_PARENTHESIS reduce using rule 63 (varcte -> var .)
    MORE            reduce using rule 63 (varcte -> var .)
    SEMICOLON       reduce using rule 63 (varcte -> var .)
    RIGHT_BRACKET   reduce using rule 63 (varcte -> var .)
    COMMA           reduce using rule 63 (varcte -> var .)
    LEFT_PARENTHESIS reduce using rule 63 (varcte -> var .)
    CONST_BOOL      reduce using rule 63 (varcte -> var .)
    CONST_STRING    reduce using rule 63 (varcte -> var .)
    CALL            reduce using rule 63 (varcte -> var .)
    CONST_INT       reduce using rule 63 (varcte -> var .)
    CONST_FLOAT     reduce using rule 63 (varcte -> var .)
    ID              reduce using rule 63 (varcte -> var .)


state 116

    (64) cte_int -> CONST_INT .

    MULTIPLICATION  reduce using rule 64 (cte_int -> CONST_INT .)
    DIVISION        reduce using rule 64 (cte_int -> CONST_INT .)
    PLUS            reduce using rule 64 (cte_int -> CONST_INT .)
    MINUS           reduce using rule 64 (cte_int -> CONST_INT .)
    GREATER_THAN    reduce using rule 64 (cte_int -> CONST_INT .)
    LESS_THAN       reduce using rule 64 (cte_int -> CONST_INT .)
    EQUAL_COMPARE   reduce using rule 64 (cte_int -> CONST_INT .)
    NOT_EQUAL       reduce using rule 64 (cte_int -> CONST_INT .)
    AND             reduce using rule 64 (cte_int -> CONST_INT .)
    OR              reduce using rule 64 (cte_int -> CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 64 (cte_int -> CONST_INT .)
    MORE            reduce using rule 64 (cte_int -> CONST_INT .)
    SEMICOLON       reduce using rule 64 (cte_int -> CONST_INT .)
    RIGHT_BRACKET   reduce using rule 64 (cte_int -> CONST_INT .)
    COMMA           reduce using rule 64 (cte_int -> CONST_INT .)
    LEFT_PARENTHESIS reduce using rule 64 (cte_int -> CONST_INT .)
    CONST_BOOL      reduce using rule 64 (cte_int -> CONST_INT .)
    CONST_STRING    reduce using rule 64 (cte_int -> CONST_INT .)
    CALL            reduce using rule 64 (cte_int -> CONST_INT .)
    CONST_INT       reduce using rule 64 (cte_int -> CONST_INT .)
    CONST_FLOAT     reduce using rule 64 (cte_int -> CONST_INT .)
    ID              reduce using rule 64 (cte_int -> CONST_INT .)


state 117

    (65) cte_int -> MINUS . CONST_INT
    (67) cte_float -> MINUS . CONST_FLOAT

    CONST_INT       shift and go to state 146
    CONST_FLOAT     shift and go to state 147


state 118

    (66) cte_float -> CONST_FLOAT .

    MULTIPLICATION  reduce using rule 66 (cte_float -> CONST_FLOAT .)
    DIVISION        reduce using rule 66 (cte_float -> CONST_FLOAT .)
    PLUS            reduce using rule 66 (cte_float -> CONST_FLOAT .)
    MINUS           reduce using rule 66 (cte_float -> CONST_FLOAT .)
    GREATER_THAN    reduce using rule 66 (cte_float -> CONST_FLOAT .)
    LESS_THAN       reduce using rule 66 (cte_float -> CONST_FLOAT .)
    EQUAL_COMPARE   reduce using rule 66 (cte_float -> CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 66 (cte_float -> CONST_FLOAT .)
    AND             reduce using rule 66 (cte_float -> CONST_FLOAT .)
    OR              reduce using rule 66 (cte_float -> CONST_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 66 (cte_float -> CONST_FLOAT .)
    MORE            reduce using rule 66 (cte_float -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 66 (cte_float -> CONST_FLOAT .)
    RIGHT_BRACKET   reduce using rule 66 (cte_float -> CONST_FLOAT .)
    COMMA           reduce using rule 66 (cte_float -> CONST_FLOAT .)
    LEFT_PARENTHESIS reduce using rule 66 (cte_float -> CONST_FLOAT .)
    CONST_BOOL      reduce using rule 66 (cte_float -> CONST_FLOAT .)
    CONST_STRING    reduce using rule 66 (cte_float -> CONST_FLOAT .)
    CALL            reduce using rule 66 (cte_float -> CONST_FLOAT .)
    CONST_INT       reduce using rule 66 (cte_float -> CONST_FLOAT .)
    CONST_FLOAT     reduce using rule 66 (cte_float -> CONST_FLOAT .)
    ID              reduce using rule 66 (cte_float -> CONST_FLOAT .)


state 119

    (88) while -> WHILE pn_while LEFT_PARENTHESIS . all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 148
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 120

    (93) read -> READ LEFT_PARENTHESIS var . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 149


state 121

    (94) write -> WRITE LEFT_PARENTHESIS write_rec . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 150


state 122

    (95) write_rec -> all_logical . pn_write_quad write_rec1
    (98) pn_write_quad -> . empty
    (118) empty -> .

    MORE            reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_write_quad                  shift and go to state 151
    empty                          shift and go to state 152

state 123

    (99) func_call -> CALL ID pn_verify_func . LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 153


state 124

    (100) pn_verify_func -> empty .

    LEFT_PARENTHESIS reduce using rule 100 (pn_verify_func -> empty .)


state 125

    (16) varArray -> pn_array_access1 LEFT_BRACKET . pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET
    (18) pn_array_access2 -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_array_access2               shift and go to state 154
    empty                          shift and go to state 155

state 126

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad . bloque_rec func_return RIGHT_CURLYB pn_end_func
    (116) bloque_rec -> . bloque bloque_rec
    (117) bloque_rec -> . empty
    (25) bloque -> . asignacion
    (26) bloque -> . condicional
    (27) bloque -> . while
    (28) bloque -> . read
    (29) bloque -> . write
    (30) bloque -> . func_call SEMICOLON
    (118) empty -> .
    (31) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (82) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (94) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RETURN          reduce using rule 118 (empty -> .)
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    CALL            shift and go to state 80
    ID              shift and go to state 81

    bloque_rec                     shift and go to state 156
    bloque                         shift and go to state 67
    empty                          shift and go to state 68
    asignacion                     shift and go to state 69
    condicional                    shift and go to state 70
    while                          shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    func_call                      shift and go to state 74
    var                            shift and go to state 75

state 127

    (109) pn_func_quad -> empty .

    IF              reduce using rule 109 (pn_func_quad -> empty .)
    WHILE           reduce using rule 109 (pn_func_quad -> empty .)
    READ            reduce using rule 109 (pn_func_quad -> empty .)
    WRITE           reduce using rule 109 (pn_func_quad -> empty .)
    CALL            reduce using rule 109 (pn_func_quad -> empty .)
    ID              reduce using rule 109 (pn_func_quad -> empty .)
    RETURN          reduce using rule 109 (pn_func_quad -> empty .)


state 128

    (79) parametro_rec -> COMMA tipo ID parametro_rec .

    RIGHT_PARENTHESIS reduce using rule 79 (parametro_rec -> COMMA tipo ID parametro_rec .)


state 129

    (31) asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical . SEMICOLON

    SEMICOLON       shift and go to state 157


state 130

    (57) factor -> LEFT_PARENTHESIS pn_open_parenthesis . all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 158
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 131

    (69) pn_open_parenthesis -> empty .

    LEFT_PARENTHESIS reduce using rule 69 (pn_open_parenthesis -> empty .)
    CONST_BOOL      reduce using rule 69 (pn_open_parenthesis -> empty .)
    CONST_STRING    reduce using rule 69 (pn_open_parenthesis -> empty .)
    CALL            reduce using rule 69 (pn_open_parenthesis -> empty .)
    CONST_INT       reduce using rule 69 (pn_open_parenthesis -> empty .)
    MINUS           reduce using rule 69 (pn_open_parenthesis -> empty .)
    CONST_FLOAT     reduce using rule 69 (pn_open_parenthesis -> empty .)
    ID              reduce using rule 69 (pn_open_parenthesis -> empty .)


state 132

    (82) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS . pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (85) pn_condicional -> . empty
    (118) empty -> .

    LEFT_CURLYB     reduce using rule 118 (empty -> .)

    pn_condicional                 shift and go to state 159
    empty                          shift and go to state 160

state 133

    (34) all_logical -> logical_exp pn_all_logical . all_logical_rec
    (35) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (36) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (37) all_logical_rec -> . empty
    (118) empty -> .

    AND             shift and go to state 162
    OR              shift and go to state 163
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    all_logical_rec                shift and go to state 161
    empty                          shift and go to state 164

state 134

    (38) pn_all_logical -> empty .

    AND             reduce using rule 38 (pn_all_logical -> empty .)
    OR              reduce using rule 38 (pn_all_logical -> empty .)
    RIGHT_PARENTHESIS reduce using rule 38 (pn_all_logical -> empty .)
    MORE            reduce using rule 38 (pn_all_logical -> empty .)
    SEMICOLON       reduce using rule 38 (pn_all_logical -> empty .)
    RIGHT_BRACKET   reduce using rule 38 (pn_all_logical -> empty .)
    COMMA           reduce using rule 38 (pn_all_logical -> empty .)
    LEFT_PARENTHESIS reduce using rule 38 (pn_all_logical -> empty .)
    CONST_BOOL      reduce using rule 38 (pn_all_logical -> empty .)
    CONST_STRING    reduce using rule 38 (pn_all_logical -> empty .)
    CALL            reduce using rule 38 (pn_all_logical -> empty .)
    CONST_INT       reduce using rule 38 (pn_all_logical -> empty .)
    MINUS           reduce using rule 38 (pn_all_logical -> empty .)
    CONST_FLOAT     reduce using rule 38 (pn_all_logical -> empty .)
    ID              reduce using rule 38 (pn_all_logical -> empty .)


state 135

    (39) logical_exp -> exp pn_logical_exp . logical_exp_rec
    (40) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (41) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (42) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (43) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . empty
    (118) empty -> .

    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    EQUAL_COMPARE   shift and go to state 168
    NOT_EQUAL       shift and go to state 169
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    logical_exp_rec                shift and go to state 165
    empty                          shift and go to state 170

state 136

    (45) pn_logical_exp -> empty .

    GREATER_THAN    reduce using rule 45 (pn_logical_exp -> empty .)
    LESS_THAN       reduce using rule 45 (pn_logical_exp -> empty .)
    EQUAL_COMPARE   reduce using rule 45 (pn_logical_exp -> empty .)
    NOT_EQUAL       reduce using rule 45 (pn_logical_exp -> empty .)
    AND             reduce using rule 45 (pn_logical_exp -> empty .)
    OR              reduce using rule 45 (pn_logical_exp -> empty .)
    RIGHT_PARENTHESIS reduce using rule 45 (pn_logical_exp -> empty .)
    MORE            reduce using rule 45 (pn_logical_exp -> empty .)
    SEMICOLON       reduce using rule 45 (pn_logical_exp -> empty .)
    RIGHT_BRACKET   reduce using rule 45 (pn_logical_exp -> empty .)
    COMMA           reduce using rule 45 (pn_logical_exp -> empty .)
    LEFT_PARENTHESIS reduce using rule 45 (pn_logical_exp -> empty .)
    CONST_BOOL      reduce using rule 45 (pn_logical_exp -> empty .)
    CONST_STRING    reduce using rule 45 (pn_logical_exp -> empty .)
    CALL            reduce using rule 45 (pn_logical_exp -> empty .)
    CONST_INT       reduce using rule 45 (pn_logical_exp -> empty .)
    MINUS           reduce using rule 45 (pn_logical_exp -> empty .)
    CONST_FLOAT     reduce using rule 45 (pn_logical_exp -> empty .)
    ID              reduce using rule 45 (pn_logical_exp -> empty .)


state 137

    (46) exp -> termino pn_exp . exp_rec
    (48) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (49) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (50) exp_rec -> . empty
    (118) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

  ! MINUS           [ reduce using rule 118 (empty -> .) ]

    exp_rec                        shift and go to state 171
    empty                          shift and go to state 174

state 138

    (47) pn_exp -> empty .

    PLUS            reduce using rule 47 (pn_exp -> empty .)
    MINUS           reduce using rule 47 (pn_exp -> empty .)
    GREATER_THAN    reduce using rule 47 (pn_exp -> empty .)
    LESS_THAN       reduce using rule 47 (pn_exp -> empty .)
    EQUAL_COMPARE   reduce using rule 47 (pn_exp -> empty .)
    NOT_EQUAL       reduce using rule 47 (pn_exp -> empty .)
    AND             reduce using rule 47 (pn_exp -> empty .)
    OR              reduce using rule 47 (pn_exp -> empty .)
    RIGHT_PARENTHESIS reduce using rule 47 (pn_exp -> empty .)
    MORE            reduce using rule 47 (pn_exp -> empty .)
    SEMICOLON       reduce using rule 47 (pn_exp -> empty .)
    RIGHT_BRACKET   reduce using rule 47 (pn_exp -> empty .)
    COMMA           reduce using rule 47 (pn_exp -> empty .)
    LEFT_PARENTHESIS reduce using rule 47 (pn_exp -> empty .)
    CONST_BOOL      reduce using rule 47 (pn_exp -> empty .)
    CONST_STRING    reduce using rule 47 (pn_exp -> empty .)
    CALL            reduce using rule 47 (pn_exp -> empty .)
    CONST_INT       reduce using rule 47 (pn_exp -> empty .)
    CONST_FLOAT     reduce using rule 47 (pn_exp -> empty .)
    ID              reduce using rule 47 (pn_exp -> empty .)


state 139

    (51) termino -> factor pn_termino . termino_rec
    (52) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (53) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (54) termino_rec -> . empty
    (118) empty -> .

    MULTIPLICATION  shift and go to state 176
    DIVISION        shift and go to state 177
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    termino_rec                    shift and go to state 175
    empty                          shift and go to state 178

state 140

    (55) pn_termino -> empty .

    MULTIPLICATION  reduce using rule 55 (pn_termino -> empty .)
    DIVISION        reduce using rule 55 (pn_termino -> empty .)
    PLUS            reduce using rule 55 (pn_termino -> empty .)
    MINUS           reduce using rule 55 (pn_termino -> empty .)
    GREATER_THAN    reduce using rule 55 (pn_termino -> empty .)
    LESS_THAN       reduce using rule 55 (pn_termino -> empty .)
    EQUAL_COMPARE   reduce using rule 55 (pn_termino -> empty .)
    NOT_EQUAL       reduce using rule 55 (pn_termino -> empty .)
    AND             reduce using rule 55 (pn_termino -> empty .)
    OR              reduce using rule 55 (pn_termino -> empty .)
    RIGHT_PARENTHESIS reduce using rule 55 (pn_termino -> empty .)
    MORE            reduce using rule 55 (pn_termino -> empty .)
    SEMICOLON       reduce using rule 55 (pn_termino -> empty .)
    RIGHT_BRACKET   reduce using rule 55 (pn_termino -> empty .)
    COMMA           reduce using rule 55 (pn_termino -> empty .)
    LEFT_PARENTHESIS reduce using rule 55 (pn_termino -> empty .)
    CONST_BOOL      reduce using rule 55 (pn_termino -> empty .)
    CONST_STRING    reduce using rule 55 (pn_termino -> empty .)
    CALL            reduce using rule 55 (pn_termino -> empty .)
    CONST_INT       reduce using rule 55 (pn_termino -> empty .)
    CONST_FLOAT     reduce using rule 55 (pn_termino -> empty .)
    ID              reduce using rule 55 (pn_termino -> empty .)


state 141

    (59) varcte -> cte_int pn_add_constant .

    MULTIPLICATION  reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    DIVISION        reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    PLUS            reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    MINUS           reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    GREATER_THAN    reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    LESS_THAN       reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    NOT_EQUAL       reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    AND             reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    OR              reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    MORE            reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    SEMICOLON       reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    COMMA           reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    LEFT_PARENTHESIS reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    CONST_BOOL      reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    CONST_STRING    reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    CALL            reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    CONST_INT       reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    CONST_FLOAT     reduce using rule 59 (varcte -> cte_int pn_add_constant .)
    ID              reduce using rule 59 (varcte -> cte_int pn_add_constant .)


state 142

    (68) pn_add_constant -> empty .

    MULTIPLICATION  reduce using rule 68 (pn_add_constant -> empty .)
    DIVISION        reduce using rule 68 (pn_add_constant -> empty .)
    PLUS            reduce using rule 68 (pn_add_constant -> empty .)
    MINUS           reduce using rule 68 (pn_add_constant -> empty .)
    GREATER_THAN    reduce using rule 68 (pn_add_constant -> empty .)
    LESS_THAN       reduce using rule 68 (pn_add_constant -> empty .)
    EQUAL_COMPARE   reduce using rule 68 (pn_add_constant -> empty .)
    NOT_EQUAL       reduce using rule 68 (pn_add_constant -> empty .)
    AND             reduce using rule 68 (pn_add_constant -> empty .)
    OR              reduce using rule 68 (pn_add_constant -> empty .)
    RIGHT_PARENTHESIS reduce using rule 68 (pn_add_constant -> empty .)
    MORE            reduce using rule 68 (pn_add_constant -> empty .)
    SEMICOLON       reduce using rule 68 (pn_add_constant -> empty .)
    RIGHT_BRACKET   reduce using rule 68 (pn_add_constant -> empty .)
    COMMA           reduce using rule 68 (pn_add_constant -> empty .)
    LEFT_PARENTHESIS reduce using rule 68 (pn_add_constant -> empty .)
    CONST_BOOL      reduce using rule 68 (pn_add_constant -> empty .)
    CONST_STRING    reduce using rule 68 (pn_add_constant -> empty .)
    CALL            reduce using rule 68 (pn_add_constant -> empty .)
    CONST_INT       reduce using rule 68 (pn_add_constant -> empty .)
    CONST_FLOAT     reduce using rule 68 (pn_add_constant -> empty .)
    ID              reduce using rule 68 (pn_add_constant -> empty .)


state 143

    (60) varcte -> cte_float pn_add_constant .

    MULTIPLICATION  reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    DIVISION        reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    PLUS            reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    MINUS           reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    GREATER_THAN    reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    LESS_THAN       reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    NOT_EQUAL       reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    AND             reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    OR              reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    MORE            reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    SEMICOLON       reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    COMMA           reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    LEFT_PARENTHESIS reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    CONST_BOOL      reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    CONST_STRING    reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    CALL            reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    CONST_INT       reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    CONST_FLOAT     reduce using rule 60 (varcte -> cte_float pn_add_constant .)
    ID              reduce using rule 60 (varcte -> cte_float pn_add_constant .)


state 144

    (61) varcte -> CONST_BOOL pn_add_constant .

    MULTIPLICATION  reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    DIVISION        reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    PLUS            reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    MINUS           reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    GREATER_THAN    reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    LESS_THAN       reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    NOT_EQUAL       reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    AND             reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    OR              reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    MORE            reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    SEMICOLON       reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    COMMA           reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    LEFT_PARENTHESIS reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_BOOL      reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_STRING    reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    CALL            reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_INT       reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_FLOAT     reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)
    ID              reduce using rule 61 (varcte -> CONST_BOOL pn_add_constant .)


state 145

    (62) varcte -> CONST_STRING empty . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    empty                          shift and go to state 179

state 146

    (65) cte_int -> MINUS CONST_INT .

    MULTIPLICATION  reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    DIVISION        reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    PLUS            reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    MINUS           reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    GREATER_THAN    reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    LESS_THAN       reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    EQUAL_COMPARE   reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    NOT_EQUAL       reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    AND             reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    OR              reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    MORE            reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    SEMICOLON       reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    RIGHT_BRACKET   reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    COMMA           reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    LEFT_PARENTHESIS reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    CONST_BOOL      reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    CONST_STRING    reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    CALL            reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    CONST_INT       reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    CONST_FLOAT     reduce using rule 65 (cte_int -> MINUS CONST_INT .)
    ID              reduce using rule 65 (cte_int -> MINUS CONST_INT .)


state 147

    (67) cte_float -> MINUS CONST_FLOAT .

    MULTIPLICATION  reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    DIVISION        reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    PLUS            reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    MINUS           reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    GREATER_THAN    reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    LESS_THAN       reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    EQUAL_COMPARE   reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    AND             reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    OR              reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    MORE            reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    SEMICOLON       reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    RIGHT_BRACKET   reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    COMMA           reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    LEFT_PARENTHESIS reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    CONST_BOOL      reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    CONST_STRING    reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    CALL            reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    CONST_INT       reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    CONST_FLOAT     reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)
    ID              reduce using rule 67 (cte_float -> MINUS CONST_FLOAT .)


state 148

    (88) while -> WHILE pn_while LEFT_PARENTHESIS all_logical . RIGHT_PARENTHESIS pn_while_jump while_loop

    RIGHT_PARENTHESIS shift and go to state 180


state 149

    (93) read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 181


state 150

    (94) write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 182


state 151

    (95) write_rec -> all_logical pn_write_quad . write_rec1
    (96) write_rec1 -> . MORE all_logical pn_write_quad write_rec1
    (97) write_rec1 -> . empty
    (118) empty -> .

    MORE            shift and go to state 184
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    write_rec1                     shift and go to state 183
    empty                          shift and go to state 185

state 152

    (98) pn_write_quad -> empty .

    MORE            reduce using rule 98 (pn_write_quad -> empty .)
    RIGHT_PARENTHESIS reduce using rule 98 (pn_write_quad -> empty .)


state 153

    (99) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS . pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (101) pn_param_counter -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_param_counter               shift and go to state 186
    empty                          shift and go to state 187

state 154

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 . all_logical pn_array_access3 RIGHT_BRACKET
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 188
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 155

    (18) pn_array_access2 -> empty .

    LEFT_PARENTHESIS reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_BOOL      reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_STRING    reduce using rule 18 (pn_array_access2 -> empty .)
    CALL            reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_INT       reduce using rule 18 (pn_array_access2 -> empty .)
    MINUS           reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_FLOAT     reduce using rule 18 (pn_array_access2 -> empty .)
    ID              reduce using rule 18 (pn_array_access2 -> empty .)


state 156

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec . func_return RIGHT_CURLYB pn_end_func
    (114) func_return -> . RETURN all_logical SEMICOLON
    (115) func_return -> . RETURN SEMICOLON

    RETURN          shift and go to state 190

    func_return                    shift and go to state 189

state 157

    (31) asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .

    IF              reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    WHILE           reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    READ            reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    WRITE           reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    CALL            reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    ID              reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    RETURN          reduce using rule 31 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)


state 158

    (57) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical . RIGHT_PARENTHESIS pn_close_parenthesis

    RIGHT_PARENTHESIS shift and go to state 191


state 159

    (82) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional . LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    LEFT_CURLYB     shift and go to state 192


state 160

    (85) pn_condicional -> empty .

    LEFT_CURLYB     reduce using rule 85 (pn_condicional -> empty .)


state 161

    (34) all_logical -> logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    LEFT_PARENTHESIS reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_BOOL      reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_STRING    reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CALL            reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_INT       reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    MINUS           reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_FLOAT     reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    ID              reduce using rule 34 (all_logical -> logical_exp pn_all_logical all_logical_rec .)


state 162

    (35) all_logical_rec -> AND . pn_operator logical_exp pn_all_logical all_logical_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 193
    empty                          shift and go to state 194

state 163

    (36) all_logical_rec -> OR . pn_operator logical_exp pn_all_logical all_logical_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 195
    empty                          shift and go to state 194

state 164

    (37) all_logical_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 37 (all_logical_rec -> empty .)
    MORE            reduce using rule 37 (all_logical_rec -> empty .)
    SEMICOLON       reduce using rule 37 (all_logical_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 37 (all_logical_rec -> empty .)
    COMMA           reduce using rule 37 (all_logical_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 37 (all_logical_rec -> empty .)
    CONST_BOOL      reduce using rule 37 (all_logical_rec -> empty .)
    CONST_STRING    reduce using rule 37 (all_logical_rec -> empty .)
    CALL            reduce using rule 37 (all_logical_rec -> empty .)
    CONST_INT       reduce using rule 37 (all_logical_rec -> empty .)
    MINUS           reduce using rule 37 (all_logical_rec -> empty .)
    CONST_FLOAT     reduce using rule 37 (all_logical_rec -> empty .)
    ID              reduce using rule 37 (all_logical_rec -> empty .)


state 165

    (39) logical_exp -> exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 39 (logical_exp -> exp pn_logical_exp logical_exp_rec .)


state 166

    (40) logical_exp_rec -> GREATER_THAN . pn_operator exp pn_logical_exp logical_exp_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 196
    empty                          shift and go to state 194

state 167

    (41) logical_exp_rec -> LESS_THAN . pn_operator exp pn_logical_exp logical_exp_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 197
    empty                          shift and go to state 194

state 168

    (42) logical_exp_rec -> EQUAL_COMPARE . pn_operator exp pn_logical_exp logical_exp_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 198
    empty                          shift and go to state 194

state 169

    (43) logical_exp_rec -> NOT_EQUAL . pn_operator exp pn_logical_exp logical_exp_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 199
    empty                          shift and go to state 194

state 170

    (44) logical_exp_rec -> empty .

    AND             reduce using rule 44 (logical_exp_rec -> empty .)
    OR              reduce using rule 44 (logical_exp_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 44 (logical_exp_rec -> empty .)
    MORE            reduce using rule 44 (logical_exp_rec -> empty .)
    SEMICOLON       reduce using rule 44 (logical_exp_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 44 (logical_exp_rec -> empty .)
    COMMA           reduce using rule 44 (logical_exp_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 44 (logical_exp_rec -> empty .)
    CONST_BOOL      reduce using rule 44 (logical_exp_rec -> empty .)
    CONST_STRING    reduce using rule 44 (logical_exp_rec -> empty .)
    CALL            reduce using rule 44 (logical_exp_rec -> empty .)
    CONST_INT       reduce using rule 44 (logical_exp_rec -> empty .)
    MINUS           reduce using rule 44 (logical_exp_rec -> empty .)
    CONST_FLOAT     reduce using rule 44 (logical_exp_rec -> empty .)
    ID              reduce using rule 44 (logical_exp_rec -> empty .)


state 171

    (46) exp -> termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    AND             reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    OR              reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    MORE            reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    COMMA           reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    LEFT_PARENTHESIS reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    CONST_BOOL      reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    CONST_STRING    reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    CALL            reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    CONST_INT       reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    MINUS           reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    CONST_FLOAT     reduce using rule 46 (exp -> termino pn_exp exp_rec .)
    ID              reduce using rule 46 (exp -> termino pn_exp exp_rec .)


state 172

    (48) exp_rec -> PLUS . pn_operator termino pn_exp exp_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 200
    empty                          shift and go to state 194

state 173

    (49) exp_rec -> MINUS . pn_operator termino pn_exp exp_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 201
    empty                          shift and go to state 194

state 174

    (50) exp_rec -> empty .

    GREATER_THAN    reduce using rule 50 (exp_rec -> empty .)
    LESS_THAN       reduce using rule 50 (exp_rec -> empty .)
    EQUAL_COMPARE   reduce using rule 50 (exp_rec -> empty .)
    NOT_EQUAL       reduce using rule 50 (exp_rec -> empty .)
    AND             reduce using rule 50 (exp_rec -> empty .)
    OR              reduce using rule 50 (exp_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 50 (exp_rec -> empty .)
    MORE            reduce using rule 50 (exp_rec -> empty .)
    SEMICOLON       reduce using rule 50 (exp_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 50 (exp_rec -> empty .)
    COMMA           reduce using rule 50 (exp_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 50 (exp_rec -> empty .)
    CONST_BOOL      reduce using rule 50 (exp_rec -> empty .)
    CONST_STRING    reduce using rule 50 (exp_rec -> empty .)
    CALL            reduce using rule 50 (exp_rec -> empty .)
    CONST_INT       reduce using rule 50 (exp_rec -> empty .)
    MINUS           reduce using rule 50 (exp_rec -> empty .)
    CONST_FLOAT     reduce using rule 50 (exp_rec -> empty .)
    ID              reduce using rule 50 (exp_rec -> empty .)


state 175

    (51) termino -> factor pn_termino termino_rec .

    PLUS            reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    MINUS           reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    AND             reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    OR              reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    MORE            reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    COMMA           reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    LEFT_PARENTHESIS reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    CONST_BOOL      reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    CONST_STRING    reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    CALL            reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    CONST_INT       reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    CONST_FLOAT     reduce using rule 51 (termino -> factor pn_termino termino_rec .)
    ID              reduce using rule 51 (termino -> factor pn_termino termino_rec .)


state 176

    (52) termino_rec -> MULTIPLICATION . pn_operator factor pn_termino termino_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 202
    empty                          shift and go to state 194

state 177

    (53) termino_rec -> DIVISION . pn_operator factor pn_termino termino_rec
    (33) pn_operator -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_operator                    shift and go to state 203
    empty                          shift and go to state 194

state 178

    (54) termino_rec -> empty .

    PLUS            reduce using rule 54 (termino_rec -> empty .)
    MINUS           reduce using rule 54 (termino_rec -> empty .)
    GREATER_THAN    reduce using rule 54 (termino_rec -> empty .)
    LESS_THAN       reduce using rule 54 (termino_rec -> empty .)
    EQUAL_COMPARE   reduce using rule 54 (termino_rec -> empty .)
    NOT_EQUAL       reduce using rule 54 (termino_rec -> empty .)
    AND             reduce using rule 54 (termino_rec -> empty .)
    OR              reduce using rule 54 (termino_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 54 (termino_rec -> empty .)
    MORE            reduce using rule 54 (termino_rec -> empty .)
    SEMICOLON       reduce using rule 54 (termino_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 54 (termino_rec -> empty .)
    COMMA           reduce using rule 54 (termino_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 54 (termino_rec -> empty .)
    CONST_BOOL      reduce using rule 54 (termino_rec -> empty .)
    CONST_STRING    reduce using rule 54 (termino_rec -> empty .)
    CALL            reduce using rule 54 (termino_rec -> empty .)
    CONST_INT       reduce using rule 54 (termino_rec -> empty .)
    CONST_FLOAT     reduce using rule 54 (termino_rec -> empty .)
    ID              reduce using rule 54 (termino_rec -> empty .)


state 179

    (62) varcte -> CONST_STRING empty empty .

    MULTIPLICATION  reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    DIVISION        reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    PLUS            reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    MINUS           reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    GREATER_THAN    reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    LESS_THAN       reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    EQUAL_COMPARE   reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    NOT_EQUAL       reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    AND             reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    OR              reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    RIGHT_PARENTHESIS reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    MORE            reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    SEMICOLON       reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    RIGHT_BRACKET   reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    COMMA           reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    LEFT_PARENTHESIS reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    CONST_BOOL      reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    CONST_STRING    reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    CALL            reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    CONST_INT       reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    CONST_FLOAT     reduce using rule 62 (varcte -> CONST_STRING empty empty .)
    ID              reduce using rule 62 (varcte -> CONST_STRING empty empty .)


state 180

    (88) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS . pn_while_jump while_loop
    (91) pn_while_jump -> . empty
    (118) empty -> .

    LEFT_CURLYB     reduce using rule 118 (empty -> .)

    pn_while_jump                  shift and go to state 204
    empty                          shift and go to state 205

state 181

    (93) read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .

    IF              reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    CALL            reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 93 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)


state 182

    (94) write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .

    IF              reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    CALL            reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 94 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)


state 183

    (95) write_rec -> all_logical pn_write_quad write_rec1 .

    RIGHT_PARENTHESIS reduce using rule 95 (write_rec -> all_logical pn_write_quad write_rec1 .)


state 184

    (96) write_rec1 -> MORE . all_logical pn_write_quad write_rec1
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 206
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 185

    (97) write_rec1 -> empty .

    RIGHT_PARENTHESIS reduce using rule 97 (write_rec1 -> empty .)


state 186

    (99) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter . pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (69) pn_open_parenthesis -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_open_parenthesis            shift and go to state 207
    empty                          shift and go to state 131

state 187

    (101) pn_param_counter -> empty .

    LEFT_PARENTHESIS reduce using rule 101 (pn_param_counter -> empty .)
    CONST_BOOL      reduce using rule 101 (pn_param_counter -> empty .)
    CONST_STRING    reduce using rule 101 (pn_param_counter -> empty .)
    CALL            reduce using rule 101 (pn_param_counter -> empty .)
    CONST_INT       reduce using rule 101 (pn_param_counter -> empty .)
    MINUS           reduce using rule 101 (pn_param_counter -> empty .)
    CONST_FLOAT     reduce using rule 101 (pn_param_counter -> empty .)
    ID              reduce using rule 101 (pn_param_counter -> empty .)


state 188

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical . pn_array_access3 RIGHT_BRACKET
    (19) pn_array_access3 -> . empty
    (118) empty -> .

    RIGHT_BRACKET   reduce using rule 118 (empty -> .)

    pn_array_access3               shift and go to state 208
    empty                          shift and go to state 209

state 189

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return . RIGHT_CURLYB pn_end_func

    RIGHT_CURLYB    shift and go to state 210


state 190

    (114) func_return -> RETURN . all_logical SEMICOLON
    (115) func_return -> RETURN . SEMICOLON
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    SEMICOLON       shift and go to state 212
    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 211
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 191

    (57) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS . pn_close_parenthesis
    (70) pn_close_parenthesis -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_close_parenthesis           shift and go to state 213
    empty                          shift and go to state 214

state 192

    (82) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB . bloque_rec RIGHT_CURLYB condicional_else
    (116) bloque_rec -> . bloque bloque_rec
    (117) bloque_rec -> . empty
    (25) bloque -> . asignacion
    (26) bloque -> . condicional
    (27) bloque -> . while
    (28) bloque -> . read
    (29) bloque -> . write
    (30) bloque -> . func_call SEMICOLON
    (118) empty -> .
    (31) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (82) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (94) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    CALL            shift and go to state 80
    ID              shift and go to state 81

    bloque_rec                     shift and go to state 215
    bloque                         shift and go to state 67
    empty                          shift and go to state 68
    asignacion                     shift and go to state 69
    condicional                    shift and go to state 70
    while                          shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    func_call                      shift and go to state 74
    var                            shift and go to state 75

state 193

    (35) all_logical_rec -> AND pn_operator . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    logical_exp                    shift and go to state 216
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 194

    (33) pn_operator -> empty .

    LEFT_PARENTHESIS reduce using rule 33 (pn_operator -> empty .)
    CONST_BOOL      reduce using rule 33 (pn_operator -> empty .)
    CONST_STRING    reduce using rule 33 (pn_operator -> empty .)
    CALL            reduce using rule 33 (pn_operator -> empty .)
    CONST_INT       reduce using rule 33 (pn_operator -> empty .)
    MINUS           reduce using rule 33 (pn_operator -> empty .)
    CONST_FLOAT     reduce using rule 33 (pn_operator -> empty .)
    ID              reduce using rule 33 (pn_operator -> empty .)


state 195

    (36) all_logical_rec -> OR pn_operator . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    logical_exp                    shift and go to state 217
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 196

    (40) logical_exp_rec -> GREATER_THAN pn_operator . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    exp                            shift and go to state 218
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 197

    (41) logical_exp_rec -> LESS_THAN pn_operator . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    exp                            shift and go to state 219
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 198

    (42) logical_exp_rec -> EQUAL_COMPARE pn_operator . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    exp                            shift and go to state 220
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 199

    (43) logical_exp_rec -> NOT_EQUAL pn_operator . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    exp                            shift and go to state 221
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 200

    (48) exp_rec -> PLUS pn_operator . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    termino                        shift and go to state 222
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 201

    (49) exp_rec -> MINUS pn_operator . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    termino                        shift and go to state 223
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 202

    (52) termino_rec -> MULTIPLICATION pn_operator . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    factor                         shift and go to state 224
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 203

    (53) termino_rec -> DIVISION pn_operator . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    factor                         shift and go to state 225
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 204

    (88) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump . while_loop
    (89) while_loop -> . LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1

    LEFT_CURLYB     shift and go to state 227

    while_loop                     shift and go to state 226

state 205

    (91) pn_while_jump -> empty .

    LEFT_CURLYB     reduce using rule 91 (pn_while_jump -> empty .)


state 206

    (96) write_rec1 -> MORE all_logical . pn_write_quad write_rec1
    (98) pn_write_quad -> . empty
    (118) empty -> .

    MORE            reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_write_quad                  shift and go to state 228
    empty                          shift and go to state 152

state 207

    (99) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis . func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (102) func_call_rec -> . all_logical pn_param_match func_call_rec1
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    func_call_rec                  shift and go to state 229
    all_logical                    shift and go to state 230
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 208

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 231


state 209

    (19) pn_array_access3 -> empty .

    RIGHT_BRACKET   reduce using rule 19 (pn_array_access3 -> empty .)


state 210

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB . pn_end_func
    (111) pn_end_func -> . empty
    (118) empty -> .

    VAR             reduce using rule 118 (empty -> .)
    FUNC            reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)

    pn_end_func                    shift and go to state 232
    empty                          shift and go to state 233

state 211

    (114) func_return -> RETURN all_logical . SEMICOLON

    SEMICOLON       shift and go to state 234


state 212

    (115) func_return -> RETURN SEMICOLON .

    RIGHT_CURLYB    reduce using rule 115 (func_return -> RETURN SEMICOLON .)


state 213

    (57) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .

    MULTIPLICATION  reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    DIVISION        reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    PLUS            reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    MINUS           reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    GREATER_THAN    reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    LESS_THAN       reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    EQUAL_COMPARE   reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    NOT_EQUAL       reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    AND             reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    OR              reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    RIGHT_PARENTHESIS reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    MORE            reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    SEMICOLON       reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    RIGHT_BRACKET   reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    COMMA           reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    LEFT_PARENTHESIS reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_BOOL      reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_STRING    reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CALL            reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_INT       reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_FLOAT     reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    ID              reduce using rule 57 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)


state 214

    (70) pn_close_parenthesis -> empty .

    MULTIPLICATION  reduce using rule 70 (pn_close_parenthesis -> empty .)
    DIVISION        reduce using rule 70 (pn_close_parenthesis -> empty .)
    PLUS            reduce using rule 70 (pn_close_parenthesis -> empty .)
    MINUS           reduce using rule 70 (pn_close_parenthesis -> empty .)
    GREATER_THAN    reduce using rule 70 (pn_close_parenthesis -> empty .)
    LESS_THAN       reduce using rule 70 (pn_close_parenthesis -> empty .)
    EQUAL_COMPARE   reduce using rule 70 (pn_close_parenthesis -> empty .)
    NOT_EQUAL       reduce using rule 70 (pn_close_parenthesis -> empty .)
    AND             reduce using rule 70 (pn_close_parenthesis -> empty .)
    OR              reduce using rule 70 (pn_close_parenthesis -> empty .)
    RIGHT_PARENTHESIS reduce using rule 70 (pn_close_parenthesis -> empty .)
    MORE            reduce using rule 70 (pn_close_parenthesis -> empty .)
    SEMICOLON       reduce using rule 70 (pn_close_parenthesis -> empty .)
    RIGHT_BRACKET   reduce using rule 70 (pn_close_parenthesis -> empty .)
    COMMA           reduce using rule 70 (pn_close_parenthesis -> empty .)
    LEFT_PARENTHESIS reduce using rule 70 (pn_close_parenthesis -> empty .)
    CONST_BOOL      reduce using rule 70 (pn_close_parenthesis -> empty .)
    CONST_STRING    reduce using rule 70 (pn_close_parenthesis -> empty .)
    CALL            reduce using rule 70 (pn_close_parenthesis -> empty .)
    CONST_INT       reduce using rule 70 (pn_close_parenthesis -> empty .)
    CONST_FLOAT     reduce using rule 70 (pn_close_parenthesis -> empty .)
    ID              reduce using rule 70 (pn_close_parenthesis -> empty .)


state 215

    (82) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec . RIGHT_CURLYB condicional_else

    RIGHT_CURLYB    shift and go to state 235


state 216

    (35) all_logical_rec -> AND pn_operator logical_exp . pn_all_logical all_logical_rec
    (38) pn_all_logical -> . empty
    (118) empty -> .

    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_all_logical                 shift and go to state 236
    empty                          shift and go to state 134

state 217

    (36) all_logical_rec -> OR pn_operator logical_exp . pn_all_logical all_logical_rec
    (38) pn_all_logical -> . empty
    (118) empty -> .

    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_all_logical                 shift and go to state 237
    empty                          shift and go to state 134

state 218

    (40) logical_exp_rec -> GREATER_THAN pn_operator exp . pn_logical_exp logical_exp_rec
    (45) pn_logical_exp -> . empty
    (118) empty -> .

    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_logical_exp                 shift and go to state 238
    empty                          shift and go to state 136

state 219

    (41) logical_exp_rec -> LESS_THAN pn_operator exp . pn_logical_exp logical_exp_rec
    (45) pn_logical_exp -> . empty
    (118) empty -> .

    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_logical_exp                 shift and go to state 239
    empty                          shift and go to state 136

state 220

    (42) logical_exp_rec -> EQUAL_COMPARE pn_operator exp . pn_logical_exp logical_exp_rec
    (45) pn_logical_exp -> . empty
    (118) empty -> .

    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_logical_exp                 shift and go to state 240
    empty                          shift and go to state 136

state 221

    (43) logical_exp_rec -> NOT_EQUAL pn_operator exp . pn_logical_exp logical_exp_rec
    (45) pn_logical_exp -> . empty
    (118) empty -> .

    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_logical_exp                 shift and go to state 241
    empty                          shift and go to state 136

state 222

    (48) exp_rec -> PLUS pn_operator termino . pn_exp exp_rec
    (47) pn_exp -> . empty
    (118) empty -> .

    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_exp                         shift and go to state 242
    empty                          shift and go to state 138

state 223

    (49) exp_rec -> MINUS pn_operator termino . pn_exp exp_rec
    (47) pn_exp -> . empty
    (118) empty -> .

    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_exp                         shift and go to state 243
    empty                          shift and go to state 138

state 224

    (52) termino_rec -> MULTIPLICATION pn_operator factor . pn_termino termino_rec
    (55) pn_termino -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_termino                     shift and go to state 244
    empty                          shift and go to state 140

state 225

    (53) termino_rec -> DIVISION pn_operator factor . pn_termino termino_rec
    (55) pn_termino -> . empty
    (118) empty -> .

    MULTIPLICATION  reduce using rule 118 (empty -> .)
    DIVISION        reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_termino                     shift and go to state 245
    empty                          shift and go to state 140

state 226

    (88) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .

    IF              reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    WHILE           reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    READ            reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    WRITE           reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    CALL            reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    ID              reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    RIGHT_CURLYB    reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    RETURN          reduce using rule 88 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)


state 227

    (89) while_loop -> LEFT_CURLYB . bloque_rec RIGHT_CURLYB pn_while_jump1
    (116) bloque_rec -> . bloque bloque_rec
    (117) bloque_rec -> . empty
    (25) bloque -> . asignacion
    (26) bloque -> . condicional
    (27) bloque -> . while
    (28) bloque -> . read
    (29) bloque -> . write
    (30) bloque -> . func_call SEMICOLON
    (118) empty -> .
    (31) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (82) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (94) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    CALL            shift and go to state 80
    ID              shift and go to state 81

    bloque_rec                     shift and go to state 246
    bloque                         shift and go to state 67
    empty                          shift and go to state 68
    asignacion                     shift and go to state 69
    condicional                    shift and go to state 70
    while                          shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    func_call                      shift and go to state 74
    var                            shift and go to state 75

state 228

    (96) write_rec1 -> MORE all_logical pn_write_quad . write_rec1
    (96) write_rec1 -> . MORE all_logical pn_write_quad write_rec1
    (97) write_rec1 -> . empty
    (118) empty -> .

    MORE            shift and go to state 184
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    write_rec1                     shift and go to state 247
    empty                          shift and go to state 185

state 229

    (99) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec . pn_close_parenthesis RIGHT_PARENTHESIS
    (70) pn_close_parenthesis -> . empty
    (118) empty -> .

    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_close_parenthesis           shift and go to state 248
    empty                          shift and go to state 214

state 230

    (102) func_call_rec -> all_logical . pn_param_match func_call_rec1
    (105) pn_param_match -> . empty
    (118) empty -> .

    COMMA           reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    pn_param_match                 shift and go to state 249
    empty                          shift and go to state 250

state 231

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .

    EQUAL_ASSIGN    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    MULTIPLICATION  reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    DIVISION        reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    PLUS            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    MINUS           reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    EQUAL_COMPARE   reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    AND             reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    OR              reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    MORE            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    COMMA           reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_BOOL      reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_STRING    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CALL            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_INT       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_FLOAT     reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    ID              reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)


state 232

    (106) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .

    VAR             reduce using rule 106 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    FUNC            reduce using rule 106 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    MAIN            reduce using rule 106 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)


state 233

    (111) pn_end_func -> empty .

    VAR             reduce using rule 111 (pn_end_func -> empty .)
    FUNC            reduce using rule 111 (pn_end_func -> empty .)
    MAIN            reduce using rule 111 (pn_end_func -> empty .)


state 234

    (114) func_return -> RETURN all_logical SEMICOLON .

    RIGHT_CURLYB    reduce using rule 114 (func_return -> RETURN all_logical SEMICOLON .)


state 235

    (82) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB . condicional_else
    (83) condicional_else -> . ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
    (84) condicional_else -> . pn_condicional_final
    (87) pn_condicional_final -> . empty
    (118) empty -> .

    ELSE            shift and go to state 252
    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)

    condicional_else               shift and go to state 251
    pn_condicional_final           shift and go to state 253
    empty                          shift and go to state 254

state 236

    (35) all_logical_rec -> AND pn_operator logical_exp pn_all_logical . all_logical_rec
    (35) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (36) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (37) all_logical_rec -> . empty
    (118) empty -> .

    AND             shift and go to state 162
    OR              shift and go to state 163
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    all_logical_rec                shift and go to state 255
    empty                          shift and go to state 164

state 237

    (36) all_logical_rec -> OR pn_operator logical_exp pn_all_logical . all_logical_rec
    (35) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (36) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (37) all_logical_rec -> . empty
    (118) empty -> .

    AND             shift and go to state 162
    OR              shift and go to state 163
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    all_logical_rec                shift and go to state 256
    empty                          shift and go to state 164

state 238

    (40) logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp . logical_exp_rec
    (40) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (41) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (42) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (43) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . empty
    (118) empty -> .

    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    EQUAL_COMPARE   shift and go to state 168
    NOT_EQUAL       shift and go to state 169
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    logical_exp_rec                shift and go to state 257
    empty                          shift and go to state 170

state 239

    (41) logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp . logical_exp_rec
    (40) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (41) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (42) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (43) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . empty
    (118) empty -> .

    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    EQUAL_COMPARE   shift and go to state 168
    NOT_EQUAL       shift and go to state 169
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    logical_exp_rec                shift and go to state 258
    empty                          shift and go to state 170

state 240

    (42) logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp . logical_exp_rec
    (40) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (41) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (42) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (43) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . empty
    (118) empty -> .

    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    EQUAL_COMPARE   shift and go to state 168
    NOT_EQUAL       shift and go to state 169
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    logical_exp_rec                shift and go to state 259
    empty                          shift and go to state 170

state 241

    (43) logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp . logical_exp_rec
    (40) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (41) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (42) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (43) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . empty
    (118) empty -> .

    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    EQUAL_COMPARE   shift and go to state 168
    NOT_EQUAL       shift and go to state 169
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    logical_exp_rec                shift and go to state 260
    empty                          shift and go to state 170

state 242

    (48) exp_rec -> PLUS pn_operator termino pn_exp . exp_rec
    (48) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (49) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (50) exp_rec -> . empty
    (118) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

  ! MINUS           [ reduce using rule 118 (empty -> .) ]

    exp_rec                        shift and go to state 261
    empty                          shift and go to state 174

state 243

    (49) exp_rec -> MINUS pn_operator termino pn_exp . exp_rec
    (48) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (49) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (50) exp_rec -> . empty
    (118) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

  ! MINUS           [ reduce using rule 118 (empty -> .) ]

    exp_rec                        shift and go to state 262
    empty                          shift and go to state 174

state 244

    (52) termino_rec -> MULTIPLICATION pn_operator factor pn_termino . termino_rec
    (52) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (53) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (54) termino_rec -> . empty
    (118) empty -> .

    MULTIPLICATION  shift and go to state 176
    DIVISION        shift and go to state 177
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    termino_rec                    shift and go to state 263
    empty                          shift and go to state 178

state 245

    (53) termino_rec -> DIVISION pn_operator factor pn_termino . termino_rec
    (52) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (53) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (54) termino_rec -> . empty
    (118) empty -> .

    MULTIPLICATION  shift and go to state 176
    DIVISION        shift and go to state 177
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    GREATER_THAN    reduce using rule 118 (empty -> .)
    LESS_THAN       reduce using rule 118 (empty -> .)
    EQUAL_COMPARE   reduce using rule 118 (empty -> .)
    NOT_EQUAL       reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)
    MORE            reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RIGHT_BRACKET   reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    termino_rec                    shift and go to state 264
    empty                          shift and go to state 178

state 246

    (89) while_loop -> LEFT_CURLYB bloque_rec . RIGHT_CURLYB pn_while_jump1

    RIGHT_CURLYB    shift and go to state 265


state 247

    (96) write_rec1 -> MORE all_logical pn_write_quad write_rec1 .

    RIGHT_PARENTHESIS reduce using rule 96 (write_rec1 -> MORE all_logical pn_write_quad write_rec1 .)


state 248

    (99) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 266


state 249

    (102) func_call_rec -> all_logical pn_param_match . func_call_rec1
    (103) func_call_rec1 -> . COMMA all_logical pn_param_match func_call_rec
    (104) func_call_rec1 -> . empty
    (118) empty -> .

    COMMA           shift and go to state 268
    RIGHT_PARENTHESIS reduce using rule 118 (empty -> .)

    func_call_rec1                 shift and go to state 267
    empty                          shift and go to state 269

state 250

    (105) pn_param_match -> empty .

    COMMA           reduce using rule 105 (pn_param_match -> empty .)
    RIGHT_PARENTHESIS reduce using rule 105 (pn_param_match -> empty .)
    LEFT_PARENTHESIS reduce using rule 105 (pn_param_match -> empty .)
    CONST_BOOL      reduce using rule 105 (pn_param_match -> empty .)
    CONST_STRING    reduce using rule 105 (pn_param_match -> empty .)
    CALL            reduce using rule 105 (pn_param_match -> empty .)
    CONST_INT       reduce using rule 105 (pn_param_match -> empty .)
    MINUS           reduce using rule 105 (pn_param_match -> empty .)
    CONST_FLOAT     reduce using rule 105 (pn_param_match -> empty .)
    ID              reduce using rule 105 (pn_param_match -> empty .)


state 251

    (82) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .

    IF              reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    WHILE           reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    READ            reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    WRITE           reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    CALL            reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    ID              reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    RIGHT_CURLYB    reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    RETURN          reduce using rule 82 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)


state 252

    (83) condicional_else -> ELSE . pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
    (86) pn_condicional_else -> . empty
    (118) empty -> .

    LEFT_CURLYB     reduce using rule 118 (empty -> .)

    pn_condicional_else            shift and go to state 270
    empty                          shift and go to state 271

state 253

    (84) condicional_else -> pn_condicional_final .

    IF              reduce using rule 84 (condicional_else -> pn_condicional_final .)
    WHILE           reduce using rule 84 (condicional_else -> pn_condicional_final .)
    READ            reduce using rule 84 (condicional_else -> pn_condicional_final .)
    WRITE           reduce using rule 84 (condicional_else -> pn_condicional_final .)
    CALL            reduce using rule 84 (condicional_else -> pn_condicional_final .)
    ID              reduce using rule 84 (condicional_else -> pn_condicional_final .)
    RIGHT_CURLYB    reduce using rule 84 (condicional_else -> pn_condicional_final .)
    RETURN          reduce using rule 84 (condicional_else -> pn_condicional_final .)


state 254

    (87) pn_condicional_final -> empty .

    IF              reduce using rule 87 (pn_condicional_final -> empty .)
    WHILE           reduce using rule 87 (pn_condicional_final -> empty .)
    READ            reduce using rule 87 (pn_condicional_final -> empty .)
    WRITE           reduce using rule 87 (pn_condicional_final -> empty .)
    CALL            reduce using rule 87 (pn_condicional_final -> empty .)
    ID              reduce using rule 87 (pn_condicional_final -> empty .)
    RIGHT_CURLYB    reduce using rule 87 (pn_condicional_final -> empty .)
    RETURN          reduce using rule 87 (pn_condicional_final -> empty .)


state 255

    (35) all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    LEFT_PARENTHESIS reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_BOOL      reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_STRING    reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CALL            reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_INT       reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    MINUS           reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_FLOAT     reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    ID              reduce using rule 35 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)


state 256

    (36) all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    LEFT_PARENTHESIS reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_BOOL      reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_STRING    reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CALL            reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_INT       reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    MINUS           reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_FLOAT     reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    ID              reduce using rule 36 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)


state 257

    (40) logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 40 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)


state 258

    (41) logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 41 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)


state 259

    (42) logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 42 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)


state 260

    (43) logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 43 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)


state 261

    (48) exp_rec -> PLUS pn_operator termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    AND             reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    OR              reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    MORE            reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    COMMA           reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    LEFT_PARENTHESIS reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_BOOL      reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_STRING    reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CALL            reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_INT       reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    MINUS           reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_FLOAT     reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    ID              reduce using rule 48 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)


state 262

    (49) exp_rec -> MINUS pn_operator termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    AND             reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    OR              reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    MORE            reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    COMMA           reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    LEFT_PARENTHESIS reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_BOOL      reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_STRING    reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CALL            reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_INT       reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    MINUS           reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_FLOAT     reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    ID              reduce using rule 49 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)


state 263

    (52) termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .

    PLUS            reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    MINUS           reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    AND             reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    OR              reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    MORE            reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    COMMA           reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    LEFT_PARENTHESIS reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_BOOL      reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_STRING    reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CALL            reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_INT       reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_FLOAT     reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    ID              reduce using rule 52 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)


state 264

    (53) termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .

    PLUS            reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    MINUS           reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    AND             reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    OR              reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    MORE            reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    COMMA           reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    LEFT_PARENTHESIS reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_BOOL      reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_STRING    reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CALL            reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_INT       reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_FLOAT     reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    ID              reduce using rule 53 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)


state 265

    (89) while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB . pn_while_jump1
    (92) pn_while_jump1 -> . empty
    (118) empty -> .

    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)

    pn_while_jump1                 shift and go to state 272
    empty                          shift and go to state 273

state 266

    (99) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MULTIPLICATION  reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    DIVISION        reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    EQUAL_COMPARE   reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    AND             reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    OR              reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MORE            reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_BOOL      reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_STRING    reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CALL            reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_INT       reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_FLOAT     reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    ID              reduce using rule 99 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)


state 267

    (102) func_call_rec -> all_logical pn_param_match func_call_rec1 .

    RIGHT_PARENTHESIS reduce using rule 102 (func_call_rec -> all_logical pn_param_match func_call_rec1 .)


state 268

    (103) func_call_rec1 -> COMMA . all_logical pn_param_match func_call_rec
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 274
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 269

    (104) func_call_rec1 -> empty .

    RIGHT_PARENTHESIS reduce using rule 104 (func_call_rec1 -> empty .)


state 270

    (83) condicional_else -> ELSE pn_condicional_else . LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final

    LEFT_CURLYB     shift and go to state 275


state 271

    (86) pn_condicional_else -> empty .

    LEFT_CURLYB     reduce using rule 86 (pn_condicional_else -> empty .)


state 272

    (89) while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .

    IF              reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    WHILE           reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    READ            reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    WRITE           reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    CALL            reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    ID              reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    RIGHT_CURLYB    reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    RETURN          reduce using rule 89 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)


state 273

    (92) pn_while_jump1 -> empty .

    IF              reduce using rule 92 (pn_while_jump1 -> empty .)
    WHILE           reduce using rule 92 (pn_while_jump1 -> empty .)
    READ            reduce using rule 92 (pn_while_jump1 -> empty .)
    WRITE           reduce using rule 92 (pn_while_jump1 -> empty .)
    CALL            reduce using rule 92 (pn_while_jump1 -> empty .)
    ID              reduce using rule 92 (pn_while_jump1 -> empty .)
    RIGHT_CURLYB    reduce using rule 92 (pn_while_jump1 -> empty .)
    RETURN          reduce using rule 92 (pn_while_jump1 -> empty .)


state 274

    (103) func_call_rec1 -> COMMA all_logical . pn_param_match func_call_rec
    (105) pn_param_match -> . empty
    (118) empty -> .

    LEFT_PARENTHESIS reduce using rule 118 (empty -> .)
    CONST_BOOL      reduce using rule 118 (empty -> .)
    CONST_STRING    reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    CONST_INT       reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    CONST_FLOAT     reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)

    pn_param_match                 shift and go to state 276
    empty                          shift and go to state 250

state 275

    (83) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB . bloque_rec RIGHT_CURLYB pn_condicional_final
    (116) bloque_rec -> . bloque bloque_rec
    (117) bloque_rec -> . empty
    (25) bloque -> . asignacion
    (26) bloque -> . condicional
    (27) bloque -> . while
    (28) bloque -> . read
    (29) bloque -> . write
    (30) bloque -> . func_call SEMICOLON
    (118) empty -> .
    (31) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (82) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (94) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    IF              shift and go to state 76
    WHILE           shift and go to state 77
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    CALL            shift and go to state 80
    ID              shift and go to state 81

    bloque_rec                     shift and go to state 277
    bloque                         shift and go to state 67
    empty                          shift and go to state 68
    asignacion                     shift and go to state 69
    condicional                    shift and go to state 70
    while                          shift and go to state 71
    read                           shift and go to state 72
    write                          shift and go to state 73
    func_call                      shift and go to state 74
    var                            shift and go to state 75

state 276

    (103) func_call_rec1 -> COMMA all_logical pn_param_match . func_call_rec
    (102) func_call_rec -> . all_logical pn_param_match func_call_rec1
    (34) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (39) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (46) exp -> . termino pn_exp exp_rec
    (51) termino -> . factor pn_termino termino_rec
    (56) factor -> . varcte
    (57) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (58) factor -> . func_call
    (59) varcte -> . cte_int pn_add_constant
    (60) varcte -> . cte_float pn_add_constant
    (61) varcte -> . CONST_BOOL pn_add_constant
    (62) varcte -> . CONST_STRING empty empty
    (63) varcte -> . var
    (99) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (64) cte_int -> . CONST_INT
    (65) cte_int -> . MINUS CONST_INT
    (66) cte_float -> . CONST_FLOAT
    (67) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 103
    CONST_BOOL      shift and go to state 113
    CONST_STRING    shift and go to state 114
    CALL            shift and go to state 80
    CONST_INT       shift and go to state 116
    MINUS           shift and go to state 117
    CONST_FLOAT     shift and go to state 118
    ID              shift and go to state 81

    all_logical                    shift and go to state 230
    func_call_rec                  shift and go to state 278
    logical_exp                    shift and go to state 105
    exp                            shift and go to state 106
    termino                        shift and go to state 107
    factor                         shift and go to state 108
    varcte                         shift and go to state 109
    func_call                      shift and go to state 110
    cte_int                        shift and go to state 111
    cte_float                      shift and go to state 112
    var                            shift and go to state 115

state 277

    (83) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec . RIGHT_CURLYB pn_condicional_final

    RIGHT_CURLYB    shift and go to state 279


state 278

    (103) func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec .

    RIGHT_PARENTHESIS reduce using rule 103 (func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec .)


state 279

    (83) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB . pn_condicional_final
    (87) pn_condicional_final -> . empty
    (118) empty -> .

    IF              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    CALL            reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    RIGHT_CURLYB    reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)

    pn_condicional_final           shift and go to state 280
    empty                          shift and go to state 254

state 280

    (83) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .

    IF              reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    WHILE           reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    READ            reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    WRITE           reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    CALL            reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    ID              reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    RIGHT_CURLYB    reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    RETURN          reduce using rule 83 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 8 resolved as shift
WARNING: shift/reduce conflict for VAR in state 11 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 11 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 242 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 243 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (init_dec -> empty)
WARNING: rejected rule (class_dec -> empty) in state 10
