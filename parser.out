Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTRIBUTES
    CHAR
    CLASS
    COLON
    CONST_CHAR
    DEF
    DO
    ELSEIF
    GREATER_EQUAL
    LESS_EQUAL
    METHODS
    MOREBOOL
    NEGATION
    NUMBER
    PERIOD

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main
Rule 2     main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
Rule 3     vars_rec -> var_dec vars_rec
Rule 4     vars_rec -> empty
Rule 5     pn_internal_scope -> empty
Rule 6     pn_start_program -> empty
Rule 7     pn_start_func -> empty
Rule 8     init_dec -> empty
Rule 9     init_dec -> dec init_dec
Rule 10    dec -> var_dec
Rule 11    dec -> func_dec
Rule 12    dec -> class_dec
Rule 13    class_dec -> empty
Rule 14    var -> ID varArray
Rule 15    varArray -> empty
Rule 16    varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET
Rule 17    pn_array_access1 -> empty
Rule 18    pn_array_access2 -> empty
Rule 19    pn_array_access3 -> empty
Rule 20    var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
Rule 21    var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
Rule 22    pn_add_dim_list -> empty
Rule 23    pn_add_dim -> empty
Rule 24    pn_var_type -> empty
Rule 25    pn_value_type -> empty
Rule 26    pn_current_name -> empty
Rule 27    pn_add_variable -> empty
Rule 28    bloque -> asignacion
Rule 29    bloque -> condicional
Rule 30    bloque -> while
Rule 31    bloque -> read
Rule 32    bloque -> write
Rule 33    bloque -> func_call SEMICOLON
Rule 34    asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
Rule 35    pn_var_assign -> empty
Rule 36    pn_operator -> empty
Rule 37    all_logical -> logical_exp pn_all_logical all_logical_rec
Rule 38    all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec
Rule 39    all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec
Rule 40    all_logical_rec -> empty
Rule 41    pn_all_logical -> empty
Rule 42    logical_exp -> exp pn_logical_exp logical_exp_rec
Rule 43    logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
Rule 44    logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
Rule 45    logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
Rule 46    logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
Rule 47    logical_exp_rec -> empty
Rule 48    pn_logical_exp -> empty
Rule 49    exp -> termino pn_exp exp_rec
Rule 50    pn_exp -> empty
Rule 51    exp_rec -> PLUS pn_operator termino pn_exp exp_rec
Rule 52    exp_rec -> MINUS pn_operator termino pn_exp exp_rec
Rule 53    exp_rec -> empty
Rule 54    termino -> factor pn_termino termino_rec
Rule 55    termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec
Rule 56    termino_rec -> DIVISION pn_operator factor pn_termino termino_rec
Rule 57    termino_rec -> empty
Rule 58    pn_termino -> empty
Rule 59    factor -> varcte
Rule 60    factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
Rule 61    factor -> func_call
Rule 62    varcte -> cte_int pn_add_constant
Rule 63    varcte -> cte_float pn_add_constant
Rule 64    varcte -> CONST_BOOL pn_add_constant
Rule 65    varcte -> CONST_STRING empty empty
Rule 66    varcte -> var
Rule 67    cte_int -> CONST_INT
Rule 68    cte_int -> MINUS CONST_INT
Rule 69    cte_float -> CONST_FLOAT
Rule 70    cte_float -> MINUS CONST_FLOAT
Rule 71    pn_add_constant -> empty
Rule 72    pn_open_parenthesis -> empty
Rule 73    pn_close_parenthesis -> empty
Rule 74    tipo -> INT
Rule 75    tipo -> FLOAT
Rule 76    tipo -> BOOL
Rule 77    tipo -> STRING
Rule 78    return_module -> tipo
Rule 79    return_module -> VOID
Rule 80    parametro -> tipo ID parametro_rec
Rule 81    parametro -> empty
Rule 82    parametro_rec -> COMMA tipo ID parametro_rec
Rule 83    parametro_rec -> empty
Rule 84    pn_parametro_varTable -> empty
Rule 85    condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
Rule 86    condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
Rule 87    condicional_else -> pn_condicional_final
Rule 88    pn_condicional -> empty
Rule 89    pn_condicional_else -> empty
Rule 90    pn_condicional_final -> empty
Rule 91    while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
Rule 92    while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1
Rule 93    pn_while -> empty
Rule 94    pn_while_jump -> empty
Rule 95    pn_while_jump1 -> empty
Rule 96    read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
Rule 97    write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
Rule 98    write_rec -> all_logical pn_write_quad write_rec1
Rule 99    write_rec1 -> MORE all_logical pn_write_quad write_rec1
Rule 100   write_rec1 -> empty
Rule 101   pn_write_quad -> empty
Rule 102   func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
Rule 103   pn_verify_func -> empty
Rule 104   pn_param_counter -> empty
Rule 105   func_call_rec -> all_logical pn_param_match func_call_rec1
Rule 106   func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec
Rule 107   func_call_rec1 -> empty
Rule 108   pn_param_match -> empty
Rule 109   func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
Rule 110   pn_add_param_vartable -> empty
Rule 111   pn_gen_vartable -> empty
Rule 112   pn_func_quad -> empty
Rule 113   pn_end_main -> empty
Rule 114   pn_end_func -> empty
Rule 115   pn_add_func -> empty
Rule 116   pn_return_type -> empty
Rule 117   func_return -> RETURN all_logical SEMICOLON
Rule 118   func_return -> RETURN SEMICOLON
Rule 119   bloque_rec -> bloque bloque_rec
Rule 120   bloque_rec -> empty
Rule 121   empty -> <empty>

Terminals, with rules where they appear

AND                  : 38
ATTRIBUTES           : 
BOOL                 : 76
CALL                 : 102
CHAR                 : 
CLASS                : 
COLON                : 
COMMA                : 82 106
CONST_BOOL           : 64
CONST_CHAR           : 
CONST_FLOAT          : 69 70
CONST_INT            : 67 68
CONST_STRING         : 65
DEF                  : 
DIVISION             : 56
DO                   : 
ELSE                 : 86
ELSEIF               : 
EQUAL_ASSIGN         : 34
EQUAL_COMPARE        : 45
FLOAT                : 75
FUNC                 : 109
GREATER_EQUAL        : 
GREATER_THAN         : 43
ID                   : 1 14 20 21 80 82 102 109
IF                   : 85
INT                  : 74
LEFT_BRACKET         : 16 21
LEFT_CURLYB          : 2 85 86 92 109
LEFT_PARENTHESIS     : 2 60 85 91 96 97 102 109
LESS_EQUAL           : 
LESS_THAN            : 44
LIST                 : 21
MAIN                 : 2
METHODS              : 
MINUS                : 52 68 70
MORE                 : 99
MOREBOOL             : 
MULTIPLICATION       : 55
NEGATION             : 
NOT_EQUAL            : 46
NUMBER               : 
OR                   : 39
PERIOD               : 
PLUS                 : 51
PROGRAM              : 1
READ                 : 96
RETURN               : 117 118
RIGHT_BRACKET        : 16 21
RIGHT_CURLYB         : 2 85 86 92 109
RIGHT_PARENTHESIS    : 2 60 85 91 96 97 102 109
SEMICOLON            : 1 20 21 33 34 96 97 117 118
STRING               : 77
VAR                  : 20
VOID                 : 79
WHILE                : 91
WRITE                : 97
error                : 

Nonterminals, with rules where they appear

all_logical          : 16 34 60 85 91 98 99 105 106 117
all_logical_rec      : 37 38 39
asignacion           : 28
bloque               : 119
bloque_rec           : 2 85 86 92 109 119
class_dec            : 12
condicional          : 29
condicional_else     : 85
cte_float            : 63
cte_int              : 21 62
dec                  : 9
empty                : 4 5 6 7 8 13 15 17 18 19 22 23 24 25 26 27 35 36 40 41 47 48 50 53 57 58 65 65 71 72 73 81 83 84 88 89 90 93 94 95 100 101 103 104 107 108 110 111 112 113 114 115 116 120
exp                  : 42 43 44 45 46
exp_rec              : 49 51 52
factor               : 54 55 56
func_call            : 33 61
func_call_rec        : 102 106
func_call_rec1       : 105
func_dec             : 11
func_return          : 109
init_dec             : 1 9
logical_exp          : 37 38 39
logical_exp_rec      : 42 43 44 45 46
main                 : 1
parametro            : 109
parametro_rec        : 80 82
pn_add_constant      : 62 63 64
pn_add_dim           : 21
pn_add_dim_list      : 21
pn_add_func          : 109
pn_add_param_vartable : 109
pn_add_variable      : 20 21
pn_all_logical       : 37 38 39
pn_array_access1     : 16
pn_array_access2     : 16
pn_array_access3     : 16
pn_close_parenthesis : 60 102
pn_condicional       : 85
pn_condicional_else  : 86
pn_condicional_final : 86 87
pn_current_name      : 20 21
pn_end_func          : 109
pn_end_main          : 2
pn_exp               : 49 51 52
pn_func_quad         : 109
pn_gen_vartable      : 2 109
pn_internal_scope    : 2
pn_logical_exp       : 42 43 44 45 46
pn_open_parenthesis  : 60 102
pn_operator          : 38 39 43 44 45 46 51 52 55 56
pn_param_counter     : 102
pn_param_match       : 105 106
pn_parametro_varTable : 
pn_return_type       : 109
pn_start_func        : 1 2
pn_start_program     : 1
pn_termino           : 54 55 56
pn_value_type        : 20 21
pn_var_assign        : 34
pn_var_type          : 20 21
pn_verify_func       : 102
pn_while             : 91
pn_while_jump        : 91
pn_while_jump1       : 92
pn_write_quad        : 98 99
program              : 0
read                 : 31
return_module        : 109
termino              : 49 51 52
termino_rec          : 54 55 56
tipo                 : 20 21 78 80 82
var                  : 34 66 96
varArray             : 14
var_dec              : 3 10
varcte               : 59
vars_rec             : 2 3
while                : 30
while_loop           : 91
write                : 32
write_rec            : 97
write_rec1           : 98 99

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . pn_start_program pn_start_func ID SEMICOLON init_dec main
    (6) pn_start_program -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_start_program               shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM pn_start_program . pn_start_func ID SEMICOLON init_dec main
    (7) pn_start_func -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_start_func                  shift and go to state 5
    empty                          shift and go to state 6

state 4

    (6) pn_start_program -> empty .

    ID              reduce using rule 6 (pn_start_program -> empty .)


state 5

    (1) program -> PROGRAM pn_start_program pn_start_func . ID SEMICOLON init_dec main

    ID              shift and go to state 7


state 6

    (7) pn_start_func -> empty .

    ID              reduce using rule 7 (pn_start_func -> empty .)
    IF              reduce using rule 7 (pn_start_func -> empty .)
    WHILE           reduce using rule 7 (pn_start_func -> empty .)
    READ            reduce using rule 7 (pn_start_func -> empty .)
    WRITE           reduce using rule 7 (pn_start_func -> empty .)
    CALL            reduce using rule 7 (pn_start_func -> empty .)
    RIGHT_CURLYB    reduce using rule 7 (pn_start_func -> empty .)


state 7

    (1) program -> PROGRAM pn_start_program pn_start_func ID . SEMICOLON init_dec main

    SEMICOLON       shift and go to state 8


state 8

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON . init_dec main
    (8) init_dec -> . empty
    (9) init_dec -> . dec init_dec
    (121) empty -> .
    (10) dec -> . var_dec
    (11) dec -> . func_dec
    (12) dec -> . class_dec
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (21) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (109) func_dec -> . FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (13) class_dec -> . empty

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    MAIN            reduce using rule 121 (empty -> .)
    VAR             shift and go to state 15
    LIST            shift and go to state 16
    FUNC            shift and go to state 17

  ! VAR             [ reduce using rule 121 (empty -> .) ]
  ! LIST            [ reduce using rule 121 (empty -> .) ]
  ! FUNC            [ reduce using rule 121 (empty -> .) ]

    init_dec                       shift and go to state 9
    empty                          shift and go to state 10
    dec                            shift and go to state 11
    var_dec                        shift and go to state 12
    func_dec                       shift and go to state 13
    class_dec                      shift and go to state 14

state 9

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec . main
    (2) main -> . MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 10

    (8) init_dec -> empty .
    (13) class_dec -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 8 (init_dec -> empty .)
    MAIN            reduce using rule 8 (init_dec -> empty .)
    VAR             reduce using rule 13 (class_dec -> empty .)
    LIST            reduce using rule 13 (class_dec -> empty .)
    FUNC            reduce using rule 13 (class_dec -> empty .)

  ! MAIN            [ reduce using rule 13 (class_dec -> empty .) ]


state 11

    (9) init_dec -> dec . init_dec
    (8) init_dec -> . empty
    (9) init_dec -> . dec init_dec
    (121) empty -> .
    (10) dec -> . var_dec
    (11) dec -> . func_dec
    (12) dec -> . class_dec
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (21) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (109) func_dec -> . FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (13) class_dec -> . empty

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    MAIN            reduce using rule 121 (empty -> .)
    VAR             shift and go to state 15
    LIST            shift and go to state 16
    FUNC            shift and go to state 17

  ! VAR             [ reduce using rule 121 (empty -> .) ]
  ! LIST            [ reduce using rule 121 (empty -> .) ]
  ! FUNC            [ reduce using rule 121 (empty -> .) ]

    dec                            shift and go to state 11
    init_dec                       shift and go to state 20
    empty                          shift and go to state 10
    var_dec                        shift and go to state 12
    func_dec                       shift and go to state 13
    class_dec                      shift and go to state 14

state 12

    (10) dec -> var_dec .

    VAR             reduce using rule 10 (dec -> var_dec .)
    LIST            reduce using rule 10 (dec -> var_dec .)
    FUNC            reduce using rule 10 (dec -> var_dec .)
    MAIN            reduce using rule 10 (dec -> var_dec .)


state 13

    (11) dec -> func_dec .

    VAR             reduce using rule 11 (dec -> func_dec .)
    LIST            reduce using rule 11 (dec -> func_dec .)
    FUNC            reduce using rule 11 (dec -> func_dec .)
    MAIN            reduce using rule 11 (dec -> func_dec .)


state 14

    (12) dec -> class_dec .

    VAR             reduce using rule 12 (dec -> class_dec .)
    LIST            reduce using rule 12 (dec -> class_dec .)
    FUNC            reduce using rule 12 (dec -> class_dec .)
    MAIN            reduce using rule 12 (dec -> class_dec .)


state 15

    (20) var_dec -> VAR . tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    tipo                           shift and go to state 21

state 16

    (21) var_dec -> LIST . tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    tipo                           shift and go to state 26

state 17

    (109) func_dec -> FUNC . return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (78) return_module -> . tipo
    (79) return_module -> . VOID
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING

    VOID            shift and go to state 29
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    return_module                  shift and go to state 27
    tipo                           shift and go to state 28

state 18

    (1) program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main .

    $end            reduce using rule 1 (program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main .)


state 19

    (2) main -> MAIN . pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (5) pn_internal_scope -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_internal_scope              shift and go to state 30
    empty                          shift and go to state 31

state 20

    (9) init_dec -> dec init_dec .

    MAIN            reduce using rule 9 (init_dec -> dec init_dec .)


state 21

    (20) var_dec -> VAR tipo . pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (24) pn_var_type -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_var_type                    shift and go to state 32
    empty                          shift and go to state 33

state 22

    (74) tipo -> INT .

    ID              reduce using rule 74 (tipo -> INT .)


state 23

    (75) tipo -> FLOAT .

    ID              reduce using rule 75 (tipo -> FLOAT .)


state 24

    (76) tipo -> BOOL .

    ID              reduce using rule 76 (tipo -> BOOL .)


state 25

    (77) tipo -> STRING .

    ID              reduce using rule 77 (tipo -> STRING .)


state 26

    (21) var_dec -> LIST tipo . pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (24) pn_var_type -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_var_type                    shift and go to state 34
    empty                          shift and go to state 33

state 27

    (109) func_dec -> FUNC return_module . pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (116) pn_return_type -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_return_type                 shift and go to state 35
    empty                          shift and go to state 36

state 28

    (78) return_module -> tipo .

    ID              reduce using rule 78 (return_module -> tipo .)


state 29

    (79) return_module -> VOID .

    ID              reduce using rule 79 (return_module -> VOID .)


state 30

    (2) main -> MAIN pn_internal_scope . LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    LEFT_PARENTHESIS shift and go to state 37


state 31

    (5) pn_internal_scope -> empty .

    LEFT_PARENTHESIS reduce using rule 5 (pn_internal_scope -> empty .)


state 32

    (20) var_dec -> VAR tipo pn_var_type . pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (25) pn_value_type -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_value_type                  shift and go to state 38
    empty                          shift and go to state 39

state 33

    (24) pn_var_type -> empty .

    ID              reduce using rule 24 (pn_var_type -> empty .)


state 34

    (21) var_dec -> LIST tipo pn_var_type . pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (25) pn_value_type -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    pn_value_type                  shift and go to state 40
    empty                          shift and go to state 39

state 35

    (109) func_dec -> FUNC return_module pn_return_type . ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    ID              shift and go to state 41


state 36

    (116) pn_return_type -> empty .

    ID              reduce using rule 116 (pn_return_type -> empty .)


state 37

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS . RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    RIGHT_PARENTHESIS shift and go to state 42


state 38

    (20) var_dec -> VAR tipo pn_var_type pn_value_type . ID pn_current_name SEMICOLON pn_add_variable

    ID              shift and go to state 43


state 39

    (25) pn_value_type -> empty .

    ID              reduce using rule 25 (pn_value_type -> empty .)


state 40

    (21) var_dec -> LIST tipo pn_var_type pn_value_type . ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON

    ID              shift and go to state 44


state 41

    (109) func_dec -> FUNC return_module pn_return_type ID . pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (115) pn_add_func -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_add_func                    shift and go to state 45
    empty                          shift and go to state 46

state 42

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS . LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main

    LEFT_CURLYB     shift and go to state 47


state 43

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID . pn_current_name SEMICOLON pn_add_variable
    (26) pn_current_name -> . empty
    (121) empty -> .

    SEMICOLON       reduce using rule 121 (empty -> .)

    pn_current_name                shift and go to state 48
    empty                          shift and go to state 49

state 44

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID . pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (26) pn_current_name -> . empty
    (121) empty -> .

    LEFT_BRACKET    reduce using rule 121 (empty -> .)

    pn_current_name                shift and go to state 50
    empty                          shift and go to state 49

state 45

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func . LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    LEFT_PARENTHESIS shift and go to state 51


state 46

    (115) pn_add_func -> empty .

    LEFT_PARENTHESIS reduce using rule 115 (pn_add_func -> empty .)


state 47

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB . vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (21) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (121) empty -> .

    VAR             shift and go to state 15
    LIST            shift and go to state 16
    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)

    vars_rec                       shift and go to state 52
    var_dec                        shift and go to state 53
    empty                          shift and go to state 54

state 48

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name . SEMICOLON pn_add_variable

    SEMICOLON       shift and go to state 55


state 49

    (26) pn_current_name -> empty .

    SEMICOLON       reduce using rule 26 (pn_current_name -> empty .)
    LEFT_BRACKET    reduce using rule 26 (pn_current_name -> empty .)


state 50

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name . pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (27) pn_add_variable -> . empty
    (121) empty -> .

    LEFT_BRACKET    reduce using rule 121 (empty -> .)

    pn_add_variable                shift and go to state 56
    empty                          shift and go to state 57

state 51

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS . parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (80) parametro -> . tipo ID parametro_rec
    (81) parametro -> . empty
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (121) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    parametro                      shift and go to state 58
    tipo                           shift and go to state 59
    empty                          shift and go to state 60

state 52

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec . pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (111) pn_gen_vartable -> . empty
    (121) empty -> .

    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)

    pn_gen_vartable                shift and go to state 61
    empty                          shift and go to state 62

state 53

    (3) vars_rec -> var_dec . vars_rec
    (3) vars_rec -> . var_dec vars_rec
    (4) vars_rec -> . empty
    (20) var_dec -> . VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable
    (21) var_dec -> . LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (121) empty -> .

    VAR             shift and go to state 15
    LIST            shift and go to state 16
    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)

    var_dec                        shift and go to state 53
    vars_rec                       shift and go to state 63
    empty                          shift and go to state 54

state 54

    (4) vars_rec -> empty .

    IF              reduce using rule 4 (vars_rec -> empty .)
    WHILE           reduce using rule 4 (vars_rec -> empty .)
    READ            reduce using rule 4 (vars_rec -> empty .)
    WRITE           reduce using rule 4 (vars_rec -> empty .)
    CALL            reduce using rule 4 (vars_rec -> empty .)
    ID              reduce using rule 4 (vars_rec -> empty .)
    RIGHT_CURLYB    reduce using rule 4 (vars_rec -> empty .)


state 55

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON . pn_add_variable
    (27) pn_add_variable -> . empty
    (121) empty -> .

    VAR             reduce using rule 121 (empty -> .)
    LIST            reduce using rule 121 (empty -> .)
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)

    pn_add_variable                shift and go to state 64
    empty                          shift and go to state 57

state 56

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable . LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON

    LEFT_BRACKET    shift and go to state 65


state 57

    (27) pn_add_variable -> empty .

    LEFT_BRACKET    reduce using rule 27 (pn_add_variable -> empty .)
    VAR             reduce using rule 27 (pn_add_variable -> empty .)
    LIST            reduce using rule 27 (pn_add_variable -> empty .)
    FUNC            reduce using rule 27 (pn_add_variable -> empty .)
    MAIN            reduce using rule 27 (pn_add_variable -> empty .)
    IF              reduce using rule 27 (pn_add_variable -> empty .)
    WHILE           reduce using rule 27 (pn_add_variable -> empty .)
    READ            reduce using rule 27 (pn_add_variable -> empty .)
    WRITE           reduce using rule 27 (pn_add_variable -> empty .)
    CALL            reduce using rule 27 (pn_add_variable -> empty .)
    ID              reduce using rule 27 (pn_add_variable -> empty .)
    RIGHT_CURLYB    reduce using rule 27 (pn_add_variable -> empty .)


state 58

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro . pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (110) pn_add_param_vartable -> . empty
    (121) empty -> .

    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_add_param_vartable          shift and go to state 66
    empty                          shift and go to state 67

state 59

    (80) parametro -> tipo . ID parametro_rec

    ID              shift and go to state 68


state 60

    (81) parametro -> empty .

    RIGHT_PARENTHESIS reduce using rule 81 (parametro -> empty .)


state 61

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable . pn_start_func bloque_rec RIGHT_CURLYB pn_end_main
    (7) pn_start_func -> . empty
    (121) empty -> .

    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)

    pn_start_func                  shift and go to state 69
    empty                          shift and go to state 6

state 62

    (111) pn_gen_vartable -> empty .

    IF              reduce using rule 111 (pn_gen_vartable -> empty .)
    WHILE           reduce using rule 111 (pn_gen_vartable -> empty .)
    READ            reduce using rule 111 (pn_gen_vartable -> empty .)
    WRITE           reduce using rule 111 (pn_gen_vartable -> empty .)
    CALL            reduce using rule 111 (pn_gen_vartable -> empty .)
    ID              reduce using rule 111 (pn_gen_vartable -> empty .)
    RIGHT_CURLYB    reduce using rule 111 (pn_gen_vartable -> empty .)
    RETURN          reduce using rule 111 (pn_gen_vartable -> empty .)


state 63

    (3) vars_rec -> var_dec vars_rec .

    IF              reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    WHILE           reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    READ            reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    WRITE           reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    CALL            reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    ID              reduce using rule 3 (vars_rec -> var_dec vars_rec .)
    RIGHT_CURLYB    reduce using rule 3 (vars_rec -> var_dec vars_rec .)


state 64

    (20) var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .

    VAR             reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    LIST            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    FUNC            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    MAIN            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    IF              reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    WHILE           reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    READ            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    WRITE           reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    CALL            reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    ID              reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)
    RIGHT_CURLYB    reduce using rule 20 (var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable .)


state 65

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET . pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (22) pn_add_dim_list -> . empty
    (121) empty -> .

    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)

    pn_add_dim_list                shift and go to state 70
    empty                          shift and go to state 71

state 66

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable . RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    RIGHT_PARENTHESIS shift and go to state 72


state 67

    (110) pn_add_param_vartable -> empty .

    RIGHT_PARENTHESIS reduce using rule 110 (pn_add_param_vartable -> empty .)


state 68

    (80) parametro -> tipo ID . parametro_rec
    (82) parametro_rec -> . COMMA tipo ID parametro_rec
    (83) parametro_rec -> . empty
    (121) empty -> .

    COMMA           shift and go to state 74
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    parametro_rec                  shift and go to state 73
    empty                          shift and go to state 75

state 69

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func . bloque_rec RIGHT_CURLYB pn_end_main
    (119) bloque_rec -> . bloque bloque_rec
    (120) bloque_rec -> . empty
    (28) bloque -> . asignacion
    (29) bloque -> . condicional
    (30) bloque -> . while
    (31) bloque -> . read
    (32) bloque -> . write
    (33) bloque -> . func_call SEMICOLON
    (121) empty -> .
    (34) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (97) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    CALL            shift and go to state 90
    ID              shift and go to state 91

    bloque_rec                     shift and go to state 76
    bloque                         shift and go to state 77
    empty                          shift and go to state 78
    asignacion                     shift and go to state 79
    condicional                    shift and go to state 80
    while                          shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    func_call                      shift and go to state 84
    var                            shift and go to state 85

state 70

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list . cte_int pn_add_dim RIGHT_BRACKET SEMICOLON
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT

    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 94

    cte_int                        shift and go to state 92

state 71

    (22) pn_add_dim_list -> empty .

    CONST_INT       reduce using rule 22 (pn_add_dim_list -> empty .)
    MINUS           reduce using rule 22 (pn_add_dim_list -> empty .)


state 72

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS . LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func

    LEFT_CURLYB     shift and go to state 95


state 73

    (80) parametro -> tipo ID parametro_rec .

    RIGHT_PARENTHESIS reduce using rule 80 (parametro -> tipo ID parametro_rec .)


state 74

    (82) parametro_rec -> COMMA . tipo ID parametro_rec
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    BOOL            shift and go to state 24
    STRING          shift and go to state 25

    tipo                           shift and go to state 96

state 75

    (83) parametro_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 83 (parametro_rec -> empty .)


state 76

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec . RIGHT_CURLYB pn_end_main

    RIGHT_CURLYB    shift and go to state 97


state 77

    (119) bloque_rec -> bloque . bloque_rec
    (119) bloque_rec -> . bloque bloque_rec
    (120) bloque_rec -> . empty
    (28) bloque -> . asignacion
    (29) bloque -> . condicional
    (30) bloque -> . while
    (31) bloque -> . read
    (32) bloque -> . write
    (33) bloque -> . func_call SEMICOLON
    (121) empty -> .
    (34) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (97) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    CALL            shift and go to state 90
    ID              shift and go to state 91

    bloque                         shift and go to state 77
    bloque_rec                     shift and go to state 98
    empty                          shift and go to state 78
    asignacion                     shift and go to state 79
    condicional                    shift and go to state 80
    while                          shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    func_call                      shift and go to state 84
    var                            shift and go to state 85

state 78

    (120) bloque_rec -> empty .

    RIGHT_CURLYB    reduce using rule 120 (bloque_rec -> empty .)
    RETURN          reduce using rule 120 (bloque_rec -> empty .)


state 79

    (28) bloque -> asignacion .

    IF              reduce using rule 28 (bloque -> asignacion .)
    WHILE           reduce using rule 28 (bloque -> asignacion .)
    READ            reduce using rule 28 (bloque -> asignacion .)
    WRITE           reduce using rule 28 (bloque -> asignacion .)
    CALL            reduce using rule 28 (bloque -> asignacion .)
    ID              reduce using rule 28 (bloque -> asignacion .)
    RIGHT_CURLYB    reduce using rule 28 (bloque -> asignacion .)
    RETURN          reduce using rule 28 (bloque -> asignacion .)


state 80

    (29) bloque -> condicional .

    IF              reduce using rule 29 (bloque -> condicional .)
    WHILE           reduce using rule 29 (bloque -> condicional .)
    READ            reduce using rule 29 (bloque -> condicional .)
    WRITE           reduce using rule 29 (bloque -> condicional .)
    CALL            reduce using rule 29 (bloque -> condicional .)
    ID              reduce using rule 29 (bloque -> condicional .)
    RIGHT_CURLYB    reduce using rule 29 (bloque -> condicional .)
    RETURN          reduce using rule 29 (bloque -> condicional .)


state 81

    (30) bloque -> while .

    IF              reduce using rule 30 (bloque -> while .)
    WHILE           reduce using rule 30 (bloque -> while .)
    READ            reduce using rule 30 (bloque -> while .)
    WRITE           reduce using rule 30 (bloque -> while .)
    CALL            reduce using rule 30 (bloque -> while .)
    ID              reduce using rule 30 (bloque -> while .)
    RIGHT_CURLYB    reduce using rule 30 (bloque -> while .)
    RETURN          reduce using rule 30 (bloque -> while .)


state 82

    (31) bloque -> read .

    IF              reduce using rule 31 (bloque -> read .)
    WHILE           reduce using rule 31 (bloque -> read .)
    READ            reduce using rule 31 (bloque -> read .)
    WRITE           reduce using rule 31 (bloque -> read .)
    CALL            reduce using rule 31 (bloque -> read .)
    ID              reduce using rule 31 (bloque -> read .)
    RIGHT_CURLYB    reduce using rule 31 (bloque -> read .)
    RETURN          reduce using rule 31 (bloque -> read .)


state 83

    (32) bloque -> write .

    IF              reduce using rule 32 (bloque -> write .)
    WHILE           reduce using rule 32 (bloque -> write .)
    READ            reduce using rule 32 (bloque -> write .)
    WRITE           reduce using rule 32 (bloque -> write .)
    CALL            reduce using rule 32 (bloque -> write .)
    ID              reduce using rule 32 (bloque -> write .)
    RIGHT_CURLYB    reduce using rule 32 (bloque -> write .)
    RETURN          reduce using rule 32 (bloque -> write .)


state 84

    (33) bloque -> func_call . SEMICOLON

    SEMICOLON       shift and go to state 99


state 85

    (34) asignacion -> var . pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (35) pn_var_assign -> . empty
    (121) empty -> .

    EQUAL_ASSIGN    reduce using rule 121 (empty -> .)

    pn_var_assign                  shift and go to state 100
    empty                          shift and go to state 101

state 86

    (85) condicional -> IF . LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    LEFT_PARENTHESIS shift and go to state 102


state 87

    (91) while -> WHILE . pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (93) pn_while -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_while                       shift and go to state 103
    empty                          shift and go to state 104

state 88

    (96) read -> READ . LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 105


state 89

    (97) write -> WRITE . LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 106


state 90

    (102) func_call -> CALL . ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    ID              shift and go to state 107


state 91

    (14) var -> ID . varArray
    (15) varArray -> . empty
    (16) varArray -> . pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET
    (121) empty -> .
    (17) pn_array_access1 -> . empty

    EQUAL_ASSIGN    reduce using rule 121 (empty -> .)
    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    LEFT_BRACKET    reduce using rule 121 (empty -> .)

    varArray                       shift and go to state 108
    empty                          shift and go to state 109
    pn_array_access1               shift and go to state 110

state 92

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int . pn_add_dim RIGHT_BRACKET SEMICOLON
    (23) pn_add_dim -> . empty
    (121) empty -> .

    RIGHT_BRACKET   reduce using rule 121 (empty -> .)

    pn_add_dim                     shift and go to state 111
    empty                          shift and go to state 112

state 93

    (67) cte_int -> CONST_INT .

    RIGHT_BRACKET   reduce using rule 67 (cte_int -> CONST_INT .)
    MULTIPLICATION  reduce using rule 67 (cte_int -> CONST_INT .)
    DIVISION        reduce using rule 67 (cte_int -> CONST_INT .)
    PLUS            reduce using rule 67 (cte_int -> CONST_INT .)
    MINUS           reduce using rule 67 (cte_int -> CONST_INT .)
    GREATER_THAN    reduce using rule 67 (cte_int -> CONST_INT .)
    LESS_THAN       reduce using rule 67 (cte_int -> CONST_INT .)
    EQUAL_COMPARE   reduce using rule 67 (cte_int -> CONST_INT .)
    NOT_EQUAL       reduce using rule 67 (cte_int -> CONST_INT .)
    AND             reduce using rule 67 (cte_int -> CONST_INT .)
    OR              reduce using rule 67 (cte_int -> CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 67 (cte_int -> CONST_INT .)
    MORE            reduce using rule 67 (cte_int -> CONST_INT .)
    SEMICOLON       reduce using rule 67 (cte_int -> CONST_INT .)
    COMMA           reduce using rule 67 (cte_int -> CONST_INT .)
    LEFT_PARENTHESIS reduce using rule 67 (cte_int -> CONST_INT .)
    CONST_BOOL      reduce using rule 67 (cte_int -> CONST_INT .)
    CONST_STRING    reduce using rule 67 (cte_int -> CONST_INT .)
    CALL            reduce using rule 67 (cte_int -> CONST_INT .)
    CONST_INT       reduce using rule 67 (cte_int -> CONST_INT .)
    CONST_FLOAT     reduce using rule 67 (cte_int -> CONST_INT .)
    ID              reduce using rule 67 (cte_int -> CONST_INT .)


state 94

    (68) cte_int -> MINUS . CONST_INT

    CONST_INT       shift and go to state 113


state 95

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB . pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (111) pn_gen_vartable -> . empty
    (121) empty -> .

    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    pn_gen_vartable                shift and go to state 114
    empty                          shift and go to state 62

state 96

    (82) parametro_rec -> COMMA tipo . ID parametro_rec

    ID              shift and go to state 115


state 97

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB . pn_end_main
    (113) pn_end_main -> . empty
    (121) empty -> .

    $end            reduce using rule 121 (empty -> .)

    pn_end_main                    shift and go to state 116
    empty                          shift and go to state 117

state 98

    (119) bloque_rec -> bloque bloque_rec .

    RIGHT_CURLYB    reduce using rule 119 (bloque_rec -> bloque bloque_rec .)
    RETURN          reduce using rule 119 (bloque_rec -> bloque bloque_rec .)


state 99

    (33) bloque -> func_call SEMICOLON .

    IF              reduce using rule 33 (bloque -> func_call SEMICOLON .)
    WHILE           reduce using rule 33 (bloque -> func_call SEMICOLON .)
    READ            reduce using rule 33 (bloque -> func_call SEMICOLON .)
    WRITE           reduce using rule 33 (bloque -> func_call SEMICOLON .)
    CALL            reduce using rule 33 (bloque -> func_call SEMICOLON .)
    ID              reduce using rule 33 (bloque -> func_call SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 33 (bloque -> func_call SEMICOLON .)
    RETURN          reduce using rule 33 (bloque -> func_call SEMICOLON .)


state 100

    (34) asignacion -> var pn_var_assign . EQUAL_ASSIGN all_logical SEMICOLON

    EQUAL_ASSIGN    shift and go to state 118


state 101

    (35) pn_var_assign -> empty .

    EQUAL_ASSIGN    reduce using rule 35 (pn_var_assign -> empty .)


state 102

    (85) condicional -> IF LEFT_PARENTHESIS . all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 120
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 103

    (91) while -> WHILE pn_while . LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop

    LEFT_PARENTHESIS shift and go to state 134


state 104

    (93) pn_while -> empty .

    LEFT_PARENTHESIS reduce using rule 93 (pn_while -> empty .)


state 105

    (96) read -> READ LEFT_PARENTHESIS . var RIGHT_PARENTHESIS SEMICOLON
    (14) var -> . ID varArray

    ID              shift and go to state 91

    var                            shift and go to state 135

state 106

    (97) write -> WRITE LEFT_PARENTHESIS . write_rec RIGHT_PARENTHESIS SEMICOLON
    (98) write_rec -> . all_logical pn_write_quad write_rec1
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    write_rec                      shift and go to state 136
    all_logical                    shift and go to state 137
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 107

    (102) func_call -> CALL ID . pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (103) pn_verify_func -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_verify_func                 shift and go to state 138
    empty                          shift and go to state 139

state 108

    (14) var -> ID varArray .

    EQUAL_ASSIGN    reduce using rule 14 (var -> ID varArray .)
    MULTIPLICATION  reduce using rule 14 (var -> ID varArray .)
    DIVISION        reduce using rule 14 (var -> ID varArray .)
    PLUS            reduce using rule 14 (var -> ID varArray .)
    MINUS           reduce using rule 14 (var -> ID varArray .)
    GREATER_THAN    reduce using rule 14 (var -> ID varArray .)
    LESS_THAN       reduce using rule 14 (var -> ID varArray .)
    EQUAL_COMPARE   reduce using rule 14 (var -> ID varArray .)
    NOT_EQUAL       reduce using rule 14 (var -> ID varArray .)
    AND             reduce using rule 14 (var -> ID varArray .)
    OR              reduce using rule 14 (var -> ID varArray .)
    RIGHT_PARENTHESIS reduce using rule 14 (var -> ID varArray .)
    MORE            reduce using rule 14 (var -> ID varArray .)
    SEMICOLON       reduce using rule 14 (var -> ID varArray .)
    RIGHT_BRACKET   reduce using rule 14 (var -> ID varArray .)
    COMMA           reduce using rule 14 (var -> ID varArray .)
    LEFT_PARENTHESIS reduce using rule 14 (var -> ID varArray .)
    CONST_BOOL      reduce using rule 14 (var -> ID varArray .)
    CONST_STRING    reduce using rule 14 (var -> ID varArray .)
    CALL            reduce using rule 14 (var -> ID varArray .)
    CONST_INT       reduce using rule 14 (var -> ID varArray .)
    CONST_FLOAT     reduce using rule 14 (var -> ID varArray .)
    ID              reduce using rule 14 (var -> ID varArray .)


state 109

    (15) varArray -> empty .
    (17) pn_array_access1 -> empty .

    EQUAL_ASSIGN    reduce using rule 15 (varArray -> empty .)
    MULTIPLICATION  reduce using rule 15 (varArray -> empty .)
    DIVISION        reduce using rule 15 (varArray -> empty .)
    PLUS            reduce using rule 15 (varArray -> empty .)
    MINUS           reduce using rule 15 (varArray -> empty .)
    GREATER_THAN    reduce using rule 15 (varArray -> empty .)
    LESS_THAN       reduce using rule 15 (varArray -> empty .)
    EQUAL_COMPARE   reduce using rule 15 (varArray -> empty .)
    NOT_EQUAL       reduce using rule 15 (varArray -> empty .)
    AND             reduce using rule 15 (varArray -> empty .)
    OR              reduce using rule 15 (varArray -> empty .)
    RIGHT_PARENTHESIS reduce using rule 15 (varArray -> empty .)
    MORE            reduce using rule 15 (varArray -> empty .)
    SEMICOLON       reduce using rule 15 (varArray -> empty .)
    RIGHT_BRACKET   reduce using rule 15 (varArray -> empty .)
    COMMA           reduce using rule 15 (varArray -> empty .)
    LEFT_PARENTHESIS reduce using rule 15 (varArray -> empty .)
    CONST_BOOL      reduce using rule 15 (varArray -> empty .)
    CONST_STRING    reduce using rule 15 (varArray -> empty .)
    CALL            reduce using rule 15 (varArray -> empty .)
    CONST_INT       reduce using rule 15 (varArray -> empty .)
    CONST_FLOAT     reduce using rule 15 (varArray -> empty .)
    ID              reduce using rule 15 (varArray -> empty .)
    LEFT_BRACKET    reduce using rule 17 (pn_array_access1 -> empty .)


state 110

    (16) varArray -> pn_array_access1 . LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 140


state 111

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 141


state 112

    (23) pn_add_dim -> empty .

    RIGHT_BRACKET   reduce using rule 23 (pn_add_dim -> empty .)


state 113

    (68) cte_int -> MINUS CONST_INT .

    RIGHT_BRACKET   reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    MULTIPLICATION  reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    DIVISION        reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    PLUS            reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    MINUS           reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    GREATER_THAN    reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    LESS_THAN       reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    EQUAL_COMPARE   reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    NOT_EQUAL       reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    AND             reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    OR              reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    MORE            reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    SEMICOLON       reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    COMMA           reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    LEFT_PARENTHESIS reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    CONST_BOOL      reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    CONST_STRING    reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    CALL            reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    CONST_INT       reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    CONST_FLOAT     reduce using rule 68 (cte_int -> MINUS CONST_INT .)
    ID              reduce using rule 68 (cte_int -> MINUS CONST_INT .)


state 114

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable . pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func
    (112) pn_func_quad -> . empty
    (121) empty -> .

    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    pn_func_quad                   shift and go to state 142
    empty                          shift and go to state 143

state 115

    (82) parametro_rec -> COMMA tipo ID . parametro_rec
    (82) parametro_rec -> . COMMA tipo ID parametro_rec
    (83) parametro_rec -> . empty
    (121) empty -> .

    COMMA           shift and go to state 74
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    parametro_rec                  shift and go to state 144
    empty                          shift and go to state 75

state 116

    (2) main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main .

    $end            reduce using rule 2 (main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_start_func bloque_rec RIGHT_CURLYB pn_end_main .)


state 117

    (113) pn_end_main -> empty .

    $end            reduce using rule 113 (pn_end_main -> empty .)


state 118

    (34) asignacion -> var pn_var_assign EQUAL_ASSIGN . all_logical SEMICOLON
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    var                            shift and go to state 131
    all_logical                    shift and go to state 145
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128

state 119

    (60) factor -> LEFT_PARENTHESIS . pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (72) pn_open_parenthesis -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_open_parenthesis            shift and go to state 146
    empty                          shift and go to state 147

state 120

    (85) condicional -> IF LEFT_PARENTHESIS all_logical . RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    RIGHT_PARENTHESIS shift and go to state 148


state 121

    (37) all_logical -> logical_exp . pn_all_logical all_logical_rec
    (41) pn_all_logical -> . empty
    (121) empty -> .

    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_all_logical                 shift and go to state 149
    empty                          shift and go to state 150

state 122

    (42) logical_exp -> exp . pn_logical_exp logical_exp_rec
    (48) pn_logical_exp -> . empty
    (121) empty -> .

    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_logical_exp                 shift and go to state 151
    empty                          shift and go to state 152

state 123

    (49) exp -> termino . pn_exp exp_rec
    (50) pn_exp -> . empty
    (121) empty -> .

    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_exp                         shift and go to state 153
    empty                          shift and go to state 154

state 124

    (54) termino -> factor . pn_termino termino_rec
    (58) pn_termino -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_termino                     shift and go to state 155
    empty                          shift and go to state 156

state 125

    (59) factor -> varcte .

    MULTIPLICATION  reduce using rule 59 (factor -> varcte .)
    DIVISION        reduce using rule 59 (factor -> varcte .)
    PLUS            reduce using rule 59 (factor -> varcte .)
    MINUS           reduce using rule 59 (factor -> varcte .)
    GREATER_THAN    reduce using rule 59 (factor -> varcte .)
    LESS_THAN       reduce using rule 59 (factor -> varcte .)
    EQUAL_COMPARE   reduce using rule 59 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 59 (factor -> varcte .)
    AND             reduce using rule 59 (factor -> varcte .)
    OR              reduce using rule 59 (factor -> varcte .)
    RIGHT_PARENTHESIS reduce using rule 59 (factor -> varcte .)
    MORE            reduce using rule 59 (factor -> varcte .)
    SEMICOLON       reduce using rule 59 (factor -> varcte .)
    RIGHT_BRACKET   reduce using rule 59 (factor -> varcte .)
    COMMA           reduce using rule 59 (factor -> varcte .)
    LEFT_PARENTHESIS reduce using rule 59 (factor -> varcte .)
    CONST_BOOL      reduce using rule 59 (factor -> varcte .)
    CONST_STRING    reduce using rule 59 (factor -> varcte .)
    CALL            reduce using rule 59 (factor -> varcte .)
    CONST_INT       reduce using rule 59 (factor -> varcte .)
    CONST_FLOAT     reduce using rule 59 (factor -> varcte .)
    ID              reduce using rule 59 (factor -> varcte .)


state 126

    (61) factor -> func_call .

    MULTIPLICATION  reduce using rule 61 (factor -> func_call .)
    DIVISION        reduce using rule 61 (factor -> func_call .)
    PLUS            reduce using rule 61 (factor -> func_call .)
    MINUS           reduce using rule 61 (factor -> func_call .)
    GREATER_THAN    reduce using rule 61 (factor -> func_call .)
    LESS_THAN       reduce using rule 61 (factor -> func_call .)
    EQUAL_COMPARE   reduce using rule 61 (factor -> func_call .)
    NOT_EQUAL       reduce using rule 61 (factor -> func_call .)
    AND             reduce using rule 61 (factor -> func_call .)
    OR              reduce using rule 61 (factor -> func_call .)
    RIGHT_PARENTHESIS reduce using rule 61 (factor -> func_call .)
    MORE            reduce using rule 61 (factor -> func_call .)
    SEMICOLON       reduce using rule 61 (factor -> func_call .)
    RIGHT_BRACKET   reduce using rule 61 (factor -> func_call .)
    COMMA           reduce using rule 61 (factor -> func_call .)
    LEFT_PARENTHESIS reduce using rule 61 (factor -> func_call .)
    CONST_BOOL      reduce using rule 61 (factor -> func_call .)
    CONST_STRING    reduce using rule 61 (factor -> func_call .)
    CALL            reduce using rule 61 (factor -> func_call .)
    CONST_INT       reduce using rule 61 (factor -> func_call .)
    CONST_FLOAT     reduce using rule 61 (factor -> func_call .)
    ID              reduce using rule 61 (factor -> func_call .)


state 127

    (62) varcte -> cte_int . pn_add_constant
    (71) pn_add_constant -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_add_constant                shift and go to state 157
    empty                          shift and go to state 158

state 128

    (63) varcte -> cte_float . pn_add_constant
    (71) pn_add_constant -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_add_constant                shift and go to state 159
    empty                          shift and go to state 158

state 129

    (64) varcte -> CONST_BOOL . pn_add_constant
    (71) pn_add_constant -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_add_constant                shift and go to state 160
    empty                          shift and go to state 158

state 130

    (65) varcte -> CONST_STRING . empty empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    empty                          shift and go to state 161

state 131

    (66) varcte -> var .

    MULTIPLICATION  reduce using rule 66 (varcte -> var .)
    DIVISION        reduce using rule 66 (varcte -> var .)
    PLUS            reduce using rule 66 (varcte -> var .)
    MINUS           reduce using rule 66 (varcte -> var .)
    GREATER_THAN    reduce using rule 66 (varcte -> var .)
    LESS_THAN       reduce using rule 66 (varcte -> var .)
    EQUAL_COMPARE   reduce using rule 66 (varcte -> var .)
    NOT_EQUAL       reduce using rule 66 (varcte -> var .)
    AND             reduce using rule 66 (varcte -> var .)
    OR              reduce using rule 66 (varcte -> var .)
    RIGHT_PARENTHESIS reduce using rule 66 (varcte -> var .)
    MORE            reduce using rule 66 (varcte -> var .)
    SEMICOLON       reduce using rule 66 (varcte -> var .)
    RIGHT_BRACKET   reduce using rule 66 (varcte -> var .)
    COMMA           reduce using rule 66 (varcte -> var .)
    LEFT_PARENTHESIS reduce using rule 66 (varcte -> var .)
    CONST_BOOL      reduce using rule 66 (varcte -> var .)
    CONST_STRING    reduce using rule 66 (varcte -> var .)
    CALL            reduce using rule 66 (varcte -> var .)
    CONST_INT       reduce using rule 66 (varcte -> var .)
    CONST_FLOAT     reduce using rule 66 (varcte -> var .)
    ID              reduce using rule 66 (varcte -> var .)


state 132

    (68) cte_int -> MINUS . CONST_INT
    (70) cte_float -> MINUS . CONST_FLOAT

    CONST_INT       shift and go to state 113
    CONST_FLOAT     shift and go to state 162


state 133

    (69) cte_float -> CONST_FLOAT .

    MULTIPLICATION  reduce using rule 69 (cte_float -> CONST_FLOAT .)
    DIVISION        reduce using rule 69 (cte_float -> CONST_FLOAT .)
    PLUS            reduce using rule 69 (cte_float -> CONST_FLOAT .)
    MINUS           reduce using rule 69 (cte_float -> CONST_FLOAT .)
    GREATER_THAN    reduce using rule 69 (cte_float -> CONST_FLOAT .)
    LESS_THAN       reduce using rule 69 (cte_float -> CONST_FLOAT .)
    EQUAL_COMPARE   reduce using rule 69 (cte_float -> CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 69 (cte_float -> CONST_FLOAT .)
    AND             reduce using rule 69 (cte_float -> CONST_FLOAT .)
    OR              reduce using rule 69 (cte_float -> CONST_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 69 (cte_float -> CONST_FLOAT .)
    MORE            reduce using rule 69 (cte_float -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 69 (cte_float -> CONST_FLOAT .)
    RIGHT_BRACKET   reduce using rule 69 (cte_float -> CONST_FLOAT .)
    COMMA           reduce using rule 69 (cte_float -> CONST_FLOAT .)
    LEFT_PARENTHESIS reduce using rule 69 (cte_float -> CONST_FLOAT .)
    CONST_BOOL      reduce using rule 69 (cte_float -> CONST_FLOAT .)
    CONST_STRING    reduce using rule 69 (cte_float -> CONST_FLOAT .)
    CALL            reduce using rule 69 (cte_float -> CONST_FLOAT .)
    CONST_INT       reduce using rule 69 (cte_float -> CONST_FLOAT .)
    CONST_FLOAT     reduce using rule 69 (cte_float -> CONST_FLOAT .)
    ID              reduce using rule 69 (cte_float -> CONST_FLOAT .)


state 134

    (91) while -> WHILE pn_while LEFT_PARENTHESIS . all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 163
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 135

    (96) read -> READ LEFT_PARENTHESIS var . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 164


state 136

    (97) write -> WRITE LEFT_PARENTHESIS write_rec . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 165


state 137

    (98) write_rec -> all_logical . pn_write_quad write_rec1
    (101) pn_write_quad -> . empty
    (121) empty -> .

    MORE            reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_write_quad                  shift and go to state 166
    empty                          shift and go to state 167

state 138

    (102) func_call -> CALL ID pn_verify_func . LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 168


state 139

    (103) pn_verify_func -> empty .

    LEFT_PARENTHESIS reduce using rule 103 (pn_verify_func -> empty .)


state 140

    (16) varArray -> pn_array_access1 LEFT_BRACKET . pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET
    (18) pn_array_access2 -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_array_access2               shift and go to state 169
    empty                          shift and go to state 170

state 141

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 171


state 142

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad . bloque_rec func_return RIGHT_CURLYB pn_end_func
    (119) bloque_rec -> . bloque bloque_rec
    (120) bloque_rec -> . empty
    (28) bloque -> . asignacion
    (29) bloque -> . condicional
    (30) bloque -> . while
    (31) bloque -> . read
    (32) bloque -> . write
    (33) bloque -> . func_call SEMICOLON
    (121) empty -> .
    (34) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (97) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RETURN          reduce using rule 121 (empty -> .)
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    CALL            shift and go to state 90
    ID              shift and go to state 91

    bloque_rec                     shift and go to state 172
    bloque                         shift and go to state 77
    empty                          shift and go to state 78
    asignacion                     shift and go to state 79
    condicional                    shift and go to state 80
    while                          shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    func_call                      shift and go to state 84
    var                            shift and go to state 85

state 143

    (112) pn_func_quad -> empty .

    IF              reduce using rule 112 (pn_func_quad -> empty .)
    WHILE           reduce using rule 112 (pn_func_quad -> empty .)
    READ            reduce using rule 112 (pn_func_quad -> empty .)
    WRITE           reduce using rule 112 (pn_func_quad -> empty .)
    CALL            reduce using rule 112 (pn_func_quad -> empty .)
    ID              reduce using rule 112 (pn_func_quad -> empty .)
    RETURN          reduce using rule 112 (pn_func_quad -> empty .)


state 144

    (82) parametro_rec -> COMMA tipo ID parametro_rec .

    RIGHT_PARENTHESIS reduce using rule 82 (parametro_rec -> COMMA tipo ID parametro_rec .)


state 145

    (34) asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical . SEMICOLON

    SEMICOLON       shift and go to state 173


state 146

    (60) factor -> LEFT_PARENTHESIS pn_open_parenthesis . all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 174
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 147

    (72) pn_open_parenthesis -> empty .

    LEFT_PARENTHESIS reduce using rule 72 (pn_open_parenthesis -> empty .)
    CONST_BOOL      reduce using rule 72 (pn_open_parenthesis -> empty .)
    CONST_STRING    reduce using rule 72 (pn_open_parenthesis -> empty .)
    CALL            reduce using rule 72 (pn_open_parenthesis -> empty .)
    CONST_INT       reduce using rule 72 (pn_open_parenthesis -> empty .)
    MINUS           reduce using rule 72 (pn_open_parenthesis -> empty .)
    CONST_FLOAT     reduce using rule 72 (pn_open_parenthesis -> empty .)
    ID              reduce using rule 72 (pn_open_parenthesis -> empty .)


state 148

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS . pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (88) pn_condicional -> . empty
    (121) empty -> .

    LEFT_CURLYB     reduce using rule 121 (empty -> .)

    pn_condicional                 shift and go to state 175
    empty                          shift and go to state 176

state 149

    (37) all_logical -> logical_exp pn_all_logical . all_logical_rec
    (38) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (39) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (40) all_logical_rec -> . empty
    (121) empty -> .

    AND             shift and go to state 178
    OR              shift and go to state 179
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    all_logical_rec                shift and go to state 177
    empty                          shift and go to state 180

state 150

    (41) pn_all_logical -> empty .

    AND             reduce using rule 41 (pn_all_logical -> empty .)
    OR              reduce using rule 41 (pn_all_logical -> empty .)
    RIGHT_PARENTHESIS reduce using rule 41 (pn_all_logical -> empty .)
    MORE            reduce using rule 41 (pn_all_logical -> empty .)
    SEMICOLON       reduce using rule 41 (pn_all_logical -> empty .)
    RIGHT_BRACKET   reduce using rule 41 (pn_all_logical -> empty .)
    COMMA           reduce using rule 41 (pn_all_logical -> empty .)
    LEFT_PARENTHESIS reduce using rule 41 (pn_all_logical -> empty .)
    CONST_BOOL      reduce using rule 41 (pn_all_logical -> empty .)
    CONST_STRING    reduce using rule 41 (pn_all_logical -> empty .)
    CALL            reduce using rule 41 (pn_all_logical -> empty .)
    CONST_INT       reduce using rule 41 (pn_all_logical -> empty .)
    MINUS           reduce using rule 41 (pn_all_logical -> empty .)
    CONST_FLOAT     reduce using rule 41 (pn_all_logical -> empty .)
    ID              reduce using rule 41 (pn_all_logical -> empty .)


state 151

    (42) logical_exp -> exp pn_logical_exp . logical_exp_rec
    (43) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (45) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . empty
    (121) empty -> .

    GREATER_THAN    shift and go to state 182
    LESS_THAN       shift and go to state 183
    EQUAL_COMPARE   shift and go to state 184
    NOT_EQUAL       shift and go to state 185
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    logical_exp_rec                shift and go to state 181
    empty                          shift and go to state 186

state 152

    (48) pn_logical_exp -> empty .

    GREATER_THAN    reduce using rule 48 (pn_logical_exp -> empty .)
    LESS_THAN       reduce using rule 48 (pn_logical_exp -> empty .)
    EQUAL_COMPARE   reduce using rule 48 (pn_logical_exp -> empty .)
    NOT_EQUAL       reduce using rule 48 (pn_logical_exp -> empty .)
    AND             reduce using rule 48 (pn_logical_exp -> empty .)
    OR              reduce using rule 48 (pn_logical_exp -> empty .)
    RIGHT_PARENTHESIS reduce using rule 48 (pn_logical_exp -> empty .)
    MORE            reduce using rule 48 (pn_logical_exp -> empty .)
    SEMICOLON       reduce using rule 48 (pn_logical_exp -> empty .)
    RIGHT_BRACKET   reduce using rule 48 (pn_logical_exp -> empty .)
    COMMA           reduce using rule 48 (pn_logical_exp -> empty .)
    LEFT_PARENTHESIS reduce using rule 48 (pn_logical_exp -> empty .)
    CONST_BOOL      reduce using rule 48 (pn_logical_exp -> empty .)
    CONST_STRING    reduce using rule 48 (pn_logical_exp -> empty .)
    CALL            reduce using rule 48 (pn_logical_exp -> empty .)
    CONST_INT       reduce using rule 48 (pn_logical_exp -> empty .)
    MINUS           reduce using rule 48 (pn_logical_exp -> empty .)
    CONST_FLOAT     reduce using rule 48 (pn_logical_exp -> empty .)
    ID              reduce using rule 48 (pn_logical_exp -> empty .)


state 153

    (49) exp -> termino pn_exp . exp_rec
    (51) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (52) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (53) exp_rec -> . empty
    (121) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 188
    MINUS           shift and go to state 189
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

  ! MINUS           [ reduce using rule 121 (empty -> .) ]

    exp_rec                        shift and go to state 187
    empty                          shift and go to state 190

state 154

    (50) pn_exp -> empty .

    PLUS            reduce using rule 50 (pn_exp -> empty .)
    MINUS           reduce using rule 50 (pn_exp -> empty .)
    GREATER_THAN    reduce using rule 50 (pn_exp -> empty .)
    LESS_THAN       reduce using rule 50 (pn_exp -> empty .)
    EQUAL_COMPARE   reduce using rule 50 (pn_exp -> empty .)
    NOT_EQUAL       reduce using rule 50 (pn_exp -> empty .)
    AND             reduce using rule 50 (pn_exp -> empty .)
    OR              reduce using rule 50 (pn_exp -> empty .)
    RIGHT_PARENTHESIS reduce using rule 50 (pn_exp -> empty .)
    MORE            reduce using rule 50 (pn_exp -> empty .)
    SEMICOLON       reduce using rule 50 (pn_exp -> empty .)
    RIGHT_BRACKET   reduce using rule 50 (pn_exp -> empty .)
    COMMA           reduce using rule 50 (pn_exp -> empty .)
    LEFT_PARENTHESIS reduce using rule 50 (pn_exp -> empty .)
    CONST_BOOL      reduce using rule 50 (pn_exp -> empty .)
    CONST_STRING    reduce using rule 50 (pn_exp -> empty .)
    CALL            reduce using rule 50 (pn_exp -> empty .)
    CONST_INT       reduce using rule 50 (pn_exp -> empty .)
    CONST_FLOAT     reduce using rule 50 (pn_exp -> empty .)
    ID              reduce using rule 50 (pn_exp -> empty .)


state 155

    (54) termino -> factor pn_termino . termino_rec
    (55) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (56) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (57) termino_rec -> . empty
    (121) empty -> .

    MULTIPLICATION  shift and go to state 192
    DIVISION        shift and go to state 193
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    termino_rec                    shift and go to state 191
    empty                          shift and go to state 194

state 156

    (58) pn_termino -> empty .

    MULTIPLICATION  reduce using rule 58 (pn_termino -> empty .)
    DIVISION        reduce using rule 58 (pn_termino -> empty .)
    PLUS            reduce using rule 58 (pn_termino -> empty .)
    MINUS           reduce using rule 58 (pn_termino -> empty .)
    GREATER_THAN    reduce using rule 58 (pn_termino -> empty .)
    LESS_THAN       reduce using rule 58 (pn_termino -> empty .)
    EQUAL_COMPARE   reduce using rule 58 (pn_termino -> empty .)
    NOT_EQUAL       reduce using rule 58 (pn_termino -> empty .)
    AND             reduce using rule 58 (pn_termino -> empty .)
    OR              reduce using rule 58 (pn_termino -> empty .)
    RIGHT_PARENTHESIS reduce using rule 58 (pn_termino -> empty .)
    MORE            reduce using rule 58 (pn_termino -> empty .)
    SEMICOLON       reduce using rule 58 (pn_termino -> empty .)
    RIGHT_BRACKET   reduce using rule 58 (pn_termino -> empty .)
    COMMA           reduce using rule 58 (pn_termino -> empty .)
    LEFT_PARENTHESIS reduce using rule 58 (pn_termino -> empty .)
    CONST_BOOL      reduce using rule 58 (pn_termino -> empty .)
    CONST_STRING    reduce using rule 58 (pn_termino -> empty .)
    CALL            reduce using rule 58 (pn_termino -> empty .)
    CONST_INT       reduce using rule 58 (pn_termino -> empty .)
    CONST_FLOAT     reduce using rule 58 (pn_termino -> empty .)
    ID              reduce using rule 58 (pn_termino -> empty .)


state 157

    (62) varcte -> cte_int pn_add_constant .

    MULTIPLICATION  reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    DIVISION        reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    PLUS            reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    MINUS           reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    GREATER_THAN    reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    LESS_THAN       reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    NOT_EQUAL       reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    AND             reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    OR              reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    MORE            reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    SEMICOLON       reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    COMMA           reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    LEFT_PARENTHESIS reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    CONST_BOOL      reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    CONST_STRING    reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    CALL            reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    CONST_INT       reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    CONST_FLOAT     reduce using rule 62 (varcte -> cte_int pn_add_constant .)
    ID              reduce using rule 62 (varcte -> cte_int pn_add_constant .)


state 158

    (71) pn_add_constant -> empty .

    MULTIPLICATION  reduce using rule 71 (pn_add_constant -> empty .)
    DIVISION        reduce using rule 71 (pn_add_constant -> empty .)
    PLUS            reduce using rule 71 (pn_add_constant -> empty .)
    MINUS           reduce using rule 71 (pn_add_constant -> empty .)
    GREATER_THAN    reduce using rule 71 (pn_add_constant -> empty .)
    LESS_THAN       reduce using rule 71 (pn_add_constant -> empty .)
    EQUAL_COMPARE   reduce using rule 71 (pn_add_constant -> empty .)
    NOT_EQUAL       reduce using rule 71 (pn_add_constant -> empty .)
    AND             reduce using rule 71 (pn_add_constant -> empty .)
    OR              reduce using rule 71 (pn_add_constant -> empty .)
    RIGHT_PARENTHESIS reduce using rule 71 (pn_add_constant -> empty .)
    MORE            reduce using rule 71 (pn_add_constant -> empty .)
    SEMICOLON       reduce using rule 71 (pn_add_constant -> empty .)
    RIGHT_BRACKET   reduce using rule 71 (pn_add_constant -> empty .)
    COMMA           reduce using rule 71 (pn_add_constant -> empty .)
    LEFT_PARENTHESIS reduce using rule 71 (pn_add_constant -> empty .)
    CONST_BOOL      reduce using rule 71 (pn_add_constant -> empty .)
    CONST_STRING    reduce using rule 71 (pn_add_constant -> empty .)
    CALL            reduce using rule 71 (pn_add_constant -> empty .)
    CONST_INT       reduce using rule 71 (pn_add_constant -> empty .)
    CONST_FLOAT     reduce using rule 71 (pn_add_constant -> empty .)
    ID              reduce using rule 71 (pn_add_constant -> empty .)


state 159

    (63) varcte -> cte_float pn_add_constant .

    MULTIPLICATION  reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    DIVISION        reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    PLUS            reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    MINUS           reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    GREATER_THAN    reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    LESS_THAN       reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    NOT_EQUAL       reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    AND             reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    OR              reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    MORE            reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    SEMICOLON       reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    COMMA           reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    LEFT_PARENTHESIS reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    CONST_BOOL      reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    CONST_STRING    reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    CALL            reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    CONST_INT       reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    CONST_FLOAT     reduce using rule 63 (varcte -> cte_float pn_add_constant .)
    ID              reduce using rule 63 (varcte -> cte_float pn_add_constant .)


state 160

    (64) varcte -> CONST_BOOL pn_add_constant .

    MULTIPLICATION  reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    DIVISION        reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    PLUS            reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    MINUS           reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    GREATER_THAN    reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    LESS_THAN       reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    EQUAL_COMPARE   reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    NOT_EQUAL       reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    AND             reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    OR              reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    RIGHT_PARENTHESIS reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    MORE            reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    SEMICOLON       reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    RIGHT_BRACKET   reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    COMMA           reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    LEFT_PARENTHESIS reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_BOOL      reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_STRING    reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    CALL            reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_INT       reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    CONST_FLOAT     reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)
    ID              reduce using rule 64 (varcte -> CONST_BOOL pn_add_constant .)


state 161

    (65) varcte -> CONST_STRING empty . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    empty                          shift and go to state 195

state 162

    (70) cte_float -> MINUS CONST_FLOAT .

    MULTIPLICATION  reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    DIVISION        reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    PLUS            reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    MINUS           reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    GREATER_THAN    reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    LESS_THAN       reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    EQUAL_COMPARE   reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    AND             reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    OR              reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    MORE            reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    SEMICOLON       reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    RIGHT_BRACKET   reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    COMMA           reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    LEFT_PARENTHESIS reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    CONST_BOOL      reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    CONST_STRING    reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    CALL            reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    CONST_INT       reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    CONST_FLOAT     reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)
    ID              reduce using rule 70 (cte_float -> MINUS CONST_FLOAT .)


state 163

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical . RIGHT_PARENTHESIS pn_while_jump while_loop

    RIGHT_PARENTHESIS shift and go to state 196


state 164

    (96) read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 197


state 165

    (97) write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 198


state 166

    (98) write_rec -> all_logical pn_write_quad . write_rec1
    (99) write_rec1 -> . MORE all_logical pn_write_quad write_rec1
    (100) write_rec1 -> . empty
    (121) empty -> .

    MORE            shift and go to state 200
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    write_rec1                     shift and go to state 199
    empty                          shift and go to state 201

state 167

    (101) pn_write_quad -> empty .

    MORE            reduce using rule 101 (pn_write_quad -> empty .)
    RIGHT_PARENTHESIS reduce using rule 101 (pn_write_quad -> empty .)


state 168

    (102) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS . pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (104) pn_param_counter -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_param_counter               shift and go to state 202
    empty                          shift and go to state 203

state 169

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 . all_logical pn_array_access3 RIGHT_BRACKET
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 204
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 170

    (18) pn_array_access2 -> empty .

    LEFT_PARENTHESIS reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_BOOL      reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_STRING    reduce using rule 18 (pn_array_access2 -> empty .)
    CALL            reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_INT       reduce using rule 18 (pn_array_access2 -> empty .)
    MINUS           reduce using rule 18 (pn_array_access2 -> empty .)
    CONST_FLOAT     reduce using rule 18 (pn_array_access2 -> empty .)
    ID              reduce using rule 18 (pn_array_access2 -> empty .)


state 171

    (21) var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .

    VAR             reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    LIST            reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    FUNC            reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    MAIN            reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    READ            reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    WRITE           reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    CALL            reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    ID              reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 21 (var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name pn_add_variable LEFT_BRACKET pn_add_dim_list cte_int pn_add_dim RIGHT_BRACKET SEMICOLON .)


state 172

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec . func_return RIGHT_CURLYB pn_end_func
    (117) func_return -> . RETURN all_logical SEMICOLON
    (118) func_return -> . RETURN SEMICOLON

    RETURN          shift and go to state 206

    func_return                    shift and go to state 205

state 173

    (34) asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .

    IF              reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    WHILE           reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    READ            reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    WRITE           reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    CALL            reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    ID              reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)
    RETURN          reduce using rule 34 (asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON .)


state 174

    (60) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical . RIGHT_PARENTHESIS pn_close_parenthesis

    RIGHT_PARENTHESIS shift and go to state 207


state 175

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional . LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else

    LEFT_CURLYB     shift and go to state 208


state 176

    (88) pn_condicional -> empty .

    LEFT_CURLYB     reduce using rule 88 (pn_condicional -> empty .)


state 177

    (37) all_logical -> logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    LEFT_PARENTHESIS reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_BOOL      reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_STRING    reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CALL            reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_INT       reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    MINUS           reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    CONST_FLOAT     reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)
    ID              reduce using rule 37 (all_logical -> logical_exp pn_all_logical all_logical_rec .)


state 178

    (38) all_logical_rec -> AND . pn_operator logical_exp pn_all_logical all_logical_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 209
    empty                          shift and go to state 210

state 179

    (39) all_logical_rec -> OR . pn_operator logical_exp pn_all_logical all_logical_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 211
    empty                          shift and go to state 210

state 180

    (40) all_logical_rec -> empty .

    RIGHT_PARENTHESIS reduce using rule 40 (all_logical_rec -> empty .)
    MORE            reduce using rule 40 (all_logical_rec -> empty .)
    SEMICOLON       reduce using rule 40 (all_logical_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 40 (all_logical_rec -> empty .)
    COMMA           reduce using rule 40 (all_logical_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 40 (all_logical_rec -> empty .)
    CONST_BOOL      reduce using rule 40 (all_logical_rec -> empty .)
    CONST_STRING    reduce using rule 40 (all_logical_rec -> empty .)
    CALL            reduce using rule 40 (all_logical_rec -> empty .)
    CONST_INT       reduce using rule 40 (all_logical_rec -> empty .)
    MINUS           reduce using rule 40 (all_logical_rec -> empty .)
    CONST_FLOAT     reduce using rule 40 (all_logical_rec -> empty .)
    ID              reduce using rule 40 (all_logical_rec -> empty .)


state 181

    (42) logical_exp -> exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 42 (logical_exp -> exp pn_logical_exp logical_exp_rec .)


state 182

    (43) logical_exp_rec -> GREATER_THAN . pn_operator exp pn_logical_exp logical_exp_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 212
    empty                          shift and go to state 210

state 183

    (44) logical_exp_rec -> LESS_THAN . pn_operator exp pn_logical_exp logical_exp_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 213
    empty                          shift and go to state 210

state 184

    (45) logical_exp_rec -> EQUAL_COMPARE . pn_operator exp pn_logical_exp logical_exp_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 214
    empty                          shift and go to state 210

state 185

    (46) logical_exp_rec -> NOT_EQUAL . pn_operator exp pn_logical_exp logical_exp_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 215
    empty                          shift and go to state 210

state 186

    (47) logical_exp_rec -> empty .

    AND             reduce using rule 47 (logical_exp_rec -> empty .)
    OR              reduce using rule 47 (logical_exp_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 47 (logical_exp_rec -> empty .)
    MORE            reduce using rule 47 (logical_exp_rec -> empty .)
    SEMICOLON       reduce using rule 47 (logical_exp_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 47 (logical_exp_rec -> empty .)
    COMMA           reduce using rule 47 (logical_exp_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 47 (logical_exp_rec -> empty .)
    CONST_BOOL      reduce using rule 47 (logical_exp_rec -> empty .)
    CONST_STRING    reduce using rule 47 (logical_exp_rec -> empty .)
    CALL            reduce using rule 47 (logical_exp_rec -> empty .)
    CONST_INT       reduce using rule 47 (logical_exp_rec -> empty .)
    MINUS           reduce using rule 47 (logical_exp_rec -> empty .)
    CONST_FLOAT     reduce using rule 47 (logical_exp_rec -> empty .)
    ID              reduce using rule 47 (logical_exp_rec -> empty .)


state 187

    (49) exp -> termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    AND             reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    OR              reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    MORE            reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    COMMA           reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    LEFT_PARENTHESIS reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    CONST_BOOL      reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    CONST_STRING    reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    CALL            reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    CONST_INT       reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    MINUS           reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    CONST_FLOAT     reduce using rule 49 (exp -> termino pn_exp exp_rec .)
    ID              reduce using rule 49 (exp -> termino pn_exp exp_rec .)


state 188

    (51) exp_rec -> PLUS . pn_operator termino pn_exp exp_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 216
    empty                          shift and go to state 210

state 189

    (52) exp_rec -> MINUS . pn_operator termino pn_exp exp_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 217
    empty                          shift and go to state 210

state 190

    (53) exp_rec -> empty .

    GREATER_THAN    reduce using rule 53 (exp_rec -> empty .)
    LESS_THAN       reduce using rule 53 (exp_rec -> empty .)
    EQUAL_COMPARE   reduce using rule 53 (exp_rec -> empty .)
    NOT_EQUAL       reduce using rule 53 (exp_rec -> empty .)
    AND             reduce using rule 53 (exp_rec -> empty .)
    OR              reduce using rule 53 (exp_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 53 (exp_rec -> empty .)
    MORE            reduce using rule 53 (exp_rec -> empty .)
    SEMICOLON       reduce using rule 53 (exp_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 53 (exp_rec -> empty .)
    COMMA           reduce using rule 53 (exp_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 53 (exp_rec -> empty .)
    CONST_BOOL      reduce using rule 53 (exp_rec -> empty .)
    CONST_STRING    reduce using rule 53 (exp_rec -> empty .)
    CALL            reduce using rule 53 (exp_rec -> empty .)
    CONST_INT       reduce using rule 53 (exp_rec -> empty .)
    MINUS           reduce using rule 53 (exp_rec -> empty .)
    CONST_FLOAT     reduce using rule 53 (exp_rec -> empty .)
    ID              reduce using rule 53 (exp_rec -> empty .)


state 191

    (54) termino -> factor pn_termino termino_rec .

    PLUS            reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    MINUS           reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    AND             reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    OR              reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    MORE            reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    COMMA           reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    LEFT_PARENTHESIS reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    CONST_BOOL      reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    CONST_STRING    reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    CALL            reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    CONST_INT       reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    CONST_FLOAT     reduce using rule 54 (termino -> factor pn_termino termino_rec .)
    ID              reduce using rule 54 (termino -> factor pn_termino termino_rec .)


state 192

    (55) termino_rec -> MULTIPLICATION . pn_operator factor pn_termino termino_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 218
    empty                          shift and go to state 210

state 193

    (56) termino_rec -> DIVISION . pn_operator factor pn_termino termino_rec
    (36) pn_operator -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_operator                    shift and go to state 219
    empty                          shift and go to state 210

state 194

    (57) termino_rec -> empty .

    PLUS            reduce using rule 57 (termino_rec -> empty .)
    MINUS           reduce using rule 57 (termino_rec -> empty .)
    GREATER_THAN    reduce using rule 57 (termino_rec -> empty .)
    LESS_THAN       reduce using rule 57 (termino_rec -> empty .)
    EQUAL_COMPARE   reduce using rule 57 (termino_rec -> empty .)
    NOT_EQUAL       reduce using rule 57 (termino_rec -> empty .)
    AND             reduce using rule 57 (termino_rec -> empty .)
    OR              reduce using rule 57 (termino_rec -> empty .)
    RIGHT_PARENTHESIS reduce using rule 57 (termino_rec -> empty .)
    MORE            reduce using rule 57 (termino_rec -> empty .)
    SEMICOLON       reduce using rule 57 (termino_rec -> empty .)
    RIGHT_BRACKET   reduce using rule 57 (termino_rec -> empty .)
    COMMA           reduce using rule 57 (termino_rec -> empty .)
    LEFT_PARENTHESIS reduce using rule 57 (termino_rec -> empty .)
    CONST_BOOL      reduce using rule 57 (termino_rec -> empty .)
    CONST_STRING    reduce using rule 57 (termino_rec -> empty .)
    CALL            reduce using rule 57 (termino_rec -> empty .)
    CONST_INT       reduce using rule 57 (termino_rec -> empty .)
    CONST_FLOAT     reduce using rule 57 (termino_rec -> empty .)
    ID              reduce using rule 57 (termino_rec -> empty .)


state 195

    (65) varcte -> CONST_STRING empty empty .

    MULTIPLICATION  reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    DIVISION        reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    PLUS            reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    MINUS           reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    GREATER_THAN    reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    LESS_THAN       reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    EQUAL_COMPARE   reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    NOT_EQUAL       reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    AND             reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    OR              reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    RIGHT_PARENTHESIS reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    MORE            reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    SEMICOLON       reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    RIGHT_BRACKET   reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    COMMA           reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    LEFT_PARENTHESIS reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    CONST_BOOL      reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    CONST_STRING    reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    CALL            reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    CONST_INT       reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    CONST_FLOAT     reduce using rule 65 (varcte -> CONST_STRING empty empty .)
    ID              reduce using rule 65 (varcte -> CONST_STRING empty empty .)


state 196

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS . pn_while_jump while_loop
    (94) pn_while_jump -> . empty
    (121) empty -> .

    LEFT_CURLYB     reduce using rule 121 (empty -> .)

    pn_while_jump                  shift and go to state 220
    empty                          shift and go to state 221

state 197

    (96) read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .

    IF              reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    CALL            reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 96 (read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON .)


state 198

    (97) write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .

    IF              reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    CALL            reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    ID              reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CURLYB    reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 97 (write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON .)


state 199

    (98) write_rec -> all_logical pn_write_quad write_rec1 .

    RIGHT_PARENTHESIS reduce using rule 98 (write_rec -> all_logical pn_write_quad write_rec1 .)


state 200

    (99) write_rec1 -> MORE . all_logical pn_write_quad write_rec1
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 222
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 201

    (100) write_rec1 -> empty .

    RIGHT_PARENTHESIS reduce using rule 100 (write_rec1 -> empty .)


state 202

    (102) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter . pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (72) pn_open_parenthesis -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_open_parenthesis            shift and go to state 223
    empty                          shift and go to state 147

state 203

    (104) pn_param_counter -> empty .

    LEFT_PARENTHESIS reduce using rule 104 (pn_param_counter -> empty .)
    CONST_BOOL      reduce using rule 104 (pn_param_counter -> empty .)
    CONST_STRING    reduce using rule 104 (pn_param_counter -> empty .)
    CALL            reduce using rule 104 (pn_param_counter -> empty .)
    CONST_INT       reduce using rule 104 (pn_param_counter -> empty .)
    MINUS           reduce using rule 104 (pn_param_counter -> empty .)
    CONST_FLOAT     reduce using rule 104 (pn_param_counter -> empty .)
    ID              reduce using rule 104 (pn_param_counter -> empty .)


state 204

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical . pn_array_access3 RIGHT_BRACKET
    (19) pn_array_access3 -> . empty
    (121) empty -> .

    RIGHT_BRACKET   reduce using rule 121 (empty -> .)

    pn_array_access3               shift and go to state 224
    empty                          shift and go to state 225

state 205

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return . RIGHT_CURLYB pn_end_func

    RIGHT_CURLYB    shift and go to state 226


state 206

    (117) func_return -> RETURN . all_logical SEMICOLON
    (118) func_return -> RETURN . SEMICOLON
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    SEMICOLON       shift and go to state 228
    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 227
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 207

    (60) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS . pn_close_parenthesis
    (73) pn_close_parenthesis -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_close_parenthesis           shift and go to state 229
    empty                          shift and go to state 230

state 208

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB . bloque_rec RIGHT_CURLYB condicional_else
    (119) bloque_rec -> . bloque bloque_rec
    (120) bloque_rec -> . empty
    (28) bloque -> . asignacion
    (29) bloque -> . condicional
    (30) bloque -> . while
    (31) bloque -> . read
    (32) bloque -> . write
    (33) bloque -> . func_call SEMICOLON
    (121) empty -> .
    (34) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (97) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    CALL            shift and go to state 90
    ID              shift and go to state 91

    bloque_rec                     shift and go to state 231
    bloque                         shift and go to state 77
    empty                          shift and go to state 78
    asignacion                     shift and go to state 79
    condicional                    shift and go to state 80
    while                          shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    func_call                      shift and go to state 84
    var                            shift and go to state 85

state 209

    (38) all_logical_rec -> AND pn_operator . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    logical_exp                    shift and go to state 232
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 210

    (36) pn_operator -> empty .

    LEFT_PARENTHESIS reduce using rule 36 (pn_operator -> empty .)
    CONST_BOOL      reduce using rule 36 (pn_operator -> empty .)
    CONST_STRING    reduce using rule 36 (pn_operator -> empty .)
    CALL            reduce using rule 36 (pn_operator -> empty .)
    CONST_INT       reduce using rule 36 (pn_operator -> empty .)
    MINUS           reduce using rule 36 (pn_operator -> empty .)
    CONST_FLOAT     reduce using rule 36 (pn_operator -> empty .)
    ID              reduce using rule 36 (pn_operator -> empty .)


state 211

    (39) all_logical_rec -> OR pn_operator . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    logical_exp                    shift and go to state 233
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 212

    (43) logical_exp_rec -> GREATER_THAN pn_operator . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    exp                            shift and go to state 234
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 213

    (44) logical_exp_rec -> LESS_THAN pn_operator . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    exp                            shift and go to state 235
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 214

    (45) logical_exp_rec -> EQUAL_COMPARE pn_operator . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    exp                            shift and go to state 236
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 215

    (46) logical_exp_rec -> NOT_EQUAL pn_operator . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    exp                            shift and go to state 237
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 216

    (51) exp_rec -> PLUS pn_operator . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    termino                        shift and go to state 238
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 217

    (52) exp_rec -> MINUS pn_operator . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    termino                        shift and go to state 239
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 218

    (55) termino_rec -> MULTIPLICATION pn_operator . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    factor                         shift and go to state 240
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 219

    (56) termino_rec -> DIVISION pn_operator . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    factor                         shift and go to state 241
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 220

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump . while_loop
    (92) while_loop -> . LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1

    LEFT_CURLYB     shift and go to state 243

    while_loop                     shift and go to state 242

state 221

    (94) pn_while_jump -> empty .

    LEFT_CURLYB     reduce using rule 94 (pn_while_jump -> empty .)


state 222

    (99) write_rec1 -> MORE all_logical . pn_write_quad write_rec1
    (101) pn_write_quad -> . empty
    (121) empty -> .

    MORE            reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_write_quad                  shift and go to state 244
    empty                          shift and go to state 167

state 223

    (102) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis . func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (105) func_call_rec -> . all_logical pn_param_match func_call_rec1
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    func_call_rec                  shift and go to state 245
    all_logical                    shift and go to state 246
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 224

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 247


state 225

    (19) pn_array_access3 -> empty .

    RIGHT_BRACKET   reduce using rule 19 (pn_array_access3 -> empty .)


state 226

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB . pn_end_func
    (114) pn_end_func -> . empty
    (121) empty -> .

    VAR             reduce using rule 121 (empty -> .)
    LIST            reduce using rule 121 (empty -> .)
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)

    pn_end_func                    shift and go to state 248
    empty                          shift and go to state 249

state 227

    (117) func_return -> RETURN all_logical . SEMICOLON

    SEMICOLON       shift and go to state 250


state 228

    (118) func_return -> RETURN SEMICOLON .

    RIGHT_CURLYB    reduce using rule 118 (func_return -> RETURN SEMICOLON .)


state 229

    (60) factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .

    MULTIPLICATION  reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    DIVISION        reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    PLUS            reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    MINUS           reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    GREATER_THAN    reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    LESS_THAN       reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    EQUAL_COMPARE   reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    NOT_EQUAL       reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    AND             reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    OR              reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    RIGHT_PARENTHESIS reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    MORE            reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    SEMICOLON       reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    RIGHT_BRACKET   reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    COMMA           reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    LEFT_PARENTHESIS reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_BOOL      reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_STRING    reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CALL            reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_INT       reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    CONST_FLOAT     reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)
    ID              reduce using rule 60 (factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis .)


state 230

    (73) pn_close_parenthesis -> empty .

    MULTIPLICATION  reduce using rule 73 (pn_close_parenthesis -> empty .)
    DIVISION        reduce using rule 73 (pn_close_parenthesis -> empty .)
    PLUS            reduce using rule 73 (pn_close_parenthesis -> empty .)
    MINUS           reduce using rule 73 (pn_close_parenthesis -> empty .)
    GREATER_THAN    reduce using rule 73 (pn_close_parenthesis -> empty .)
    LESS_THAN       reduce using rule 73 (pn_close_parenthesis -> empty .)
    EQUAL_COMPARE   reduce using rule 73 (pn_close_parenthesis -> empty .)
    NOT_EQUAL       reduce using rule 73 (pn_close_parenthesis -> empty .)
    AND             reduce using rule 73 (pn_close_parenthesis -> empty .)
    OR              reduce using rule 73 (pn_close_parenthesis -> empty .)
    RIGHT_PARENTHESIS reduce using rule 73 (pn_close_parenthesis -> empty .)
    MORE            reduce using rule 73 (pn_close_parenthesis -> empty .)
    SEMICOLON       reduce using rule 73 (pn_close_parenthesis -> empty .)
    RIGHT_BRACKET   reduce using rule 73 (pn_close_parenthesis -> empty .)
    COMMA           reduce using rule 73 (pn_close_parenthesis -> empty .)
    LEFT_PARENTHESIS reduce using rule 73 (pn_close_parenthesis -> empty .)
    CONST_BOOL      reduce using rule 73 (pn_close_parenthesis -> empty .)
    CONST_STRING    reduce using rule 73 (pn_close_parenthesis -> empty .)
    CALL            reduce using rule 73 (pn_close_parenthesis -> empty .)
    CONST_INT       reduce using rule 73 (pn_close_parenthesis -> empty .)
    CONST_FLOAT     reduce using rule 73 (pn_close_parenthesis -> empty .)
    ID              reduce using rule 73 (pn_close_parenthesis -> empty .)


state 231

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec . RIGHT_CURLYB condicional_else

    RIGHT_CURLYB    shift and go to state 251


state 232

    (38) all_logical_rec -> AND pn_operator logical_exp . pn_all_logical all_logical_rec
    (41) pn_all_logical -> . empty
    (121) empty -> .

    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_all_logical                 shift and go to state 252
    empty                          shift and go to state 150

state 233

    (39) all_logical_rec -> OR pn_operator logical_exp . pn_all_logical all_logical_rec
    (41) pn_all_logical -> . empty
    (121) empty -> .

    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_all_logical                 shift and go to state 253
    empty                          shift and go to state 150

state 234

    (43) logical_exp_rec -> GREATER_THAN pn_operator exp . pn_logical_exp logical_exp_rec
    (48) pn_logical_exp -> . empty
    (121) empty -> .

    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_logical_exp                 shift and go to state 254
    empty                          shift and go to state 152

state 235

    (44) logical_exp_rec -> LESS_THAN pn_operator exp . pn_logical_exp logical_exp_rec
    (48) pn_logical_exp -> . empty
    (121) empty -> .

    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_logical_exp                 shift and go to state 255
    empty                          shift and go to state 152

state 236

    (45) logical_exp_rec -> EQUAL_COMPARE pn_operator exp . pn_logical_exp logical_exp_rec
    (48) pn_logical_exp -> . empty
    (121) empty -> .

    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_logical_exp                 shift and go to state 256
    empty                          shift and go to state 152

state 237

    (46) logical_exp_rec -> NOT_EQUAL pn_operator exp . pn_logical_exp logical_exp_rec
    (48) pn_logical_exp -> . empty
    (121) empty -> .

    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_logical_exp                 shift and go to state 257
    empty                          shift and go to state 152

state 238

    (51) exp_rec -> PLUS pn_operator termino . pn_exp exp_rec
    (50) pn_exp -> . empty
    (121) empty -> .

    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_exp                         shift and go to state 258
    empty                          shift and go to state 154

state 239

    (52) exp_rec -> MINUS pn_operator termino . pn_exp exp_rec
    (50) pn_exp -> . empty
    (121) empty -> .

    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_exp                         shift and go to state 259
    empty                          shift and go to state 154

state 240

    (55) termino_rec -> MULTIPLICATION pn_operator factor . pn_termino termino_rec
    (58) pn_termino -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_termino                     shift and go to state 260
    empty                          shift and go to state 156

state 241

    (56) termino_rec -> DIVISION pn_operator factor . pn_termino termino_rec
    (58) pn_termino -> . empty
    (121) empty -> .

    MULTIPLICATION  reduce using rule 121 (empty -> .)
    DIVISION        reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_termino                     shift and go to state 261
    empty                          shift and go to state 156

state 242

    (91) while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .

    IF              reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    WHILE           reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    READ            reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    WRITE           reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    CALL            reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    ID              reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    RIGHT_CURLYB    reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)
    RETURN          reduce using rule 91 (while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop .)


state 243

    (92) while_loop -> LEFT_CURLYB . bloque_rec RIGHT_CURLYB pn_while_jump1
    (119) bloque_rec -> . bloque bloque_rec
    (120) bloque_rec -> . empty
    (28) bloque -> . asignacion
    (29) bloque -> . condicional
    (30) bloque -> . while
    (31) bloque -> . read
    (32) bloque -> . write
    (33) bloque -> . func_call SEMICOLON
    (121) empty -> .
    (34) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (97) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    CALL            shift and go to state 90
    ID              shift and go to state 91

    bloque_rec                     shift and go to state 262
    bloque                         shift and go to state 77
    empty                          shift and go to state 78
    asignacion                     shift and go to state 79
    condicional                    shift and go to state 80
    while                          shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    func_call                      shift and go to state 84
    var                            shift and go to state 85

state 244

    (99) write_rec1 -> MORE all_logical pn_write_quad . write_rec1
    (99) write_rec1 -> . MORE all_logical pn_write_quad write_rec1
    (100) write_rec1 -> . empty
    (121) empty -> .

    MORE            shift and go to state 200
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    write_rec1                     shift and go to state 263
    empty                          shift and go to state 201

state 245

    (102) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec . pn_close_parenthesis RIGHT_PARENTHESIS
    (73) pn_close_parenthesis -> . empty
    (121) empty -> .

    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_close_parenthesis           shift and go to state 264
    empty                          shift and go to state 230

state 246

    (105) func_call_rec -> all_logical . pn_param_match func_call_rec1
    (108) pn_param_match -> . empty
    (121) empty -> .

    COMMA           reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    pn_param_match                 shift and go to state 265
    empty                          shift and go to state 266

state 247

    (16) varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .

    EQUAL_ASSIGN    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    MULTIPLICATION  reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    DIVISION        reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    PLUS            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    MINUS           reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    EQUAL_COMPARE   reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    AND             reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    OR              reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    MORE            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    COMMA           reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_BOOL      reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_STRING    reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CALL            reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_INT       reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    CONST_FLOAT     reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)
    ID              reduce using rule 16 (varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET .)


state 248

    (109) func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .

    VAR             reduce using rule 109 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    LIST            reduce using rule 109 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    FUNC            reduce using rule 109 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)
    MAIN            reduce using rule 109 (func_dec -> FUNC return_module pn_return_type ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable RIGHT_PARENTHESIS LEFT_CURLYB pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func .)


state 249

    (114) pn_end_func -> empty .

    VAR             reduce using rule 114 (pn_end_func -> empty .)
    LIST            reduce using rule 114 (pn_end_func -> empty .)
    FUNC            reduce using rule 114 (pn_end_func -> empty .)
    MAIN            reduce using rule 114 (pn_end_func -> empty .)


state 250

    (117) func_return -> RETURN all_logical SEMICOLON .

    RIGHT_CURLYB    reduce using rule 117 (func_return -> RETURN all_logical SEMICOLON .)


state 251

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB . condicional_else
    (86) condicional_else -> . ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
    (87) condicional_else -> . pn_condicional_final
    (90) pn_condicional_final -> . empty
    (121) empty -> .

    ELSE            shift and go to state 268
    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    condicional_else               shift and go to state 267
    pn_condicional_final           shift and go to state 269
    empty                          shift and go to state 270

state 252

    (38) all_logical_rec -> AND pn_operator logical_exp pn_all_logical . all_logical_rec
    (38) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (39) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (40) all_logical_rec -> . empty
    (121) empty -> .

    AND             shift and go to state 178
    OR              shift and go to state 179
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    all_logical_rec                shift and go to state 271
    empty                          shift and go to state 180

state 253

    (39) all_logical_rec -> OR pn_operator logical_exp pn_all_logical . all_logical_rec
    (38) all_logical_rec -> . AND pn_operator logical_exp pn_all_logical all_logical_rec
    (39) all_logical_rec -> . OR pn_operator logical_exp pn_all_logical all_logical_rec
    (40) all_logical_rec -> . empty
    (121) empty -> .

    AND             shift and go to state 178
    OR              shift and go to state 179
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    all_logical_rec                shift and go to state 272
    empty                          shift and go to state 180

state 254

    (43) logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp . logical_exp_rec
    (43) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (45) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . empty
    (121) empty -> .

    GREATER_THAN    shift and go to state 182
    LESS_THAN       shift and go to state 183
    EQUAL_COMPARE   shift and go to state 184
    NOT_EQUAL       shift and go to state 185
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    logical_exp_rec                shift and go to state 273
    empty                          shift and go to state 186

state 255

    (44) logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp . logical_exp_rec
    (43) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (45) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . empty
    (121) empty -> .

    GREATER_THAN    shift and go to state 182
    LESS_THAN       shift and go to state 183
    EQUAL_COMPARE   shift and go to state 184
    NOT_EQUAL       shift and go to state 185
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    logical_exp_rec                shift and go to state 274
    empty                          shift and go to state 186

state 256

    (45) logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp . logical_exp_rec
    (43) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (45) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . empty
    (121) empty -> .

    GREATER_THAN    shift and go to state 182
    LESS_THAN       shift and go to state 183
    EQUAL_COMPARE   shift and go to state 184
    NOT_EQUAL       shift and go to state 185
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    logical_exp_rec                shift and go to state 275
    empty                          shift and go to state 186

state 257

    (46) logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp . logical_exp_rec
    (43) logical_exp_rec -> . GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (44) logical_exp_rec -> . LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec
    (45) logical_exp_rec -> . EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec
    (46) logical_exp_rec -> . NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec
    (47) logical_exp_rec -> . empty
    (121) empty -> .

    GREATER_THAN    shift and go to state 182
    LESS_THAN       shift and go to state 183
    EQUAL_COMPARE   shift and go to state 184
    NOT_EQUAL       shift and go to state 185
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    logical_exp_rec                shift and go to state 276
    empty                          shift and go to state 186

state 258

    (51) exp_rec -> PLUS pn_operator termino pn_exp . exp_rec
    (51) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (52) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (53) exp_rec -> . empty
    (121) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 188
    MINUS           shift and go to state 189
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

  ! MINUS           [ reduce using rule 121 (empty -> .) ]

    exp_rec                        shift and go to state 277
    empty                          shift and go to state 190

state 259

    (52) exp_rec -> MINUS pn_operator termino pn_exp . exp_rec
    (51) exp_rec -> . PLUS pn_operator termino pn_exp exp_rec
    (52) exp_rec -> . MINUS pn_operator termino pn_exp exp_rec
    (53) exp_rec -> . empty
    (121) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 188
    MINUS           shift and go to state 189
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

  ! MINUS           [ reduce using rule 121 (empty -> .) ]

    exp_rec                        shift and go to state 278
    empty                          shift and go to state 190

state 260

    (55) termino_rec -> MULTIPLICATION pn_operator factor pn_termino . termino_rec
    (55) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (56) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (57) termino_rec -> . empty
    (121) empty -> .

    MULTIPLICATION  shift and go to state 192
    DIVISION        shift and go to state 193
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    termino_rec                    shift and go to state 279
    empty                          shift and go to state 194

state 261

    (56) termino_rec -> DIVISION pn_operator factor pn_termino . termino_rec
    (55) termino_rec -> . MULTIPLICATION pn_operator factor pn_termino termino_rec
    (56) termino_rec -> . DIVISION pn_operator factor pn_termino termino_rec
    (57) termino_rec -> . empty
    (121) empty -> .

    MULTIPLICATION  shift and go to state 192
    DIVISION        shift and go to state 193
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    EQUAL_COMPARE   reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)
    MORE            reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    RIGHT_BRACKET   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    termino_rec                    shift and go to state 280
    empty                          shift and go to state 194

state 262

    (92) while_loop -> LEFT_CURLYB bloque_rec . RIGHT_CURLYB pn_while_jump1

    RIGHT_CURLYB    shift and go to state 281


state 263

    (99) write_rec1 -> MORE all_logical pn_write_quad write_rec1 .

    RIGHT_PARENTHESIS reduce using rule 99 (write_rec1 -> MORE all_logical pn_write_quad write_rec1 .)


state 264

    (102) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 282


state 265

    (105) func_call_rec -> all_logical pn_param_match . func_call_rec1
    (106) func_call_rec1 -> . COMMA all_logical pn_param_match func_call_rec
    (107) func_call_rec1 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 284
    RIGHT_PARENTHESIS reduce using rule 121 (empty -> .)

    func_call_rec1                 shift and go to state 283
    empty                          shift and go to state 285

state 266

    (108) pn_param_match -> empty .

    COMMA           reduce using rule 108 (pn_param_match -> empty .)
    RIGHT_PARENTHESIS reduce using rule 108 (pn_param_match -> empty .)
    LEFT_PARENTHESIS reduce using rule 108 (pn_param_match -> empty .)
    CONST_BOOL      reduce using rule 108 (pn_param_match -> empty .)
    CONST_STRING    reduce using rule 108 (pn_param_match -> empty .)
    CALL            reduce using rule 108 (pn_param_match -> empty .)
    CONST_INT       reduce using rule 108 (pn_param_match -> empty .)
    MINUS           reduce using rule 108 (pn_param_match -> empty .)
    CONST_FLOAT     reduce using rule 108 (pn_param_match -> empty .)
    ID              reduce using rule 108 (pn_param_match -> empty .)


state 267

    (85) condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .

    IF              reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    WHILE           reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    READ            reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    WRITE           reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    CALL            reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    ID              reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    RIGHT_CURLYB    reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)
    RETURN          reduce using rule 85 (condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else .)


state 268

    (86) condicional_else -> ELSE . pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final
    (89) pn_condicional_else -> . empty
    (121) empty -> .

    LEFT_CURLYB     reduce using rule 121 (empty -> .)

    pn_condicional_else            shift and go to state 286
    empty                          shift and go to state 287

state 269

    (87) condicional_else -> pn_condicional_final .

    IF              reduce using rule 87 (condicional_else -> pn_condicional_final .)
    WHILE           reduce using rule 87 (condicional_else -> pn_condicional_final .)
    READ            reduce using rule 87 (condicional_else -> pn_condicional_final .)
    WRITE           reduce using rule 87 (condicional_else -> pn_condicional_final .)
    CALL            reduce using rule 87 (condicional_else -> pn_condicional_final .)
    ID              reduce using rule 87 (condicional_else -> pn_condicional_final .)
    RIGHT_CURLYB    reduce using rule 87 (condicional_else -> pn_condicional_final .)
    RETURN          reduce using rule 87 (condicional_else -> pn_condicional_final .)


state 270

    (90) pn_condicional_final -> empty .

    IF              reduce using rule 90 (pn_condicional_final -> empty .)
    WHILE           reduce using rule 90 (pn_condicional_final -> empty .)
    READ            reduce using rule 90 (pn_condicional_final -> empty .)
    WRITE           reduce using rule 90 (pn_condicional_final -> empty .)
    CALL            reduce using rule 90 (pn_condicional_final -> empty .)
    ID              reduce using rule 90 (pn_condicional_final -> empty .)
    RIGHT_CURLYB    reduce using rule 90 (pn_condicional_final -> empty .)
    RETURN          reduce using rule 90 (pn_condicional_final -> empty .)


state 271

    (38) all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    LEFT_PARENTHESIS reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_BOOL      reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_STRING    reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CALL            reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_INT       reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    MINUS           reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_FLOAT     reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)
    ID              reduce using rule 38 (all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec .)


state 272

    (39) all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .

    RIGHT_PARENTHESIS reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    MORE            reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    SEMICOLON       reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    RIGHT_BRACKET   reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    COMMA           reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    LEFT_PARENTHESIS reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_BOOL      reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_STRING    reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CALL            reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_INT       reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    MINUS           reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    CONST_FLOAT     reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)
    ID              reduce using rule 39 (all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec .)


state 273

    (43) logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 43 (logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec .)


state 274

    (44) logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 44 (logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec .)


state 275

    (45) logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 45 (logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec .)


state 276

    (46) logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .

    AND             reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    OR              reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    MORE            reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    SEMICOLON       reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    RIGHT_BRACKET   reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    COMMA           reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    LEFT_PARENTHESIS reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_BOOL      reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_STRING    reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CALL            reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_INT       reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    MINUS           reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    CONST_FLOAT     reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)
    ID              reduce using rule 46 (logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec .)


state 277

    (51) exp_rec -> PLUS pn_operator termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    AND             reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    OR              reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    MORE            reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    COMMA           reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    LEFT_PARENTHESIS reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_BOOL      reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_STRING    reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CALL            reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_INT       reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    MINUS           reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    CONST_FLOAT     reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)
    ID              reduce using rule 51 (exp_rec -> PLUS pn_operator termino pn_exp exp_rec .)


state 278

    (52) exp_rec -> MINUS pn_operator termino pn_exp exp_rec .

    GREATER_THAN    reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    LESS_THAN       reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    EQUAL_COMPARE   reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    NOT_EQUAL       reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    AND             reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    OR              reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    RIGHT_PARENTHESIS reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    MORE            reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    SEMICOLON       reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    RIGHT_BRACKET   reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    COMMA           reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    LEFT_PARENTHESIS reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_BOOL      reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_STRING    reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CALL            reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_INT       reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    MINUS           reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    CONST_FLOAT     reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)
    ID              reduce using rule 52 (exp_rec -> MINUS pn_operator termino pn_exp exp_rec .)


state 279

    (55) termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .

    PLUS            reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    MINUS           reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    AND             reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    OR              reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    MORE            reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    COMMA           reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    LEFT_PARENTHESIS reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_BOOL      reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_STRING    reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CALL            reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_INT       reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    CONST_FLOAT     reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)
    ID              reduce using rule 55 (termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec .)


state 280

    (56) termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .

    PLUS            reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    MINUS           reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    GREATER_THAN    reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    LESS_THAN       reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    EQUAL_COMPARE   reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    NOT_EQUAL       reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    AND             reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    OR              reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    RIGHT_PARENTHESIS reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    MORE            reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    SEMICOLON       reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    RIGHT_BRACKET   reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    COMMA           reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    LEFT_PARENTHESIS reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_BOOL      reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_STRING    reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CALL            reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_INT       reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    CONST_FLOAT     reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)
    ID              reduce using rule 56 (termino_rec -> DIVISION pn_operator factor pn_termino termino_rec .)


state 281

    (92) while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB . pn_while_jump1
    (95) pn_while_jump1 -> . empty
    (121) empty -> .

    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    pn_while_jump1                 shift and go to state 288
    empty                          shift and go to state 289

state 282

    (102) func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MULTIPLICATION  reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    DIVISION        reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    EQUAL_COMPARE   reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    AND             reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    OR              reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    MORE            reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_BOOL      reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_STRING    reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CALL            reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_INT       reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    CONST_FLOAT     reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)
    ID              reduce using rule 102 (func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS .)


state 283

    (105) func_call_rec -> all_logical pn_param_match func_call_rec1 .

    RIGHT_PARENTHESIS reduce using rule 105 (func_call_rec -> all_logical pn_param_match func_call_rec1 .)


state 284

    (106) func_call_rec1 -> COMMA . all_logical pn_param_match func_call_rec
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 290
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 285

    (107) func_call_rec1 -> empty .

    RIGHT_PARENTHESIS reduce using rule 107 (func_call_rec1 -> empty .)


state 286

    (86) condicional_else -> ELSE pn_condicional_else . LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final

    LEFT_CURLYB     shift and go to state 291


state 287

    (89) pn_condicional_else -> empty .

    LEFT_CURLYB     reduce using rule 89 (pn_condicional_else -> empty .)


state 288

    (92) while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .

    IF              reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    WHILE           reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    READ            reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    WRITE           reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    CALL            reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    ID              reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    RIGHT_CURLYB    reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)
    RETURN          reduce using rule 92 (while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1 .)


state 289

    (95) pn_while_jump1 -> empty .

    IF              reduce using rule 95 (pn_while_jump1 -> empty .)
    WHILE           reduce using rule 95 (pn_while_jump1 -> empty .)
    READ            reduce using rule 95 (pn_while_jump1 -> empty .)
    WRITE           reduce using rule 95 (pn_while_jump1 -> empty .)
    CALL            reduce using rule 95 (pn_while_jump1 -> empty .)
    ID              reduce using rule 95 (pn_while_jump1 -> empty .)
    RIGHT_CURLYB    reduce using rule 95 (pn_while_jump1 -> empty .)
    RETURN          reduce using rule 95 (pn_while_jump1 -> empty .)


state 290

    (106) func_call_rec1 -> COMMA all_logical . pn_param_match func_call_rec
    (108) pn_param_match -> . empty
    (121) empty -> .

    LEFT_PARENTHESIS reduce using rule 121 (empty -> .)
    CONST_BOOL      reduce using rule 121 (empty -> .)
    CONST_STRING    reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    CONST_INT       reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    CONST_FLOAT     reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)

    pn_param_match                 shift and go to state 292
    empty                          shift and go to state 266

state 291

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB . bloque_rec RIGHT_CURLYB pn_condicional_final
    (119) bloque_rec -> . bloque bloque_rec
    (120) bloque_rec -> . empty
    (28) bloque -> . asignacion
    (29) bloque -> . condicional
    (30) bloque -> . while
    (31) bloque -> . read
    (32) bloque -> . write
    (33) bloque -> . func_call SEMICOLON
    (121) empty -> .
    (34) asignacion -> . var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON
    (85) condicional -> . IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else
    (91) while -> . WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop
    (96) read -> . READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON
    (97) write -> . WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (14) var -> . ID varArray

    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    IF              shift and go to state 86
    WHILE           shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    CALL            shift and go to state 90
    ID              shift and go to state 91

    bloque_rec                     shift and go to state 293
    bloque                         shift and go to state 77
    empty                          shift and go to state 78
    asignacion                     shift and go to state 79
    condicional                    shift and go to state 80
    while                          shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    func_call                      shift and go to state 84
    var                            shift and go to state 85

state 292

    (106) func_call_rec1 -> COMMA all_logical pn_param_match . func_call_rec
    (105) func_call_rec -> . all_logical pn_param_match func_call_rec1
    (37) all_logical -> . logical_exp pn_all_logical all_logical_rec
    (42) logical_exp -> . exp pn_logical_exp logical_exp_rec
    (49) exp -> . termino pn_exp exp_rec
    (54) termino -> . factor pn_termino termino_rec
    (59) factor -> . varcte
    (60) factor -> . LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis
    (61) factor -> . func_call
    (62) varcte -> . cte_int pn_add_constant
    (63) varcte -> . cte_float pn_add_constant
    (64) varcte -> . CONST_BOOL pn_add_constant
    (65) varcte -> . CONST_STRING empty empty
    (66) varcte -> . var
    (102) func_call -> . CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS
    (67) cte_int -> . CONST_INT
    (68) cte_int -> . MINUS CONST_INT
    (69) cte_float -> . CONST_FLOAT
    (70) cte_float -> . MINUS CONST_FLOAT
    (14) var -> . ID varArray

    LEFT_PARENTHESIS shift and go to state 119
    CONST_BOOL      shift and go to state 129
    CONST_STRING    shift and go to state 130
    CALL            shift and go to state 90
    CONST_INT       shift and go to state 93
    MINUS           shift and go to state 132
    CONST_FLOAT     shift and go to state 133
    ID              shift and go to state 91

    all_logical                    shift and go to state 246
    func_call_rec                  shift and go to state 294
    logical_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    func_call                      shift and go to state 126
    cte_int                        shift and go to state 127
    cte_float                      shift and go to state 128
    var                            shift and go to state 131

state 293

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec . RIGHT_CURLYB pn_condicional_final

    RIGHT_CURLYB    shift and go to state 295


state 294

    (106) func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec .

    RIGHT_PARENTHESIS reduce using rule 106 (func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec .)


state 295

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB . pn_condicional_final
    (90) pn_condicional_final -> . empty
    (121) empty -> .

    IF              reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    CALL            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    RIGHT_CURLYB    reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    pn_condicional_final           shift and go to state 296
    empty                          shift and go to state 270

state 296

    (86) condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .

    IF              reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    WHILE           reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    READ            reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    WRITE           reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    CALL            reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    ID              reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    RIGHT_CURLYB    reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)
    RETURN          reduce using rule 86 (condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 8 resolved as shift
WARNING: shift/reduce conflict for LIST in state 8 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 8 resolved as shift
WARNING: shift/reduce conflict for VAR in state 11 resolved as shift
WARNING: shift/reduce conflict for LIST in state 11 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 11 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 258 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 259 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (init_dec -> empty)
WARNING: rejected rule (class_dec -> empty) in state 10
