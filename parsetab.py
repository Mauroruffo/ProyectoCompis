
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUAL_ASSIGNleftIDleftLEFT_CURLYBRIGHT_CURLYBleftLEFT_BRACKETRIGHT_BRACKETleftLESS_THANGREATER_THANNOT_EQUALLESS_EQUALGREATER_EQUALEQUAL_COMPAREleftANDORNEGATIONleftMINUSPLUSleftMULTIPLICATIONDIVISIONleftLEFT_PARENTHESISRIGHT_PARENTHESISAND ATTRIBUTES BOOL CALL CALL CHAR CLASS COLON COMMA CONST_BOOL CONST_CHAR CONST_FLOAT CONST_INT CONST_STRING DEF DIVISION DO ELSE ELSEIF EQUAL_ASSIGN EQUAL_COMPARE FLOAT FUNC GREATER_EQUAL GREATER_THAN ID IF INT LEFT_BRACKET LEFT_CURLYB LEFT_PARENTHESIS LESS_EQUAL LESS_THAN LIST LIST MAIN METHODS MINUS MORE MOREBOOL MULTIPLICATION NEGATION NOT_EQUAL NUMBER OR PERIOD PLUS PROGRAM READ RETURN RIGHT_BRACKET RIGHT_CURLYB RIGHT_PARENTHESIS SEMICOLON STRING STRING VAR VOID WHILE WRITE program : PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main  main : MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main vars_rec : var_dec vars_rec\n                    | empty  pn_internal_scope : empty  pn_start_program : empty  pn_start_func : empty  init_dec : empty \n                | dec init_dec  dec :  var_dec \n            | func_dec \n            | class_dec  class_dec : empty var : ID varArray varArray :  empty \n                | pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return  pn_array_access1 : empty  pn_array_access2 : empty  pn_array_access3 : empty  pn_access_return : empty  var_dec :  VAR tipo pn_var_type  pn_value_type ID pn_current_name SEMICOLON pn_add_variable \n                | LIST tipo pn_var_type  pn_value_type ID pn_current_name LEFT_BRACKET  cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON list1 : empty  pn_add_dim_list : empty pn_add_dim : empty pn_var_type : empty  pn_value_type : empty  pn_current_name : empty  pn_add_variable : empty  bloque : asignacion \n                | condicional \n                | while \n                | read \n                | write \n                | func_call SEMICOLON  asignacion : var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON  pn_var_assign : empty  pn_operator : empty  all_logical : logical_exp pn_all_logical all_logical_rec  all_logical_rec : AND pn_operator logical_exp pn_all_logical all_logical_rec \n                        | OR pn_operator logical_exp pn_all_logical all_logical_rec \n                        | empty pn_all_logical : empty  logical_exp : exp pn_logical_exp logical_exp_rec  logical_exp_rec : GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec \n                        | LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec \n                        | EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec \n                        | NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec \n                        | empty pn_logical_exp : empty  exp : termino pn_exp exp_rec  pn_exp : empty  exp_rec : PLUS pn_operator termino pn_exp exp_rec \n                | MINUS pn_operator termino pn_exp exp_rec \n                | empty termino :  factor pn_termino termino_rec  termino_rec : MULTIPLICATION pn_operator factor pn_termino termino_rec \n                    | DIVISION pn_operator factor pn_termino termino_rec \n                    | empty pn_termino : empty  factor : varcte \n                | LEFT_PARENTHESIS pn_open_parenthesis all_logical  RIGHT_PARENTHESIS pn_close_parenthesis \n                | func_call empty varcte : cte_int pn_add_constant \n                | cte_float pn_add_constant \n                | CONST_BOOL pn_add_constant \n                | CONST_STRING empty empty\n                | var  cte_int : CONST_INT \n                | MINUS CONST_INT  cte_float : CONST_FLOAT \n                | MINUS CONST_FLOAT  pn_add_constant : empty  pn_open_parenthesis : empty  pn_close_parenthesis : empty  tipo : INT \n            | FLOAT \n            | BOOL \n            | STRING  return_module : tipo \n                | VOID  parametro : tipo ID parametro_rec \n                    | empty  parametro_rec : COMMA tipo ID parametro_rec \n                        | empty  condicional : IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else  condicional_else : ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final \n                        | pn_condicional_final  pn_condicional : empty  pn_condicional_else : empty  pn_condicional_final : empty  while : WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop while_loop : LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1  pn_while : empty  pn_while_jump : empty  pn_while_jump1 : empty  read : READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON  write : WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON  write_rec : all_logical pn_write_quad write_rec1  write_rec1 : MORE all_logical pn_write_quad write_rec1 \n                    | empty  pn_write_quad : empty  func_call : CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS  pn_verify_func : empty  pn_param_counter : empty  func_call_rec : all_logical pn_param_match func_call_rec1  func_call_rec1 : COMMA all_logical pn_param_match func_call_rec\n                        | empty  pn_param_match : empty  func_dec : FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func  pn_add_param_vartable : empty  pn_gen_vartable : empty  pn_func_quad : empty  pn_end_main : empty pn_end_func : empty  pn_add_func : empty  pn_return_type : empty  func_return : RETURN all_logical SEMICOLON \n                    | RETURN SEMICOLON  bloque_rec : bloque bloque_rec \n                    | empty empty :  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,94,112,113,],[0,-1,-122,-2,-114,]),'ID':([2,3,4,5,6,21,22,23,24,25,26,27,28,29,32,33,34,37,38,39,46,51,53,54,55,56,61,62,63,64,65,67,75,77,78,79,80,81,88,89,91,93,96,99,102,103,105,106,110,114,115,117,118,119,120,121,122,123,124,125,126,127,129,130,136,139,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,169,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,197,199,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,222,225,227,228,230,231,232,233,234,235,236,237,238,239,240,241,245,247,248,249,250,251,252,253,254,255,256,257,258,263,264,265,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,293,294,295,296,297,300,301,],[-122,-122,-6,7,-7,-122,-76,-77,-78,-79,-122,35,-80,-81,-122,-26,-122,43,-27,44,-122,60,-122,-122,-4,-122,89,-112,-3,-21,-29,-69,89,-30,-31,-32,-33,-34,104,-122,-70,111,-35,89,89,89,-14,-15,-122,89,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,89,-122,-122,89,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,89,-18,-122,-36,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,-97,-98,89,-122,-105,89,-113,-122,89,89,-38,89,89,89,89,89,89,89,89,89,89,-22,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-92,89,-122,89,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-86,-88,-91,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-122,-103,89,-93,-96,-122,89,89,-122,-87,]),'SEMICOLON':([7,43,47,48,67,82,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,168,174,177,178,183,184,187,188,191,192,202,203,206,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,264,265,267,273,274,275,276,277,278,279,280,281,282,284,],[8,-122,56,-28,-69,96,-122,-70,-14,-15,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,170,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,194,195,-122,-39,-42,-44,-49,-51,-55,-56,-59,-67,225,-23,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,268,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-16,-20,290,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,]),'MAIN':([8,9,10,11,12,13,14,20,56,64,65,225,266,288,289,],[-122,19,-8,-122,-10,-11,-12,-9,-122,-21,-29,-22,-122,-110,-115,]),'VAR':([8,10,11,12,13,14,46,54,56,64,65,110,225,266,288,289,],[15,-13,15,-10,-11,-12,15,15,-122,-21,-29,15,-22,-122,-110,-115,]),'LIST':([8,10,11,12,13,14,46,54,56,64,65,110,225,266,288,289,],[16,-13,16,-10,-11,-12,16,16,-122,-21,-29,16,-22,-122,-110,-115,]),'FUNC':([8,10,11,12,13,14,56,64,65,225,266,288,289,],[17,-13,17,-10,-11,-12,-122,-21,-29,-22,-122,-110,-115,]),'INT':([15,16,17,45,72,],[22,22,22,22,22,]),'FLOAT':([15,16,17,45,72,],[23,23,23,23,23,]),'BOOL':([15,16,17,45,72,],[24,24,24,24,24,]),'STRING':([15,16,17,45,72,],[25,25,25,25,25,]),'VOID':([17,],[29,]),'LEFT_PARENTHESIS':([19,30,31,35,40,41,67,84,85,86,87,89,91,99,100,101,103,104,105,106,114,115,117,118,119,120,121,122,123,124,125,126,127,129,130,134,135,136,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,197,199,200,206,208,209,210,211,212,213,214,215,216,217,218,222,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,263,264,265,273,274,275,276,277,278,279,280,281,282,284,286,295,297,],[-122,36,-5,-122,45,-116,-69,99,-122,102,103,-122,-70,115,130,-94,115,-122,-14,-15,115,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,115,165,-104,-122,115,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,115,-18,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,115,-122,-105,-122,115,-38,115,115,115,115,115,115,115,115,115,115,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,115,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,115,-122,115,]),'RIGHT_PARENTHESIS':([36,45,50,52,58,59,60,67,69,70,71,73,89,91,105,106,111,116,117,118,119,120,121,122,123,124,125,126,127,129,131,132,133,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,163,164,171,174,177,178,183,184,187,188,191,192,196,198,206,221,227,228,230,231,232,233,234,235,236,237,238,239,242,243,244,245,249,250,251,252,253,254,255,256,257,258,260,261,262,263,264,265,273,274,275,276,277,278,279,280,281,282,284,285,287,299,],[42,-122,-122,-83,-122,-111,-122,-69,92,-117,-82,-85,-122,-70,-14,-15,-122,144,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,161,162,-122,-84,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,193,-122,-102,206,-39,-42,-44,-49,-51,-55,-56,-59,-67,-99,-101,-122,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-100,284,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,-106,-108,-107,]),'LEFT_CURLYB':([42,92,144,172,173,193,219,220,270,291,292,],[46,110,-122,207,-89,-122,241,-95,-122,296,-90,]),'LEFT_BRACKET':([44,48,49,89,106,107,],[-122,-28,57,-122,-17,136,]),'IF':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,139,169,170,194,195,204,205,207,225,240,241,248,269,271,272,283,293,294,296,300,301,],[-122,-122,-122,-4,-122,84,-112,-3,-21,-29,84,-30,-31,-32,-33,-34,-35,-122,-122,-122,-36,-97,-98,84,-113,84,-22,-92,84,-122,-86,-88,-91,-122,-93,-96,84,-122,-87,]),'WHILE':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,139,169,170,194,195,204,205,207,225,240,241,248,269,271,272,283,293,294,296,300,301,],[-122,-122,-122,-4,-122,85,-112,-3,-21,-29,85,-30,-31,-32,-33,-34,-35,-122,-122,-122,-36,-97,-98,85,-113,85,-22,-92,85,-122,-86,-88,-91,-122,-93,-96,85,-122,-87,]),'READ':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,139,169,170,194,195,204,205,207,225,240,241,248,269,271,272,283,293,294,296,300,301,],[-122,-122,-122,-4,-122,86,-112,-3,-21,-29,86,-30,-31,-32,-33,-34,-35,-122,-122,-122,-36,-97,-98,86,-113,86,-22,-92,86,-122,-86,-88,-91,-122,-93,-96,86,-122,-87,]),'WRITE':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,139,169,170,194,195,204,205,207,225,240,241,248,269,271,272,283,293,294,296,300,301,],[-122,-122,-122,-4,-122,87,-112,-3,-21,-29,87,-30,-31,-32,-33,-34,-35,-122,-122,-122,-36,-97,-98,87,-113,87,-22,-92,87,-122,-86,-88,-91,-122,-93,-96,87,-122,-87,]),'CALL':([46,53,54,55,56,61,62,63,64,65,67,75,77,78,79,80,81,89,91,96,99,103,105,106,110,114,115,117,118,119,120,121,122,123,124,125,126,127,129,130,136,139,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,169,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,197,199,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,222,225,227,228,230,231,232,233,234,235,236,237,238,239,240,241,245,247,248,249,250,251,252,253,254,255,256,257,258,263,264,265,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,293,294,295,296,297,300,301,],[-122,-122,-122,-4,-122,88,-112,-3,-21,-29,-69,88,-30,-31,-32,-33,-34,-122,-70,-35,88,88,-14,-15,-122,88,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,88,-122,-122,88,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,88,-18,-122,-36,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,-97,-98,88,-122,-105,88,-113,-122,88,88,-38,88,88,88,88,88,88,88,88,88,88,-22,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-92,88,-122,88,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-86,-88,-91,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-122,-103,88,-93,-96,-122,88,88,-122,-87,]),'RIGHT_CURLYB':([46,53,54,55,56,61,62,63,64,65,74,75,76,77,78,79,80,81,95,96,170,194,195,207,225,229,240,241,246,248,259,268,269,271,272,283,290,293,294,296,298,300,301,],[-122,-122,-122,-4,-122,-122,-112,-3,-21,-29,94,-122,-121,-30,-31,-32,-33,-34,-120,-35,-36,-97,-98,-122,-22,248,-92,-122,266,-122,283,-119,-86,-88,-91,-122,-118,-93,-96,-122,300,-122,-87,]),'RETURN':([54,55,56,62,63,64,65,75,76,77,78,79,80,81,95,96,110,139,169,170,194,195,204,205,225,226,240,248,269,271,272,283,293,294,300,301,],[-122,-4,-122,-112,-3,-21,-29,-122,-121,-30,-31,-32,-33,-34,-120,-35,-122,-122,-122,-36,-97,-98,-122,-113,-22,247,-92,-122,-86,-88,-91,-122,-93,-96,-122,-87,]),'CONST_INT':([57,67,68,89,91,99,103,105,106,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,136,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,197,199,200,206,208,209,210,211,212,213,214,215,216,217,218,222,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,263,264,265,273,274,275,276,277,278,279,280,281,282,284,286,295,297,],[67,-69,91,-122,-70,67,67,-14,-15,67,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,91,-71,67,-122,67,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,67,-18,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,67,-122,-105,-122,67,-38,67,67,67,67,67,67,67,67,67,67,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,67,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,67,-122,67,]),'MINUS':([57,67,89,91,99,103,105,106,114,115,117,118,119,120,121,122,123,124,125,126,127,129,130,136,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,197,199,200,206,208,209,210,211,212,213,214,215,216,217,218,222,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,263,264,265,273,274,275,276,277,278,279,280,281,282,284,286,295,297,],[68,-69,-122,-70,128,128,-14,-15,128,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,128,-122,128,-74,-122,-43,-122,-50,186,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,128,-18,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,128,-122,-105,-122,128,-38,128,128,128,128,128,128,128,128,128,128,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,128,-122,-122,-122,-122,-122,-122,186,186,-122,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,128,-122,128,]),'COMMA':([60,67,89,91,105,106,111,117,118,119,120,121,122,123,124,125,126,127,129,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,174,177,178,183,184,187,188,191,192,206,227,228,230,231,232,233,234,235,236,237,238,239,244,245,249,250,251,252,253,254,255,256,257,258,262,263,264,265,273,274,275,276,277,278,279,280,281,282,284,],[72,-69,-122,-70,-14,-15,72,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-39,-42,-44,-49,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,286,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,]),'RIGHT_BRACKET':([65,66,67,89,90,91,105,106,108,109,117,118,119,120,121,122,123,124,125,126,127,129,137,138,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,174,177,178,183,184,187,188,191,192,201,206,223,224,227,228,230,231,232,233,234,235,236,237,238,239,245,249,250,251,252,253,254,255,256,257,258,264,265,273,274,275,276,277,278,279,280,281,282,284,],[-29,-122,-69,-122,-122,-70,-14,-15,-122,-24,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,168,-25,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-39,-42,-44,-49,-51,-55,-56,-59,-67,-122,-122,245,-19,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,]),'MULTIPLICATION':([67,89,91,105,106,120,121,122,123,124,125,126,127,129,151,152,153,154,155,156,157,158,159,192,206,227,228,238,239,245,257,258,264,265,284,],[-69,-122,-70,-14,-15,-122,-61,-122,-122,-122,-122,-122,-68,-71,189,-60,-63,-64,-73,-65,-66,-122,-72,-67,-122,-62,-75,-122,-122,-122,189,189,-16,-20,-103,]),'DIVISION':([67,89,91,105,106,120,121,122,123,124,125,126,127,129,151,152,153,154,155,156,157,158,159,192,206,227,228,238,239,245,257,258,264,265,284,],[-69,-122,-70,-14,-15,-122,-61,-122,-122,-122,-122,-122,-68,-71,190,-60,-63,-64,-73,-65,-66,-122,-72,-67,-122,-62,-75,-122,-122,-122,190,190,-16,-20,-103,]),'PLUS':([67,89,91,105,106,119,120,121,122,123,124,125,126,127,129,149,150,151,152,153,154,155,156,157,158,159,188,191,192,206,227,228,236,237,238,239,245,255,256,257,258,264,265,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,185,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,185,185,-122,-122,-16,-20,-57,-58,-103,]),'GREATER_THAN':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,147,148,149,150,151,152,153,154,155,156,157,158,159,184,187,188,191,192,206,227,228,232,233,234,235,236,237,238,239,245,251,252,253,254,255,256,257,258,264,265,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,179,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,179,179,179,179,-122,-122,-122,-122,-16,-20,-53,-54,-57,-58,-103,]),'LESS_THAN':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,147,148,149,150,151,152,153,154,155,156,157,158,159,184,187,188,191,192,206,227,228,232,233,234,235,236,237,238,239,245,251,252,253,254,255,256,257,258,264,265,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,180,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,180,180,180,180,-122,-122,-122,-122,-16,-20,-53,-54,-57,-58,-103,]),'EQUAL_COMPARE':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,147,148,149,150,151,152,153,154,155,156,157,158,159,184,187,188,191,192,206,227,228,232,233,234,235,236,237,238,239,245,251,252,253,254,255,256,257,258,264,265,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,181,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,181,181,181,181,-122,-122,-122,-122,-16,-20,-53,-54,-57,-58,-103,]),'NOT_EQUAL':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,147,148,149,150,151,152,153,154,155,156,157,158,159,184,187,188,191,192,206,227,228,232,233,234,235,236,237,238,239,245,251,252,253,254,255,256,257,258,264,265,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,182,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,182,182,182,182,-122,-122,-122,-122,-16,-20,-53,-54,-57,-58,-103,]),'AND':([67,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,178,183,184,187,188,191,192,206,227,228,230,231,232,233,234,235,236,237,238,239,245,249,250,251,252,253,254,255,256,257,258,264,265,275,276,277,278,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,175,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-44,-49,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,175,175,-122,-122,-122,-122,-122,-122,-122,-122,-16,-20,-45,-46,-47,-48,-53,-54,-57,-58,-103,]),'OR':([67,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,178,183,184,187,188,191,192,206,227,228,230,231,232,233,234,235,236,237,238,239,245,249,250,251,252,253,254,255,256,257,258,264,265,275,276,277,278,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,176,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-44,-49,-51,-55,-56,-59,-67,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,176,176,-122,-122,-122,-122,-122,-122,-122,-122,-16,-20,-45,-46,-47,-48,-53,-54,-57,-58,-103,]),'MORE':([67,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,163,164,174,177,178,183,184,187,188,191,192,206,221,227,228,230,231,232,233,234,235,236,237,238,239,242,245,249,250,251,252,253,254,255,256,257,258,264,265,273,274,275,276,277,278,279,280,281,282,284,],[-69,-122,-70,-14,-15,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,-122,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,197,-102,-39,-42,-44,-49,-51,-55,-56,-59,-67,-122,-122,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,197,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,]),'CONST_BOOL':([67,89,91,99,103,105,106,114,115,117,118,119,120,121,122,123,124,125,126,127,129,130,136,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,197,199,200,206,208,209,210,211,212,213,214,215,216,217,218,222,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,263,264,265,273,274,275,276,277,278,279,280,281,282,284,286,295,297,],[-69,-122,-70,125,125,-14,-15,125,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,125,-122,125,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,125,-18,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,125,-122,-105,-122,125,-38,125,125,125,125,125,125,125,125,125,125,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,125,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,125,-122,125,]),'CONST_STRING':([67,89,91,99,103,105,106,114,115,117,118,119,120,121,122,123,124,125,126,127,129,130,136,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,197,199,200,206,208,209,210,211,212,213,214,215,216,217,218,222,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,263,264,265,273,274,275,276,277,278,279,280,281,282,284,286,295,297,],[-69,-122,-70,126,126,-14,-15,126,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,-71,126,-122,126,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,126,-18,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,126,-122,-105,-122,126,-38,126,126,126,126,126,126,126,126,126,126,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,126,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,126,-122,126,]),'CONST_FLOAT':([67,89,91,99,103,105,106,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,136,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,165,166,167,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,197,199,200,206,208,209,210,211,212,213,214,215,216,217,218,222,227,228,230,231,232,233,234,235,236,237,238,239,245,247,249,250,251,252,253,254,255,256,257,258,263,264,265,273,274,275,276,277,278,279,280,281,282,284,286,295,297,],[-69,-122,-70,129,129,-14,-15,129,-122,-122,-122,-122,-122,-61,-122,-122,-122,-122,-122,-68,159,-71,129,-122,129,-74,-122,-43,-122,-50,-122,-52,-122,-60,-63,-64,-73,-65,-66,-122,-72,-122,129,-18,-39,-122,-122,-42,-44,-122,-122,-122,-122,-49,-51,-122,-122,-55,-56,-122,-122,-59,-67,129,-122,-105,-122,129,-38,129,129,129,129,129,129,129,129,129,129,-62,-75,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,129,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-109,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-103,129,-122,129,]),'EQUAL_ASSIGN':([83,89,97,98,105,106,245,264,265,],[-122,-122,114,-37,-14,-15,-122,-16,-20,]),'ELSE':([248,],[270,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'pn_start_program':([2,],[3,]),'empty':([2,3,8,11,19,21,26,32,34,35,43,44,45,46,50,53,54,56,58,60,61,66,75,83,85,89,90,94,104,108,110,111,115,117,118,119,120,122,123,124,125,126,133,136,139,144,145,147,149,151,158,163,165,168,169,175,176,179,180,181,182,185,186,189,190,193,199,201,204,206,207,221,230,231,232,233,234,235,236,237,238,239,241,242,243,244,245,248,249,250,251,252,253,254,255,256,257,258,262,266,270,283,295,296,300,],[4,6,10,10,31,33,33,38,38,41,48,48,52,55,59,62,55,65,70,73,76,65,76,98,101,106,109,113,135,138,55,73,143,146,148,150,152,153,155,155,155,158,164,167,62,173,177,183,187,191,192,198,200,203,205,209,209,209,209,209,209,209,209,209,209,220,143,224,76,228,76,164,146,146,148,148,148,148,150,150,152,152,76,198,228,263,265,272,177,177,183,183,183,183,187,187,191,191,287,289,292,294,263,76,272,]),'pn_start_func':([3,],[5,]),'init_dec':([8,11,],[9,20,]),'dec':([8,11,],[11,11,]),'var_dec':([8,11,46,54,110,],[12,12,54,54,54,]),'func_dec':([8,11,],[13,13,]),'class_dec':([8,11,],[14,14,]),'main':([9,],[18,]),'tipo':([15,16,17,45,72,],[21,26,28,51,93,]),'return_module':([17,],[27,]),'pn_internal_scope':([19,],[30,]),'pn_var_type':([21,26,],[32,34,]),'pn_value_type':([32,34,],[37,39,]),'pn_add_func':([35,],[40,]),'pn_current_name':([43,44,],[47,49,]),'parametro':([45,],[50,]),'vars_rec':([46,54,110,],[53,63,139,]),'pn_add_param_vartable':([50,],[58,]),'pn_gen_vartable':([53,139,],[61,169,]),'pn_add_variable':([56,66,],[64,90,]),'cte_int':([57,99,103,114,130,142,166,197,208,210,211,212,213,214,215,216,217,218,222,247,286,297,],[66,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'pn_return_type':([58,],[69,]),'parametro_rec':([60,111,],[71,140,]),'bloque_rec':([61,75,204,207,241,296,],[74,95,226,229,259,298,]),'bloque':([61,75,204,207,241,296,],[75,75,75,75,75,75,]),'asignacion':([61,75,204,207,241,296,],[77,77,77,77,77,77,]),'condicional':([61,75,204,207,241,296,],[78,78,78,78,78,78,]),'while':([61,75,204,207,241,296,],[79,79,79,79,79,79,]),'read':([61,75,204,207,241,296,],[80,80,80,80,80,80,]),'write':([61,75,204,207,241,296,],[81,81,81,81,81,81,]),'func_call':([61,75,99,103,114,130,142,166,197,204,207,208,210,211,212,213,214,215,216,217,218,222,241,247,286,296,297,],[82,82,122,122,122,122,122,122,122,82,82,122,122,122,122,122,122,122,122,122,122,122,82,122,122,82,122,]),'var':([61,75,99,102,103,114,130,142,166,197,204,207,208,210,211,212,213,214,215,216,217,218,222,241,247,286,296,297,],[83,83,127,131,127,127,127,127,127,127,83,83,127,127,127,127,127,127,127,127,127,127,127,83,127,127,83,127,]),'pn_var_assign':([83,],[97,]),'pn_while':([85,],[100,]),'varArray':([89,],[105,]),'pn_array_access1':([89,],[107,]),'pn_add_dim_list':([90,],[108,]),'pn_end_main':([94,],[112,]),'all_logical':([99,103,114,130,142,166,197,222,247,286,297,],[116,133,141,160,171,201,221,244,267,295,244,]),'logical_exp':([99,103,114,130,142,166,197,208,210,222,247,286,297,],[117,117,117,117,117,117,117,230,231,117,117,117,117,]),'exp':([99,103,114,130,142,166,197,208,210,211,212,213,214,222,247,286,297,],[118,118,118,118,118,118,118,118,118,232,233,234,235,118,118,118,118,]),'termino':([99,103,114,130,142,166,197,208,210,211,212,213,214,215,216,222,247,286,297,],[119,119,119,119,119,119,119,119,119,119,119,119,119,236,237,119,119,119,119,]),'factor':([99,103,114,130,142,166,197,208,210,211,212,213,214,215,216,217,218,222,247,286,297,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,238,239,120,120,120,120,]),'varcte':([99,103,114,130,142,166,197,208,210,211,212,213,214,215,216,217,218,222,247,286,297,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'cte_float':([99,103,114,130,142,166,197,208,210,211,212,213,214,215,216,217,218,222,247,286,297,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'write_rec':([103,],[132,]),'pn_verify_func':([104,],[134,]),'pn_add_dim':([108,],[137,]),'pn_open_parenthesis':([115,199,],[142,222,]),'pn_all_logical':([117,230,231,],[145,249,250,]),'pn_logical_exp':([118,232,233,234,235,],[147,251,252,253,254,]),'pn_exp':([119,236,237,],[149,255,256,]),'pn_termino':([120,238,239,],[151,257,258,]),'pn_add_constant':([123,124,125,],[154,156,157,]),'pn_write_quad':([133,221,],[163,242,]),'pn_array_access2':([136,],[166,]),'pn_condicional':([144,],[172,]),'all_logical_rec':([145,249,250,],[174,273,274,]),'logical_exp_rec':([147,251,252,253,254,],[178,275,276,277,278,]),'exp_rec':([149,255,256,],[184,279,280,]),'termino_rec':([151,257,258,],[188,281,282,]),'write_rec1':([163,242,],[196,260,]),'pn_param_counter':([165,],[199,]),'list1':([168,],[202,]),'pn_func_quad':([169,],[204,]),'pn_operator':([175,176,179,180,181,182,185,186,189,190,],[208,210,211,212,213,214,215,216,217,218,]),'pn_while_jump':([193,],[219,]),'pn_array_access3':([201,],[223,]),'pn_close_parenthesis':([206,243,],[227,261,]),'while_loop':([219,],[240,]),'func_call_rec':([222,297,],[243,299,]),'func_return':([226,],[246,]),'pn_param_match':([244,295,],[262,297,]),'pn_access_return':([245,],[264,]),'condicional_else':([248,],[269,]),'pn_condicional_final':([248,300,],[271,301,]),'func_call_rec1':([262,],[285,]),'pn_end_func':([266,],[288,]),'pn_condicional_else':([270,],[291,]),'pn_while_jump1':([283,],[293,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main','program',7,'p_program','AnalizadorSintactico.py',46),
  ('main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main','main',10,'p_main','AnalizadorSintactico.py',58),
  ('vars_rec -> var_dec vars_rec','vars_rec',2,'p_vars_rec','AnalizadorSintactico.py',64),
  ('vars_rec -> empty','vars_rec',1,'p_vars_rec','AnalizadorSintactico.py',65),
  ('pn_internal_scope -> empty','pn_internal_scope',1,'p_pn_internal_scope','AnalizadorSintactico.py',68),
  ('pn_start_program -> empty','pn_start_program',1,'p_pn_start_program','AnalizadorSintactico.py',75),
  ('pn_start_func -> empty','pn_start_func',1,'p_pn_start_func','AnalizadorSintactico.py',84),
  ('init_dec -> empty','init_dec',1,'p_init_dec','AnalizadorSintactico.py',93),
  ('init_dec -> dec init_dec','init_dec',2,'p_init_dec','AnalizadorSintactico.py',94),
  ('dec -> var_dec','dec',1,'p_dec','AnalizadorSintactico.py',97),
  ('dec -> func_dec','dec',1,'p_dec','AnalizadorSintactico.py',98),
  ('dec -> class_dec','dec',1,'p_dec','AnalizadorSintactico.py',99),
  ('class_dec -> empty','class_dec',1,'p_class_dec','AnalizadorSintactico.py',102),
  ('var -> ID varArray','var',2,'p_var','AnalizadorSintactico.py',105),
  ('varArray -> empty','varArray',1,'p_varArray','AnalizadorSintactico.py',109),
  ('varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return','varArray',7,'p_varArray','AnalizadorSintactico.py',110),
  ('pn_array_access1 -> empty','pn_array_access1',1,'p_pn_array_access1','AnalizadorSintactico.py',113),
  ('pn_array_access2 -> empty','pn_array_access2',1,'p_pn_array_access2','AnalizadorSintactico.py',135),
  ('pn_array_access3 -> empty','pn_array_access3',1,'p_pn_array_access3','AnalizadorSintactico.py',152),
  ('pn_access_return -> empty','pn_access_return',1,'p_pn_access_return','AnalizadorSintactico.py',173),
  ('var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable','var_dec',8,'p_var_dec','AnalizadorSintactico.py',195),
  ('var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON','var_dec',14,'p_var_dec','AnalizadorSintactico.py',196),
  ('list1 -> empty','list1',1,'p_list1','AnalizadorSintactico.py',199),
  ('pn_add_dim_list -> empty','pn_add_dim_list',1,'p_pn_add_dim_list','AnalizadorSintactico.py',210),
  ('pn_add_dim -> empty','pn_add_dim',1,'p_pn_add_dim','AnalizadorSintactico.py',216),
  ('pn_var_type -> empty','pn_var_type',1,'p_pn_var_type','AnalizadorSintactico.py',226),
  ('pn_value_type -> empty','pn_value_type',1,'p_pn_value_type','AnalizadorSintactico.py',231),
  ('pn_current_name -> empty','pn_current_name',1,'p_pn_current_name','AnalizadorSintactico.py',236),
  ('pn_add_variable -> empty','pn_add_variable',1,'p_pn_add_variable','AnalizadorSintactico.py',241),
  ('bloque -> asignacion','bloque',1,'p_bloque','AnalizadorSintactico.py',258),
  ('bloque -> condicional','bloque',1,'p_bloque','AnalizadorSintactico.py',259),
  ('bloque -> while','bloque',1,'p_bloque','AnalizadorSintactico.py',260),
  ('bloque -> read','bloque',1,'p_bloque','AnalizadorSintactico.py',261),
  ('bloque -> write','bloque',1,'p_bloque','AnalizadorSintactico.py',262),
  ('bloque -> func_call SEMICOLON','bloque',2,'p_bloque','AnalizadorSintactico.py',263),
  ('asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON','asignacion',5,'p_asignacion','AnalizadorSintactico.py',266),
  ('pn_var_assign -> empty','pn_var_assign',1,'p_pn_var_asignacion','AnalizadorSintactico.py',284),
  ('pn_operator -> empty','pn_operator',1,'p_pn_operator','AnalizadorSintactico.py',287),
  ('all_logical -> logical_exp pn_all_logical all_logical_rec','all_logical',3,'p_all_logical','AnalizadorSintactico.py',291),
  ('all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec','all_logical_rec',5,'p_all_logical_rec','AnalizadorSintactico.py',295),
  ('all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec','all_logical_rec',5,'p_all_logical_rec','AnalizadorSintactico.py',296),
  ('all_logical_rec -> empty','all_logical_rec',1,'p_all_logical_rec','AnalizadorSintactico.py',297),
  ('pn_all_logical -> empty','pn_all_logical',1,'p_pn_all_logical','AnalizadorSintactico.py',300),
  ('logical_exp -> exp pn_logical_exp logical_exp_rec','logical_exp',3,'p_logical_exp','AnalizadorSintactico.py',304),
  ('logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',308),
  ('logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',309),
  ('logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',310),
  ('logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',311),
  ('logical_exp_rec -> empty','logical_exp_rec',1,'p_logical_exp_rec','AnalizadorSintactico.py',312),
  ('pn_logical_exp -> empty','pn_logical_exp',1,'p_pn_logical_exp','AnalizadorSintactico.py',315),
  ('exp -> termino pn_exp exp_rec','exp',3,'p_exp','AnalizadorSintactico.py',319),
  ('pn_exp -> empty','pn_exp',1,'p_pn_exp','AnalizadorSintactico.py',323),
  ('exp_rec -> PLUS pn_operator termino pn_exp exp_rec','exp_rec',5,'p_exp_rec','AnalizadorSintactico.py',327),
  ('exp_rec -> MINUS pn_operator termino pn_exp exp_rec','exp_rec',5,'p_exp_rec','AnalizadorSintactico.py',328),
  ('exp_rec -> empty','exp_rec',1,'p_exp_rec','AnalizadorSintactico.py',329),
  ('termino -> factor pn_termino termino_rec','termino',3,'p_termino','AnalizadorSintactico.py',332),
  ('termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec','termino_rec',5,'p_termino_rec','AnalizadorSintactico.py',336),
  ('termino_rec -> DIVISION pn_operator factor pn_termino termino_rec','termino_rec',5,'p_termino_rec','AnalizadorSintactico.py',337),
  ('termino_rec -> empty','termino_rec',1,'p_termino_rec','AnalizadorSintactico.py',338),
  ('pn_termino -> empty','pn_termino',1,'p_pn_termino','AnalizadorSintactico.py',341),
  ('factor -> varcte','factor',1,'p_factor','AnalizadorSintactico.py',345),
  ('factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis','factor',5,'p_factor','AnalizadorSintactico.py',346),
  ('factor -> func_call empty','factor',2,'p_factor','AnalizadorSintactico.py',347),
  ('varcte -> cte_int pn_add_constant','varcte',2,'p_varcte','AnalizadorSintactico.py',354),
  ('varcte -> cte_float pn_add_constant','varcte',2,'p_varcte','AnalizadorSintactico.py',355),
  ('varcte -> CONST_BOOL pn_add_constant','varcte',2,'p_varcte','AnalizadorSintactico.py',356),
  ('varcte -> CONST_STRING empty empty','varcte',3,'p_varcte','AnalizadorSintactico.py',357),
  ('varcte -> var','varcte',1,'p_varcte','AnalizadorSintactico.py',358),
  ('cte_int -> CONST_INT','cte_int',1,'p_cte_int','AnalizadorSintactico.py',372),
  ('cte_int -> MINUS CONST_INT','cte_int',2,'p_cte_int','AnalizadorSintactico.py',373),
  ('cte_float -> CONST_FLOAT','cte_float',1,'p_cte_float','AnalizadorSintactico.py',380),
  ('cte_float -> MINUS CONST_FLOAT','cte_float',2,'p_cte_float','AnalizadorSintactico.py',381),
  ('pn_add_constant -> empty','pn_add_constant',1,'p_pn_add_constant','AnalizadorSintactico.py',388),
  ('pn_open_parenthesis -> empty','pn_open_parenthesis',1,'p_pn_open_parenthesis','AnalizadorSintactico.py',399),
  ('pn_close_parenthesis -> empty','pn_close_parenthesis',1,'p_pn_close_parenthesis','AnalizadorSintactico.py',403),
  ('tipo -> INT','tipo',1,'p_tipo','AnalizadorSintactico.py',407),
  ('tipo -> FLOAT','tipo',1,'p_tipo','AnalizadorSintactico.py',408),
  ('tipo -> BOOL','tipo',1,'p_tipo','AnalizadorSintactico.py',409),
  ('tipo -> STRING','tipo',1,'p_tipo','AnalizadorSintactico.py',410),
  ('return_module -> tipo','return_module',1,'p_return_module','AnalizadorSintactico.py',414),
  ('return_module -> VOID','return_module',1,'p_return_module','AnalizadorSintactico.py',415),
  ('parametro -> tipo ID parametro_rec','parametro',3,'p_parametro','AnalizadorSintactico.py',419),
  ('parametro -> empty','parametro',1,'p_parametro','AnalizadorSintactico.py',420),
  ('parametro_rec -> COMMA tipo ID parametro_rec','parametro_rec',4,'p_parametro_rec','AnalizadorSintactico.py',427),
  ('parametro_rec -> empty','parametro_rec',1,'p_parametro_rec','AnalizadorSintactico.py',428),
  ('condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else','condicional',9,'p_condicional','AnalizadorSintactico.py',435),
  ('condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final','condicional_else',6,'p_condicional_else','AnalizadorSintactico.py',438),
  ('condicional_else -> pn_condicional_final','condicional_else',1,'p_condicional_else','AnalizadorSintactico.py',439),
  ('pn_condicional -> empty','pn_condicional',1,'p_pn_condicional','AnalizadorSintactico.py',442),
  ('pn_condicional_else -> empty','pn_condicional_else',1,'p_pn_condicional_else','AnalizadorSintactico.py',451),
  ('pn_condicional_final -> empty','pn_condicional_final',1,'p_pn_condicional_final','AnalizadorSintactico.py',458),
  ('while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop','while',7,'p_while','AnalizadorSintactico.py',463),
  ('while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1','while_loop',4,'p_while_loop','AnalizadorSintactico.py',466),
  ('pn_while -> empty','pn_while',1,'p_pn_while','AnalizadorSintactico.py',469),
  ('pn_while_jump -> empty','pn_while_jump',1,'p_pn_while_jump','AnalizadorSintactico.py',473),
  ('pn_while_jump1 -> empty','pn_while_jump1',1,'p_pn_while_jump1','AnalizadorSintactico.py',483),
  ('read -> READ LEFT_PARENTHESIS var RIGHT_PARENTHESIS SEMICOLON','read',5,'p_read','AnalizadorSintactico.py',492),
  ('write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON','write',5,'p_write','AnalizadorSintactico.py',498),
  ('write_rec -> all_logical pn_write_quad write_rec1','write_rec',3,'p_write_rec','AnalizadorSintactico.py',501),
  ('write_rec1 -> MORE all_logical pn_write_quad write_rec1','write_rec1',4,'p_write_rec1','AnalizadorSintactico.py',504),
  ('write_rec1 -> empty','write_rec1',1,'p_write_rec1','AnalizadorSintactico.py',505),
  ('pn_write_quad -> empty','pn_write_quad',1,'p_pn_write_quad','AnalizadorSintactico.py',508),
  ('func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS','func_call',9,'p_func_call','AnalizadorSintactico.py',516),
  ('pn_verify_func -> empty','pn_verify_func',1,'p_pn_verify_func','AnalizadorSintactico.py',539),
  ('pn_param_counter -> empty','pn_param_counter',1,'p_pn_param_counter','AnalizadorSintactico.py',550),
  ('func_call_rec -> all_logical pn_param_match func_call_rec1','func_call_rec',3,'p_func_call_rec','AnalizadorSintactico.py',555),
  ('func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec','func_call_rec1',4,'p_func_call_rec1','AnalizadorSintactico.py',558),
  ('func_call_rec1 -> empty','func_call_rec1',1,'p_func_call_rec1','AnalizadorSintactico.py',559),
  ('pn_param_match -> empty','pn_param_match',1,'p_pn_param_match','AnalizadorSintactico.py',562),
  ('func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func','func_dec',17,'p_func_dec','AnalizadorSintactico.py',576),
  ('pn_add_param_vartable -> empty','pn_add_param_vartable',1,'p_pn_add_param_vartable','AnalizadorSintactico.py',584),
  ('pn_gen_vartable -> empty','pn_gen_vartable',1,'p_pn_gen_vartable','AnalizadorSintactico.py',596),
  ('pn_func_quad -> empty','pn_func_quad',1,'p_pn_func_quad','AnalizadorSintactico.py',600),
  ('pn_end_main -> empty','pn_end_main',1,'p_pn_end_main','AnalizadorSintactico.py',604),
  ('pn_end_func -> empty','pn_end_func',1,'p_pn_end_func','AnalizadorSintactico.py',609),
  ('pn_add_func -> empty','pn_add_func',1,'p_pn_add_func','AnalizadorSintactico.py',616),
  ('pn_return_type -> empty','pn_return_type',1,'p_pn_return_type','AnalizadorSintactico.py',622),
  ('func_return -> RETURN all_logical SEMICOLON','func_return',3,'p_func_return','AnalizadorSintactico.py',630),
  ('func_return -> RETURN SEMICOLON','func_return',2,'p_func_return','AnalizadorSintactico.py',631),
  ('bloque_rec -> bloque bloque_rec','bloque_rec',2,'p_bloque_rec','AnalizadorSintactico.py',648),
  ('bloque_rec -> empty','bloque_rec',1,'p_bloque_rec','AnalizadorSintactico.py',649),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',653),
]
