
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUAL_ASSIGNleftLEFT_CURLYBRIGHT_CURLYBleftLEFT_BRACKETRIGHT_BRACKETleftLESS_THANGREATER_THANNOT_EQUALLESS_EQUALGREATER_EQUALEQUAL_COMPAREleftANDORNEGATIONleftMINUSPLUSleftMULTIPLICATIONDIVISIONleftLEFT_PARENTHESISRIGHT_PARENTHESISAND ATTRIBUTES CHAR CLASS COLON COMMA CONST_CHAR CONST_FLOAT CONST_INT CONST_STRING DEF DIVISION DO DOUBLE_QUOTES ELSE ELSEIF EQUAL_ASSIGN EQUAL_COMPARE FLOAT FUNCTION GREATER_EQUAL GREATER_THAN ID IF INT LEFT_BRACKET LEFT_CURLYB LEFT_PARENTHESIS LESS_EQUAL LESS_THAN MAIN METHODS MINUS MORE MULTIPLICATION NEGATION NOT_EQUAL NUMBER OR PERIOD PLUS PROGRAM READ RETURN RIGHT_BRACKET RIGHT_CURLYB RIGHT_PARENTHESIS SEMICOLON VAR VOID WHILE WRITE program : PROGRAM ID SEMICOLON vars class bloque  vars : VAR varid COLON tipo SEMICOLON  vars : empty   varid : ID  varid : ID COMMA ID  varid : empty   tipo : INT   tipo : FLOAT  bloque : LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB  estatutoRecursivo : estatuto estatutoRecursivo  estatutoRecursivo : empty  estatuto : asignacion    estatuto : condicion   estatuto : write   estatuto : while   estatuto : read  asignacion : ID EQUAL_ASSIGN expresion SEMICOLON   condicion : IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque   condicion :  condicion ELSE bloque  read : READ VAR SEMICOLON   while : WHILE LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque   expresion : exp LESS_THAN exp  expresion : exp GREATER_THAN exp  expresion : exp NOT_EQUAL exp  exp : termino PLUS termino   exp : termino MINUS termino   termino : factor MULTIPLICATION factor  termino : factor DIVISION factor   factor : LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS  factor : PLUS  factor : MINUS  factor : varcte  varcte : ID  varcte : CONST_INT  varcte : CONST_FLOAT  write : WRITE LEFT_PARENTHESIS inside RIGHT_PARENTHESIS  inside : inside more inside  inside : ID  inside : string  inside : empty  more : MORE  more : empty  string : DOUBLE_QUOTES CONST_STRING DOUBLE_QUOTES  class : CLASS LEFT_CURLYB vars method RIGHT_CURLYB  method : DEF LEFT_PARENTHESIS varid RIGHT_PARENTHESIS bloquemetodo  bloquemetodo : LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB RETURN ID SEMICOLON  empty :  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,13,36,],[0,-1,-9,]),'ID':([2,6,14,17,19,21,22,23,24,25,36,39,40,41,42,47,55,60,61,62,63,66,68,69,70,71,72,73,74,75,76,79,80,81,82,94,95,96,97,100,103,],[3,11,26,35,26,-12,-13,-14,-15,-16,-9,48,48,61,48,-19,48,-47,-38,-39,-40,-20,11,-17,48,48,48,48,48,48,48,-36,61,-41,-42,-18,-37,-43,-21,26,104,]),'SEMICOLON':([3,32,33,34,43,48,49,52,53,56,57,58,86,87,88,89,90,91,92,93,104,],[4,46,-7,-8,66,-33,69,-30,-31,-32,-34,-35,-22,-23,-24,-25,-26,-27,-28,-29,105,]),'VAR':([4,15,30,],[6,6,43,]),'CLASS':([4,5,7,46,],[-47,9,-3,-2,]),'COLON':([6,10,11,12,35,],[-47,16,-4,-6,-5,]),'DEF':([7,15,31,46,],[-3,-47,45,-2,]),'LEFT_CURLYB':([8,9,38,67,78,84,98,],[14,15,14,-44,14,14,100,]),'RIGHT_PARENTHESIS':([11,12,35,41,48,52,53,56,57,58,59,60,61,62,63,65,68,77,80,81,82,85,86,87,88,89,90,91,92,93,95,96,],[-4,-6,-5,-47,-33,-30,-31,-32,-34,-35,78,79,-38,-39,-40,84,-47,93,-47,-41,-42,98,-22,-23,-24,-25,-26,-27,-28,-29,-37,-43,]),'COMMA':([11,],[17,]),'RIGHT_CURLYB':([14,18,19,20,21,22,23,24,25,36,37,44,47,66,69,79,94,97,99,100,101,105,],[-47,36,-47,-11,-12,-13,-14,-15,-16,-9,-10,67,-19,-20,-17,-36,-18,-21,-45,-47,102,-46,]),'IF':([14,19,21,22,23,24,25,36,47,66,69,79,94,97,100,],[27,27,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,27,]),'WRITE':([14,19,21,22,23,24,25,36,47,66,69,79,94,97,100,],[28,28,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,28,]),'WHILE':([14,19,21,22,23,24,25,36,47,66,69,79,94,97,100,],[29,29,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,29,]),'READ':([14,19,21,22,23,24,25,36,47,66,69,79,94,97,100,],[30,30,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,30,]),'INT':([16,],[33,]),'FLOAT':([16,],[34,]),'ELSE':([22,36,47,94,],[38,-9,-19,-18,]),'EQUAL_ASSIGN':([26,],[39,]),'LEFT_PARENTHESIS':([27,28,29,39,40,42,45,55,70,71,72,73,74,75,76,],[40,41,42,55,55,55,68,55,55,55,55,55,55,55,55,]),'PLUS':([39,40,42,48,51,52,53,55,56,57,58,70,71,72,73,74,75,76,91,92,93,],[52,52,52,-33,73,-30,-31,52,-32,-34,-35,52,52,52,52,52,52,52,-27,-28,-29,]),'MINUS':([39,40,42,48,51,52,53,55,56,57,58,70,71,72,73,74,75,76,91,92,93,],[53,53,53,-33,74,-30,-31,53,-32,-34,-35,53,53,53,53,53,53,53,-27,-28,-29,]),'CONST_INT':([39,40,42,55,70,71,72,73,74,75,76,],[57,57,57,57,57,57,57,57,57,57,57,]),'CONST_FLOAT':([39,40,42,55,70,71,72,73,74,75,76,],[58,58,58,58,58,58,58,58,58,58,58,]),'DOUBLE_QUOTES':([41,60,61,62,63,80,81,82,83,95,96,],[64,-47,-38,-39,-40,64,-41,-42,96,-37,-43,]),'MORE':([41,60,61,62,63,80,81,82,95,96,],[-47,81,-38,-39,-40,-47,-41,-42,81,-43,]),'MULTIPLICATION':([48,52,53,54,56,57,58,93,],[-33,-30,-31,75,-32,-34,-35,-29,]),'DIVISION':([48,52,53,54,56,57,58,93,],[-33,-30,-31,76,-32,-34,-35,-29,]),'LESS_THAN':([48,50,52,53,56,57,58,89,90,91,92,93,],[-33,70,-30,-31,-32,-34,-35,-25,-26,-27,-28,-29,]),'GREATER_THAN':([48,50,52,53,56,57,58,89,90,91,92,93,],[-33,71,-30,-31,-32,-34,-35,-25,-26,-27,-28,-29,]),'NOT_EQUAL':([48,50,52,53,56,57,58,89,90,91,92,93,],[-33,72,-30,-31,-32,-34,-35,-25,-26,-27,-28,-29,]),'CONST_STRING':([64,],[83,]),'RETURN':([102,],[103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,15,],[5,31,]),'empty':([4,6,14,15,19,41,60,68,80,95,100,],[7,12,20,7,20,63,82,12,63,82,20,]),'class':([5,],[8,]),'varid':([6,68,],[10,85,]),'bloque':([8,38,78,84,],[13,47,94,97,]),'estatutoRecursivo':([14,19,100,],[18,37,101,]),'estatuto':([14,19,100,],[19,19,19,]),'asignacion':([14,19,100,],[21,21,21,]),'condicion':([14,19,100,],[22,22,22,]),'write':([14,19,100,],[23,23,23,]),'while':([14,19,100,],[24,24,24,]),'read':([14,19,100,],[25,25,25,]),'tipo':([16,],[32,]),'method':([31,],[44,]),'expresion':([39,40,42,55,],[49,59,65,77,]),'exp':([39,40,42,55,70,71,72,],[50,50,50,50,86,87,88,]),'termino':([39,40,42,55,70,71,72,73,74,],[51,51,51,51,51,51,51,89,90,]),'factor':([39,40,42,55,70,71,72,73,74,75,76,],[54,54,54,54,54,54,54,54,54,91,92,]),'varcte':([39,40,42,55,70,71,72,73,74,75,76,],[56,56,56,56,56,56,56,56,56,56,56,]),'inside':([41,80,],[60,95,]),'string':([41,80,],[62,62,]),'more':([60,95,],[80,80,]),'bloquemetodo':([98,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars class bloque','program',6,'p_program','AnalizadorSintactico.py',20),
  ('vars -> VAR varid COLON tipo SEMICOLON','vars',5,'p_vars','AnalizadorSintactico.py',25),
  ('vars -> empty','vars',1,'p_varsEmpty','AnalizadorSintactico.py',30),
  ('varid -> ID','varid',1,'p_varsid1','AnalizadorSintactico.py',34),
  ('varid -> ID COMMA ID','varid',3,'p_varsid2','AnalizadorSintactico.py',37),
  ('varid -> empty','varid',1,'p_varsidEmpty','AnalizadorSintactico.py',40),
  ('tipo -> INT','tipo',1,'p_tipo1','AnalizadorSintactico.py',43),
  ('tipo -> FLOAT','tipo',1,'p_tipo2','AnalizadorSintactico.py',46),
  ('bloque -> LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB','bloque',3,'p_bloque','AnalizadorSintactico.py',49),
  ('estatutoRecursivo -> estatuto estatutoRecursivo','estatutoRecursivo',2,'p_estatutoRec1','AnalizadorSintactico.py',54),
  ('estatutoRecursivo -> empty','estatutoRecursivo',1,'p_estatutoRec2','AnalizadorSintactico.py',57),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto1','AnalizadorSintactico.py',60),
  ('estatuto -> condicion','estatuto',1,'p_estatuto2','AnalizadorSintactico.py',65),
  ('estatuto -> write','estatuto',1,'p_estatuto3','AnalizadorSintactico.py',68),
  ('estatuto -> while','estatuto',1,'p_estatuto4','AnalizadorSintactico.py',71),
  ('estatuto -> read','estatuto',1,'p_estatuto5','AnalizadorSintactico.py',74),
  ('asignacion -> ID EQUAL_ASSIGN expresion SEMICOLON','asignacion',4,'p_asignacion','AnalizadorSintactico.py',77),
  ('condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque','condicion',5,'p_condicion','AnalizadorSintactico.py',81),
  ('condicion -> condicion ELSE bloque','condicion',3,'p_condicion2','AnalizadorSintactico.py',85),
  ('read -> READ VAR SEMICOLON','read',3,'p_read','AnalizadorSintactico.py',88),
  ('while -> WHILE LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque','while',5,'p_while','AnalizadorSintactico.py',92),
  ('expresion -> exp LESS_THAN exp','expresion',3,'p_expresion1','AnalizadorSintactico.py',96),
  ('expresion -> exp GREATER_THAN exp','expresion',3,'p_expresion2','AnalizadorSintactico.py',100),
  ('expresion -> exp NOT_EQUAL exp','expresion',3,'p_expresion3','AnalizadorSintactico.py',103),
  ('exp -> termino PLUS termino','exp',3,'p_exp1','AnalizadorSintactico.py',106),
  ('exp -> termino MINUS termino','exp',3,'p_exp2','AnalizadorSintactico.py',110),
  ('termino -> factor MULTIPLICATION factor','termino',3,'p_termino1','AnalizadorSintactico.py',113),
  ('termino -> factor DIVISION factor','termino',3,'p_termino2','AnalizadorSintactico.py',117),
  ('factor -> LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS','factor',3,'p_factor1','AnalizadorSintactico.py',120),
  ('factor -> PLUS','factor',1,'p_factor2','AnalizadorSintactico.py',124),
  ('factor -> MINUS','factor',1,'p_factor3','AnalizadorSintactico.py',127),
  ('factor -> varcte','factor',1,'p_factor4','AnalizadorSintactico.py',130),
  ('varcte -> ID','varcte',1,'p_varcte1','AnalizadorSintactico.py',133),
  ('varcte -> CONST_INT','varcte',1,'p_varcte2','AnalizadorSintactico.py',136),
  ('varcte -> CONST_FLOAT','varcte',1,'p_varcte3','AnalizadorSintactico.py',139),
  ('write -> WRITE LEFT_PARENTHESIS inside RIGHT_PARENTHESIS','write',4,'p_write','AnalizadorSintactico.py',142),
  ('inside -> inside more inside','inside',3,'p_writeInside1','AnalizadorSintactico.py',145),
  ('inside -> ID','inside',1,'p_writeInside2','AnalizadorSintactico.py',148),
  ('inside -> string','inside',1,'p_writeInside3','AnalizadorSintactico.py',151),
  ('inside -> empty','inside',1,'p_writeInside4','AnalizadorSintactico.py',154),
  ('more -> MORE','more',1,'p_more1','AnalizadorSintactico.py',157),
  ('more -> empty','more',1,'p_more2','AnalizadorSintactico.py',160),
  ('string -> DOUBLE_QUOTES CONST_STRING DOUBLE_QUOTES','string',3,'p_string','AnalizadorSintactico.py',163),
  ('class -> CLASS LEFT_CURLYB vars method RIGHT_CURLYB','class',5,'p_class','AnalizadorSintactico.py',166),
  ('method -> DEF LEFT_PARENTHESIS varid RIGHT_PARENTHESIS bloquemetodo','method',5,'p_method','AnalizadorSintactico.py',169),
  ('bloquemetodo -> LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB RETURN ID SEMICOLON','bloquemetodo',6,'p_bloquemethod','AnalizadorSintactico.py',172),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',175),
]
