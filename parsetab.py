
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUAL_ASSIGNleftLEFT_CURLYBRIGHT_CURLYBleftLEFT_BRACKETRIGHT_BRACKETleftLESS_THANGREATER_THANNOT_EQUALLESS_EQUALGREATER_EQUALEQUAL_COMPAREleftANDORNEGATIONleftMINUSPLUSleftMULTIPLICATIONDIVISIONleftLEFT_PARENTHESISRIGHT_PARENTHESISAND ATTRIBUTES CHAR CLASS COLON COMMA CONST_CHAR CONST_FLOAT CONST_INT CONST_STRING DEF DIVISION DO ELSE ELSEIF EQUAL_ASSIGN EQUAL_COMPARE FLOAT FUNCTION GREATER_EQUAL GREATER_THAN ID IF INT LEFT_BRACKET LEFT_CURLYB LEFT_PARENTHESIS LESS_EQUAL LESS_THAN MAIN METHODS MINUS MORE MULTIPLICATION NEGATION NOT_EQUAL NUMBER OR PERIOD PLUS PROGRAM READ RETURN RIGHT_BRACKET RIGHT_CURLYB RIGHT_PARENTHESIS SEMICOLON VAR VOID WHILE WRITE program : PROGRAM ID SEMICOLON vars bloque  vars : VAR varid COLON tipo SEMICOLON  vars : empty   varid : ID  varid : ID COMMA ID  varid : empty   tipo : INT   tipo : FLOAT  bloque : LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB  estatutoRecursivo : estatuto estatutoRecursivo  estatutoRecursivo : empty  estatuto : asignacion    estatuto : condicion   estatuto : write   estatuto : while   estatuto : read  asignacion : ID EQUAL_ASSIGN expresion SEMICOLON   condicion : IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque   condicion :  condicion ELSE bloque  read : READ VAR SEMICOLON   while : WHILE LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque   expresion : exp LESS_THAN exp  expresion : exp GREATER_THAN exp  expresion : exp NOT_EQUAL exp  exp : termino PLUS termino   exp : termino MINUS termino   termino : factor MULTIPLICATION factor  termino : factor DIVISION factor   factor : LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS  factor : PLUS  factor : MINUS  factor : varcte  varcte : ID  varcte : CONST_INT  varcte : CONST_FLOAT  write : WRITE LEFT_PARENTHESIS inside RIGHT_PARENTHESIS  inside : inside more inside  inside : ID  inside : string  inside : empty  more : MORE  more : empty  string : CONST_STRING  class : CLASS ID LEFT_CURLYB vars method RIGHT_CURLYB  method : tipo LEFT_PARENTHESIS varid RIGHT_PARENTHESIS bloquemetodo  bloquemetodo : LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB RETURN ID SEMICOLON  function :  FUNCTION functype ID LEFT_PARENTHESIS tipoid RIGHT_PARENTHESIS LEFT_CURLYB vars bloque RIGHT_CURLYB  functype :  VOID  functype :  tipo  tipoid :  tipo morecomma ID  morecomma : COMMA  morecomma : empty  tipoid : tipoid moretipoid tipoid   moretipoid : empty  vdim : tipo ID LEFT_BRACKET dimensions RIGHT_BRACKET SEMICOLON  dimensions : CONST_INT  dimensions : CONST_INT COMMA CONST_INT  dimensions : CONST_INT COMMA CONST_INT COMMA CONST_INT  arrayaccess : ID LEFT_BRACKET dimensionsaccess RIGHT_BRACKET  dimensionsaccess : exp  dimensionsaccess : exp COMMA exp  dimensionsaccess : exp COMMA exp COMMA exp empty :  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,28,],[0,-1,-9,]),'ID':([2,6,9,14,16,17,18,19,20,27,28,31,32,33,34,40,48,53,54,55,56,57,59,61,62,63,64,65,66,67,68,71,72,73,74,84,85,86,],[3,11,21,21,-12,-13,-14,-15,-16,39,-9,41,41,54,41,-19,41,-63,-38,-39,-40,-43,-20,-17,41,41,41,41,41,41,41,-36,54,-41,-42,-18,-37,-21,]),'SEMICOLON':([3,35,36,37,38,41,42,45,46,49,50,51,76,77,78,79,80,81,82,83,],[4,59,60,-7,-8,-33,61,-30,-31,-32,-34,-35,-22,-23,-24,-25,-26,-27,-28,-29,]),'VAR':([4,25,],[6,35,]),'LEFT_CURLYB':([4,5,7,30,60,70,75,],[-63,9,-3,9,-2,9,9,]),'COLON':([6,10,11,12,39,],[-63,26,-4,-6,-5,]),'RIGHT_CURLYB':([9,13,14,15,16,17,18,19,20,28,29,40,59,61,71,84,86,],[-63,28,-63,-11,-12,-13,-14,-15,-16,-9,-10,-19,-20,-17,-36,-18,-21,]),'IF':([9,14,16,17,18,19,20,28,40,59,61,71,84,86,],[22,22,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,]),'WRITE':([9,14,16,17,18,19,20,28,40,59,61,71,84,86,],[23,23,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,]),'WHILE':([9,14,16,17,18,19,20,28,40,59,61,71,84,86,],[24,24,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,]),'READ':([9,14,16,17,18,19,20,28,40,59,61,71,84,86,],[25,25,-12,-13,-14,-15,-16,-9,-19,-20,-17,-36,-18,-21,]),'COMMA':([11,],[27,]),'ELSE':([17,28,40,84,],[30,-9,-19,-18,]),'EQUAL_ASSIGN':([21,],[31,]),'LEFT_PARENTHESIS':([22,23,24,31,32,34,48,62,63,64,65,66,67,68,],[32,33,34,48,48,48,48,48,48,48,48,48,48,48,]),'INT':([26,],[37,]),'FLOAT':([26,],[38,]),'PLUS':([31,32,34,41,44,45,46,48,49,50,51,62,63,64,65,66,67,68,81,82,83,],[45,45,45,-33,65,-30,-31,45,-32,-34,-35,45,45,45,45,45,45,45,-27,-28,-29,]),'MINUS':([31,32,34,41,44,45,46,48,49,50,51,62,63,64,65,66,67,68,81,82,83,],[46,46,46,-33,66,-30,-31,46,-32,-34,-35,46,46,46,46,46,46,46,-27,-28,-29,]),'CONST_INT':([31,32,34,48,62,63,64,65,66,67,68,],[50,50,50,50,50,50,50,50,50,50,50,]),'CONST_FLOAT':([31,32,34,48,62,63,64,65,66,67,68,],[51,51,51,51,51,51,51,51,51,51,51,]),'CONST_STRING':([33,53,54,55,56,57,72,73,74,85,],[57,-63,-38,-39,-40,-43,57,-41,-42,-37,]),'RIGHT_PARENTHESIS':([33,41,45,46,49,50,51,52,53,54,55,56,57,58,69,72,73,74,76,77,78,79,80,81,82,83,85,],[-63,-33,-30,-31,-32,-34,-35,70,71,-38,-39,-40,-43,75,83,-63,-41,-42,-22,-23,-24,-25,-26,-27,-28,-29,-37,]),'MORE':([33,53,54,55,56,57,72,73,74,85,],[-63,73,-38,-39,-40,-43,-63,-41,-42,73,]),'MULTIPLICATION':([41,45,46,47,49,50,51,83,],[-33,-30,-31,67,-32,-34,-35,-29,]),'DIVISION':([41,45,46,47,49,50,51,83,],[-33,-30,-31,68,-32,-34,-35,-29,]),'LESS_THAN':([41,43,45,46,49,50,51,79,80,81,82,83,],[-33,62,-30,-31,-32,-34,-35,-25,-26,-27,-28,-29,]),'GREATER_THAN':([41,43,45,46,49,50,51,79,80,81,82,83,],[-33,63,-30,-31,-32,-34,-35,-25,-26,-27,-28,-29,]),'NOT_EQUAL':([41,43,45,46,49,50,51,79,80,81,82,83,],[-33,64,-30,-31,-32,-34,-35,-25,-26,-27,-28,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,],[5,]),'empty':([4,6,9,14,33,53,72,85,],[7,12,15,15,56,74,56,74,]),'bloque':([5,30,70,75,],[8,40,84,86,]),'varid':([6,],[10,]),'estatutoRecursivo':([9,14,],[13,29,]),'estatuto':([9,14,],[14,14,]),'asignacion':([9,14,],[16,16,]),'condicion':([9,14,],[17,17,]),'write':([9,14,],[18,18,]),'while':([9,14,],[19,19,]),'read':([9,14,],[20,20,]),'tipo':([26,],[36,]),'expresion':([31,32,34,48,],[42,52,58,69,]),'exp':([31,32,34,48,62,63,64,],[43,43,43,43,76,77,78,]),'termino':([31,32,34,48,62,63,64,65,66,],[44,44,44,44,44,44,44,79,80,]),'factor':([31,32,34,48,62,63,64,65,66,67,68,],[47,47,47,47,47,47,47,47,47,81,82,]),'varcte':([31,32,34,48,62,63,64,65,66,67,68,],[49,49,49,49,49,49,49,49,49,49,49,]),'inside':([33,72,],[53,85,]),'string':([33,72,],[55,55,]),'more':([53,85,],[72,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars bloque','program',5,'p_program','AnalizadorSintactico.py',28),
  ('vars -> VAR varid COLON tipo SEMICOLON','vars',5,'p_vars','AnalizadorSintactico.py',34),
  ('vars -> empty','vars',1,'p_varsEmpty','AnalizadorSintactico.py',40),
  ('varid -> ID','varid',1,'p_varsid1','AnalizadorSintactico.py',45),
  ('varid -> ID COMMA ID','varid',3,'p_varsid2','AnalizadorSintactico.py',50),
  ('varid -> empty','varid',1,'p_varsidEmpty','AnalizadorSintactico.py',55),
  ('tipo -> INT','tipo',1,'p_tipo1','AnalizadorSintactico.py',60),
  ('tipo -> FLOAT','tipo',1,'p_tipo2','AnalizadorSintactico.py',64),
  ('bloque -> LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB','bloque',3,'p_bloque','AnalizadorSintactico.py',68),
  ('estatutoRecursivo -> estatuto estatutoRecursivo','estatutoRecursivo',2,'p_estatutoRec1','AnalizadorSintactico.py',73),
  ('estatutoRecursivo -> empty','estatutoRecursivo',1,'p_estatutoRec2','AnalizadorSintactico.py',78),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto1','AnalizadorSintactico.py',83),
  ('estatuto -> condicion','estatuto',1,'p_estatuto2','AnalizadorSintactico.py',89),
  ('estatuto -> write','estatuto',1,'p_estatuto3','AnalizadorSintactico.py',94),
  ('estatuto -> while','estatuto',1,'p_estatuto4','AnalizadorSintactico.py',99),
  ('estatuto -> read','estatuto',1,'p_estatuto5','AnalizadorSintactico.py',104),
  ('asignacion -> ID EQUAL_ASSIGN expresion SEMICOLON','asignacion',4,'p_asignacion','AnalizadorSintactico.py',109),
  ('condicion -> IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque','condicion',5,'p_condicion','AnalizadorSintactico.py',120),
  ('condicion -> condicion ELSE bloque','condicion',3,'p_condicion2','AnalizadorSintactico.py',125),
  ('read -> READ VAR SEMICOLON','read',3,'p_read','AnalizadorSintactico.py',130),
  ('while -> WHILE LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque','while',5,'p_while','AnalizadorSintactico.py',134),
  ('expresion -> exp LESS_THAN exp','expresion',3,'p_expresion1','AnalizadorSintactico.py',139),
  ('expresion -> exp GREATER_THAN exp','expresion',3,'p_expresion2','AnalizadorSintactico.py',144),
  ('expresion -> exp NOT_EQUAL exp','expresion',3,'p_expresion3','AnalizadorSintactico.py',149),
  ('exp -> termino PLUS termino','exp',3,'p_exp1','AnalizadorSintactico.py',154),
  ('exp -> termino MINUS termino','exp',3,'p_exp2','AnalizadorSintactico.py',160),
  ('termino -> factor MULTIPLICATION factor','termino',3,'p_termino1','AnalizadorSintactico.py',166),
  ('termino -> factor DIVISION factor','termino',3,'p_termino2','AnalizadorSintactico.py',172),
  ('factor -> LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS','factor',3,'p_factor1','AnalizadorSintactico.py',178),
  ('factor -> PLUS','factor',1,'p_factor2','AnalizadorSintactico.py',183),
  ('factor -> MINUS','factor',1,'p_factor3','AnalizadorSintactico.py',188),
  ('factor -> varcte','factor',1,'p_factor4','AnalizadorSintactico.py',193),
  ('varcte -> ID','varcte',1,'p_varcte1','AnalizadorSintactico.py',198),
  ('varcte -> CONST_INT','varcte',1,'p_varcte2','AnalizadorSintactico.py',203),
  ('varcte -> CONST_FLOAT','varcte',1,'p_varcte3','AnalizadorSintactico.py',208),
  ('write -> WRITE LEFT_PARENTHESIS inside RIGHT_PARENTHESIS','write',4,'p_write','AnalizadorSintactico.py',213),
  ('inside -> inside more inside','inside',3,'p_writeInside1','AnalizadorSintactico.py',218),
  ('inside -> ID','inside',1,'p_writeInside2','AnalizadorSintactico.py',223),
  ('inside -> string','inside',1,'p_writeInside3','AnalizadorSintactico.py',233),
  ('inside -> empty','inside',1,'p_writeInside4','AnalizadorSintactico.py',238),
  ('more -> MORE','more',1,'p_more1','AnalizadorSintactico.py',243),
  ('more -> empty','more',1,'p_more2','AnalizadorSintactico.py',247),
  ('string -> CONST_STRING','string',1,'p_string','AnalizadorSintactico.py',252),
  ('class -> CLASS ID LEFT_CURLYB vars method RIGHT_CURLYB','class',6,'p_class','AnalizadorSintactico.py',256),
  ('method -> tipo LEFT_PARENTHESIS varid RIGHT_PARENTHESIS bloquemetodo','method',5,'p_method','AnalizadorSintactico.py',262),
  ('bloquemetodo -> LEFT_CURLYB estatutoRecursivo RIGHT_CURLYB RETURN ID SEMICOLON','bloquemetodo',6,'p_bloquemethod','AnalizadorSintactico.py',268),
  ('function -> FUNCTION functype ID LEFT_PARENTHESIS tipoid RIGHT_PARENTHESIS LEFT_CURLYB vars bloque RIGHT_CURLYB','function',10,'p_function','AnalizadorSintactico.py',277),
  ('functype -> VOID','functype',1,'p_function1','AnalizadorSintactico.py',281),
  ('functype -> tipo','functype',1,'p_function2','AnalizadorSintactico.py',284),
  ('tipoid -> tipo morecomma ID','tipoid',3,'p_function3','AnalizadorSintactico.py',287),
  ('morecomma -> COMMA','morecomma',1,'p_function4','AnalizadorSintactico.py',290),
  ('morecomma -> empty','morecomma',1,'p_function5','AnalizadorSintactico.py',293),
  ('tipoid -> tipoid moretipoid tipoid','tipoid',3,'p_function6','AnalizadorSintactico.py',296),
  ('moretipoid -> empty','moretipoid',1,'p_function7','AnalizadorSintactico.py',299),
  ('vdim -> tipo ID LEFT_BRACKET dimensions RIGHT_BRACKET SEMICOLON','vdim',6,'p_vdim','AnalizadorSintactico.py',302),
  ('dimensions -> CONST_INT','dimensions',1,'p_vdim1','AnalizadorSintactico.py',305),
  ('dimensions -> CONST_INT COMMA CONST_INT','dimensions',3,'p_vdim2','AnalizadorSintactico.py',308),
  ('dimensions -> CONST_INT COMMA CONST_INT COMMA CONST_INT','dimensions',5,'p_vdim3','AnalizadorSintactico.py',311),
  ('arrayaccess -> ID LEFT_BRACKET dimensionsaccess RIGHT_BRACKET','arrayaccess',4,'p_arrayaccess','AnalizadorSintactico.py',314),
  ('dimensionsaccess -> exp','dimensionsaccess',1,'p_arrayaccess1','AnalizadorSintactico.py',317),
  ('dimensionsaccess -> exp COMMA exp','dimensionsaccess',3,'p_arrayaccess2','AnalizadorSintactico.py',320),
  ('dimensionsaccess -> exp COMMA exp COMMA exp','dimensionsaccess',5,'p_arrayaccess3','AnalizadorSintactico.py',323),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',326),
]
