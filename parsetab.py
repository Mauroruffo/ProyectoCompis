
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUAL_ASSIGNleftIDleftLEFT_CURLYBRIGHT_CURLYBleftLEFT_BRACKETRIGHT_BRACKETleftLESS_THANGREATER_THANNOT_EQUALLESS_EQUALGREATER_EQUALEQUAL_COMPAREleftANDORNEGATIONleftMINUSPLUSleftMULTIPLICATIONDIVISIONleftLEFT_PARENTHESISRIGHT_PARENTHESISAND ATTRIBUTES BOOL CALL CALL CHAR CLASS COLON COMMA CONST_BOOL CONST_CHAR CONST_FLOAT CONST_INT CONST_STRING DEF DIVISION DO ELSE ELSEIF EQUAL_ASSIGN EQUAL_COMPARE FLOAT FUNC GREATER_EQUAL GREATER_THAN ID IF INT LEFT_BRACKET LEFT_CURLYB LEFT_PARENTHESIS LESS_EQUAL LESS_THAN LIST LIST MAIN METHODS MINUS MORE MOREBOOL MULTIPLICATION NEGATION NOT_EQUAL NUMBER OR PERIOD PLUS PROGRAM READ RETURN RIGHT_BRACKET RIGHT_CURLYB RIGHT_PARENTHESIS SEMICOLON STRING STRING VAR VOID WHILE WRITE program : PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main  main : MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main vars_rec : var_dec vars_rec\n                    | empty  pn_internal_scope : empty  pn_start_program : empty  pn_start_func : empty  init_dec : empty \n                | dec init_dec  dec :  var_dec \n            | func_dec \n            | class_dec  class_dec : empty var : ID varArray varArray :  empty \n                | pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return  pn_array_access1 : empty  pn_array_access2 : empty  pn_array_access3 : empty  pn_access_return : empty  var_dec :  VAR tipo pn_var_type  pn_value_type ID pn_current_name SEMICOLON pn_add_variable \n                | LIST tipo pn_var_type  pn_value_type ID pn_current_name LEFT_BRACKET  cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON list1 : empty  pn_add_dim_list : empty pn_add_dim : empty pn_var_type : empty  pn_value_type : empty  pn_current_name : empty  pn_add_variable : empty  bloque : asignacion \n                | condicional \n                | while \n                | read \n                | write \n                | func_call SEMICOLON  asignacion : var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON  pn_var_assign : empty  pn_operator : empty  all_logical : logical_exp pn_all_logical all_logical_rec  all_logical_rec : AND pn_operator logical_exp pn_all_logical all_logical_rec \n                        | OR pn_operator logical_exp pn_all_logical all_logical_rec \n                        | empty pn_all_logical : empty  logical_exp : exp pn_logical_exp logical_exp_rec  logical_exp_rec : GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec \n                        | LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec \n                        | EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec \n                        | NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec \n                        | empty pn_logical_exp : empty  exp : termino pn_exp exp_rec  pn_exp : empty  exp_rec : PLUS pn_operator termino pn_exp exp_rec \n                | MINUS pn_operator termino pn_exp exp_rec \n                | empty termino :  factor pn_termino termino_rec  termino_rec : MULTIPLICATION pn_operator factor pn_termino termino_rec \n                    | DIVISION pn_operator factor pn_termino termino_rec \n                    | empty pn_termino : empty  factor : varcte \n                | LEFT_PARENTHESIS pn_open_parenthesis all_logical  RIGHT_PARENTHESIS pn_close_parenthesis \n                | func_call empty varcte : cte_int pn_add_constant \n                | cte_float pn_add_constant \n                | CONST_BOOL pn_add_constant \n                | CONST_STRING empty empty\n                | var  cte_int : CONST_INT \n                | MINUS CONST_INT  cte_float : CONST_FLOAT \n                | MINUS CONST_FLOAT  pn_add_constant : empty  pn_open_parenthesis : empty  pn_close_parenthesis : empty  tipo : INT \n            | FLOAT \n            | BOOL \n            | STRING  return_module : tipo \n                | VOID  parametro : tipo ID parametro_rec \n                    | empty  parametro_rec : COMMA tipo ID parametro_rec \n                        | empty  condicional : IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else  condicional_else : ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final \n                        | pn_condicional_final  pn_condicional : empty  pn_condicional_else : empty  pn_condicional_final : empty  while : WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop while_loop : LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1  pn_while : empty  pn_while_jump : empty  pn_while_jump1 : empty  read : READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON  var_readRec : var var_readRec1  var_readRec1 : COMMA var var_readRec1 \n                    |   empty  write : WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON  write_rec : all_logical pn_write_quad write_rec1  write_rec1 : MORE all_logical pn_write_quad write_rec1 \n                    | empty  pn_write_quad : empty  func_call : CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS  pn_verify_func : empty  pn_param_counter : empty  func_call_rec : all_logical pn_param_match func_call_rec1  func_call_rec1 : COMMA all_logical pn_param_match func_call_rec1\n                        | empty  pn_param_match : empty  func_dec : FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func  pn_add_param_vartable : empty  pn_gen_vartable : empty  pn_func_quad : empty  pn_end_main : empty pn_end_func : empty  pn_add_func : empty  pn_return_type : empty  func_return : RETURN all_logical SEMICOLON \n                    | RETURN SEMICOLON  bloque_rec : bloque bloque_rec \n                    | empty empty :  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,18,94,112,113,],[0,-1,-125,-2,-117,]),'ID':([2,3,4,5,6,21,22,23,24,25,26,27,28,29,32,33,34,37,38,39,46,51,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,88,93,96,99,102,103,110,114,115,130,137,140,143,144,164,169,170,171,173,174,179,180,183,184,185,186,189,190,193,194,198,200,202,204,205,209,210,212,213,214,215,216,217,218,219,220,221,222,223,228,231,246,247,253,254,275,277,278,289,292,299,300,302,306,307,],[-125,-125,-6,7,-7,-125,-76,-77,-78,-79,-125,35,-80,-81,-125,-26,-125,43,-27,44,-125,60,-125,-125,-4,-125,89,-115,-3,-21,-29,89,-30,-31,-32,-33,-34,104,111,-35,89,89,89,-125,89,-125,89,-125,-125,89,-74,89,-125,89,-18,-125,-36,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-97,-101,89,-125,-108,89,-116,89,89,-38,89,89,89,89,89,89,89,89,89,89,-22,-92,89,89,-125,-86,-88,-91,-125,89,-93,-96,89,-125,-87,]),'SEMICOLON':([7,43,47,48,67,82,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,142,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,162,166,172,178,181,182,187,188,191,192,195,196,207,208,211,233,234,236,237,238,239,240,241,242,243,244,245,251,253,255,256,257,258,259,260,261,262,263,264,270,271,273,279,280,281,282,283,284,285,286,287,288,290,],[8,-125,56,-28,-69,96,-125,-70,-14,-15,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,174,-125,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,198,200,-125,-39,-42,-44,-49,-51,-55,-56,-59,-67,231,-23,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,274,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-16,-20,296,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-106,]),'MAIN':([8,9,10,11,12,13,14,20,56,64,65,231,272,294,295,],[-125,19,-8,-125,-10,-11,-12,-9,-125,-21,-29,-22,-125,-113,-118,]),'VAR':([8,10,11,12,13,14,46,54,56,64,65,110,231,272,294,295,],[15,-13,15,-10,-11,-12,15,15,-125,-21,-29,15,-22,-125,-113,-118,]),'LIST':([8,10,11,12,13,14,46,54,56,64,65,110,231,272,294,295,],[16,-13,16,-10,-11,-12,16,16,-125,-21,-29,16,-22,-125,-113,-118,]),'FUNC':([8,10,11,12,13,14,56,64,65,231,272,294,295,],[17,-13,17,-10,-11,-12,-125,-21,-29,-22,-125,-113,-118,]),'INT':([15,16,17,45,72,],[22,22,22,22,22,]),'FLOAT':([15,16,17,45,72,],[23,23,23,23,23,]),'BOOL':([15,16,17,45,72,],[24,24,24,24,24,]),'STRING':([15,16,17,45,72,],[25,25,25,25,25,]),'VOID':([17,],[29,]),'LEFT_PARENTHESIS':([19,30,31,35,40,41,84,85,86,87,99,100,101,103,104,114,115,130,135,136,137,143,144,169,170,171,179,180,183,184,185,186,189,190,193,194,202,204,205,213,214,215,216,217,218,219,220,221,222,223,228,253,292,],[-125,36,-5,-125,45,-119,99,-125,102,103,115,130,-94,115,-125,115,-125,115,169,-107,-125,115,-74,-125,115,-18,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,115,-125,-108,115,-38,115,115,115,115,115,115,115,115,115,115,115,115,]),'RIGHT_PARENTHESIS':([36,45,50,52,58,59,60,67,69,70,71,73,89,91,105,106,111,116,117,118,119,120,121,122,123,124,125,126,127,129,131,132,133,134,141,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,165,167,168,175,178,181,182,187,188,191,192,195,196,199,201,203,211,226,227,233,234,236,237,238,239,240,241,242,243,244,245,248,249,250,251,255,256,257,258,259,260,261,262,263,264,266,267,268,269,270,271,279,280,281,282,283,284,285,286,287,288,290,291,293,301,303,305,],[42,-125,-125,-83,-125,-114,-125,-69,92,-120,-82,-85,-125,-70,-14,-15,-125,145,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,162,-125,166,-125,-84,-125,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,197,-98,-100,-125,-105,211,-39,-42,-44,-49,-51,-55,-56,-59,-67,-125,-102,-104,-125,-99,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-103,290,-125,-112,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-106,-109,-111,-125,-125,-110,]),'LEFT_CURLYB':([42,92,145,176,177,197,224,225,276,297,298,],[46,110,-125,212,-89,-125,247,-95,-125,302,-90,]),'LEFT_BRACKET':([44,48,49,89,106,107,],[-125,-28,57,-125,-17,137,]),'IF':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,140,173,174,198,200,209,210,212,231,246,247,254,275,277,278,289,299,300,302,306,307,],[-125,-125,-125,-4,-125,84,-115,-3,-21,-29,84,-30,-31,-32,-33,-34,-35,-125,-125,-125,-36,-97,-101,84,-116,84,-22,-92,84,-125,-86,-88,-91,-125,-93,-96,84,-125,-87,]),'WHILE':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,140,173,174,198,200,209,210,212,231,246,247,254,275,277,278,289,299,300,302,306,307,],[-125,-125,-125,-4,-125,85,-115,-3,-21,-29,85,-30,-31,-32,-33,-34,-35,-125,-125,-125,-36,-97,-101,85,-116,85,-22,-92,85,-125,-86,-88,-91,-125,-93,-96,85,-125,-87,]),'READ':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,140,173,174,198,200,209,210,212,231,246,247,254,275,277,278,289,299,300,302,306,307,],[-125,-125,-125,-4,-125,86,-115,-3,-21,-29,86,-30,-31,-32,-33,-34,-35,-125,-125,-125,-36,-97,-101,86,-116,86,-22,-92,86,-125,-86,-88,-91,-125,-93,-96,86,-125,-87,]),'WRITE':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,110,140,173,174,198,200,209,210,212,231,246,247,254,275,277,278,289,299,300,302,306,307,],[-125,-125,-125,-4,-125,87,-115,-3,-21,-29,87,-30,-31,-32,-33,-34,-35,-125,-125,-125,-36,-97,-101,87,-116,87,-22,-92,87,-125,-86,-88,-91,-125,-93,-96,87,-125,-87,]),'CALL':([46,53,54,55,56,61,62,63,64,65,75,77,78,79,80,81,96,99,103,110,114,115,130,137,140,143,144,169,170,171,173,174,179,180,183,184,185,186,189,190,193,194,198,200,202,204,205,209,210,212,213,214,215,216,217,218,219,220,221,222,223,228,231,246,247,253,254,275,277,278,289,292,299,300,302,306,307,],[-125,-125,-125,-4,-125,88,-115,-3,-21,-29,88,-30,-31,-32,-33,-34,-35,88,88,-125,88,-125,88,-125,-125,88,-74,-125,88,-18,-125,-36,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-97,-101,88,-125,-108,88,-116,88,88,-38,88,88,88,88,88,88,88,88,88,88,-22,-92,88,88,-125,-86,-88,-91,-125,88,-93,-96,88,-125,-87,]),'RIGHT_CURLYB':([46,53,54,55,56,61,62,63,64,65,74,75,76,77,78,79,80,81,95,96,174,198,200,212,231,235,246,247,252,254,265,274,275,277,278,289,296,299,300,302,304,306,307,],[-125,-125,-125,-4,-125,-125,-115,-3,-21,-29,94,-125,-124,-30,-31,-32,-33,-34,-123,-35,-36,-97,-101,-125,-22,254,-92,-125,272,-125,289,-122,-86,-88,-91,-125,-121,-93,-96,-125,306,-125,-87,]),'RETURN':([54,55,56,62,63,64,65,75,76,77,78,79,80,81,95,96,110,140,173,174,198,200,209,210,231,232,246,254,275,277,278,289,299,300,306,307,],[-125,-4,-125,-115,-3,-21,-29,-125,-124,-30,-31,-32,-33,-34,-123,-35,-125,-125,-125,-36,-97,-101,-125,-116,-22,253,-92,-125,-86,-88,-91,-125,-93,-96,-125,-87,]),'CONST_INT':([57,68,99,103,114,115,128,130,137,143,144,169,170,171,179,180,183,184,185,186,189,190,193,194,202,204,205,213,214,215,216,217,218,219,220,221,222,223,228,253,292,],[67,91,67,67,67,-125,91,67,-125,67,-74,-125,67,-18,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,67,-125,-108,67,-38,67,67,67,67,67,67,67,67,67,67,67,67,]),'MINUS':([57,67,89,91,99,103,105,106,114,115,119,120,121,122,123,124,125,126,127,129,130,137,143,144,150,151,152,153,154,155,156,157,158,159,160,169,170,171,179,180,183,184,185,186,189,190,192,193,194,195,196,202,204,205,211,213,214,215,216,217,218,219,220,221,222,223,228,233,234,242,243,244,245,251,253,261,262,263,264,270,271,287,288,290,292,],[68,-69,-125,-70,128,128,-14,-15,128,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,128,-125,128,-74,190,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-125,128,-18,-125,-125,-125,-125,-125,-125,-125,-125,-56,-125,-125,-59,-67,128,-125,-108,-125,128,-38,128,128,128,128,128,128,128,128,128,128,-62,-75,-125,-125,-125,-125,-125,128,190,190,-125,-125,-16,-20,-57,-58,-106,128,]),'COMMA':([60,67,89,91,105,106,111,117,118,119,120,121,122,123,124,125,126,127,129,132,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,178,181,182,187,188,191,192,195,196,199,211,233,234,236,237,238,239,240,241,242,243,244,245,250,251,255,256,257,258,259,260,261,262,263,264,268,269,270,271,279,280,281,282,283,284,285,286,287,288,290,301,303,],[72,-69,-125,-70,-14,-15,72,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,164,-125,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-39,-42,-44,-49,-51,-55,-56,-59,-67,164,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,292,-112,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-106,-125,292,]),'RIGHT_BRACKET':([65,66,67,89,90,91,105,106,108,109,117,118,119,120,121,122,123,124,125,126,127,129,138,139,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,178,181,182,187,188,191,192,195,196,206,211,229,230,233,234,236,237,238,239,240,241,242,243,244,245,251,255,256,257,258,259,260,261,262,263,264,270,271,279,280,281,282,283,284,285,286,287,288,290,],[-29,-125,-69,-125,-125,-70,-14,-15,-125,-24,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,172,-25,-125,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-39,-42,-44,-49,-51,-55,-56,-59,-67,-125,-125,251,-19,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-106,]),'MULTIPLICATION':([67,89,91,105,106,120,121,122,123,124,125,126,127,129,152,153,154,155,156,157,158,159,160,196,211,233,234,244,245,251,263,264,270,271,290,],[-69,-125,-70,-14,-15,-125,-61,-125,-125,-125,-125,-125,-68,-71,193,-60,-63,-64,-73,-65,-66,-125,-72,-67,-125,-62,-75,-125,-125,-125,193,193,-16,-20,-106,]),'DIVISION':([67,89,91,105,106,120,121,122,123,124,125,126,127,129,152,153,154,155,156,157,158,159,160,196,211,233,234,244,245,251,263,264,270,271,290,],[-69,-125,-70,-14,-15,-125,-61,-125,-125,-125,-125,-125,-68,-71,194,-60,-63,-64,-73,-65,-66,-125,-72,-67,-125,-62,-75,-125,-125,-125,194,194,-16,-20,-106,]),'PLUS':([67,89,91,105,106,119,120,121,122,123,124,125,126,127,129,150,151,152,153,154,155,156,157,158,159,160,192,195,196,211,233,234,242,243,244,245,251,261,262,263,264,270,271,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,189,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,189,189,-125,-125,-16,-20,-57,-58,-106,]),'GREATER_THAN':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,148,149,150,151,152,153,154,155,156,157,158,159,160,188,191,192,195,196,211,233,234,238,239,240,241,242,243,244,245,251,257,258,259,260,261,262,263,264,270,271,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,183,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-51,-55,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,183,183,183,183,-125,-125,-125,-125,-16,-20,-53,-54,-57,-58,-106,]),'LESS_THAN':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,148,149,150,151,152,153,154,155,156,157,158,159,160,188,191,192,195,196,211,233,234,238,239,240,241,242,243,244,245,251,257,258,259,260,261,262,263,264,270,271,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,184,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-51,-55,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,184,184,184,184,-125,-125,-125,-125,-16,-20,-53,-54,-57,-58,-106,]),'EQUAL_COMPARE':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,148,149,150,151,152,153,154,155,156,157,158,159,160,188,191,192,195,196,211,233,234,238,239,240,241,242,243,244,245,251,257,258,259,260,261,262,263,264,270,271,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,185,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-51,-55,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,185,185,185,185,-125,-125,-125,-125,-16,-20,-53,-54,-57,-58,-106,]),'NOT_EQUAL':([67,89,91,105,106,118,119,120,121,122,123,124,125,126,127,129,148,149,150,151,152,153,154,155,156,157,158,159,160,188,191,192,195,196,211,233,234,238,239,240,241,242,243,244,245,251,257,258,259,260,261,262,263,264,270,271,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,186,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-51,-55,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,186,186,186,186,-125,-125,-125,-125,-16,-20,-53,-54,-57,-58,-106,]),'AND':([67,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,182,187,188,191,192,195,196,211,233,234,236,237,238,239,240,241,242,243,244,245,251,255,256,257,258,259,260,261,262,263,264,270,271,281,282,283,284,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,179,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-44,-49,-51,-55,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,179,179,-125,-125,-125,-125,-125,-125,-125,-125,-16,-20,-45,-46,-47,-48,-53,-54,-57,-58,-106,]),'OR':([67,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,182,187,188,191,192,195,196,211,233,234,236,237,238,239,240,241,242,243,244,245,251,255,256,257,258,259,260,261,262,263,264,270,271,281,282,283,284,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,180,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,-44,-49,-51,-55,-56,-59,-67,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,180,180,-125,-125,-125,-125,-125,-125,-125,-125,-16,-20,-45,-46,-47,-48,-53,-54,-57,-58,-106,]),'MORE':([67,89,91,105,106,117,118,119,120,121,122,123,124,125,126,127,129,134,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,167,168,178,181,182,187,188,191,192,195,196,211,227,233,234,236,237,238,239,240,241,242,243,244,245,248,251,255,256,257,258,259,260,261,262,263,264,270,271,279,280,281,282,283,284,285,286,287,288,290,],[-69,-125,-70,-14,-15,-125,-125,-125,-125,-61,-125,-125,-125,-125,-125,-68,-71,-125,-125,-43,-125,-50,-125,-52,-125,-60,-63,-64,-73,-65,-66,-125,-72,202,-105,-39,-42,-44,-49,-51,-55,-56,-59,-67,-125,-125,-62,-75,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,202,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,-16,-20,-40,-41,-45,-46,-47,-48,-53,-54,-57,-58,-106,]),'EQUAL_ASSIGN':([83,89,97,98,105,106,251,270,271,],[-125,-125,114,-37,-14,-15,-125,-16,-20,]),'CONST_BOOL':([99,103,114,115,130,137,143,144,169,170,171,179,180,183,184,185,186,189,190,193,194,202,204,205,213,214,215,216,217,218,219,220,221,222,223,228,253,292,],[125,125,125,-125,125,-125,125,-74,-125,125,-18,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,125,-125,-108,125,-38,125,125,125,125,125,125,125,125,125,125,125,125,]),'CONST_STRING':([99,103,114,115,130,137,143,144,169,170,171,179,180,183,184,185,186,189,190,193,194,202,204,205,213,214,215,216,217,218,219,220,221,222,223,228,253,292,],[126,126,126,-125,126,-125,126,-74,-125,126,-18,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,126,-125,-108,126,-38,126,126,126,126,126,126,126,126,126,126,126,126,]),'CONST_FLOAT':([99,103,114,115,128,130,137,143,144,169,170,171,179,180,183,184,185,186,189,190,193,194,202,204,205,213,214,215,216,217,218,219,220,221,222,223,228,253,292,],[129,129,129,-125,160,129,-125,129,-74,-125,129,-18,-125,-125,-125,-125,-125,-125,-125,-125,-125,-125,129,-125,-108,129,-38,129,129,129,129,129,129,129,129,129,129,129,129,]),'ELSE':([254,],[276,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'pn_start_program':([2,],[3,]),'empty':([2,3,8,11,19,21,26,32,34,35,43,44,45,46,50,53,54,56,58,60,61,66,75,83,85,89,90,94,104,108,110,111,115,117,118,119,120,122,123,124,125,126,132,134,137,140,145,146,148,150,152,159,167,169,172,173,179,180,183,184,185,186,189,190,193,194,197,199,204,206,209,211,212,227,236,237,238,239,240,241,242,243,244,245,247,248,249,250,251,254,255,256,257,258,259,260,261,262,263,264,268,272,276,289,301,302,303,306,],[4,6,10,10,31,33,33,38,38,41,48,48,52,55,59,62,55,65,70,73,76,65,76,98,101,106,109,113,136,139,55,73,144,147,149,151,153,154,156,156,156,159,165,168,171,62,177,181,187,191,195,196,203,205,208,210,214,214,214,214,214,214,214,214,214,214,225,165,144,230,76,234,76,168,147,147,149,149,149,149,151,151,153,153,76,203,234,269,271,278,181,181,187,187,187,187,191,191,195,195,293,295,298,300,269,76,293,278,]),'pn_start_func':([3,],[5,]),'init_dec':([8,11,],[9,20,]),'dec':([8,11,],[11,11,]),'var_dec':([8,11,46,54,110,],[12,12,54,54,54,]),'func_dec':([8,11,],[13,13,]),'class_dec':([8,11,],[14,14,]),'main':([9,],[18,]),'tipo':([15,16,17,45,72,],[21,26,28,51,93,]),'return_module':([17,],[27,]),'pn_internal_scope':([19,],[30,]),'pn_var_type':([21,26,],[32,34,]),'pn_value_type':([32,34,],[37,39,]),'pn_add_func':([35,],[40,]),'pn_current_name':([43,44,],[47,49,]),'parametro':([45,],[50,]),'vars_rec':([46,54,110,],[53,63,140,]),'pn_add_param_vartable':([50,],[58,]),'pn_gen_vartable':([53,140,],[61,173,]),'pn_add_variable':([56,66,],[64,90,]),'cte_int':([57,99,103,114,130,143,170,202,213,215,216,217,218,219,220,221,222,223,228,253,292,],[66,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'pn_return_type':([58,],[69,]),'parametro_rec':([60,111,],[71,141,]),'bloque_rec':([61,75,209,212,247,302,],[74,95,232,235,265,304,]),'bloque':([61,75,209,212,247,302,],[75,75,75,75,75,75,]),'asignacion':([61,75,209,212,247,302,],[77,77,77,77,77,77,]),'condicional':([61,75,209,212,247,302,],[78,78,78,78,78,78,]),'while':([61,75,209,212,247,302,],[79,79,79,79,79,79,]),'read':([61,75,209,212,247,302,],[80,80,80,80,80,80,]),'write':([61,75,209,212,247,302,],[81,81,81,81,81,81,]),'func_call':([61,75,99,103,114,130,143,170,202,209,212,213,215,216,217,218,219,220,221,222,223,228,247,253,292,302,],[82,82,122,122,122,122,122,122,122,82,82,122,122,122,122,122,122,122,122,122,122,122,82,122,122,82,]),'var':([61,75,99,102,103,114,130,143,164,170,202,209,212,213,215,216,217,218,219,220,221,222,223,228,247,253,292,302,],[83,83,127,132,127,127,127,127,199,127,127,83,83,127,127,127,127,127,127,127,127,127,127,127,83,127,127,83,]),'pn_var_assign':([83,],[97,]),'pn_while':([85,],[100,]),'varArray':([89,],[105,]),'pn_array_access1':([89,],[107,]),'pn_add_dim_list':([90,],[108,]),'pn_end_main':([94,],[112,]),'all_logical':([99,103,114,130,143,170,202,228,253,292,],[116,134,142,161,175,206,227,250,273,301,]),'logical_exp':([99,103,114,130,143,170,202,213,215,228,253,292,],[117,117,117,117,117,117,117,236,237,117,117,117,]),'exp':([99,103,114,130,143,170,202,213,215,216,217,218,219,228,253,292,],[118,118,118,118,118,118,118,118,118,238,239,240,241,118,118,118,]),'termino':([99,103,114,130,143,170,202,213,215,216,217,218,219,220,221,228,253,292,],[119,119,119,119,119,119,119,119,119,119,119,119,119,242,243,119,119,119,]),'factor':([99,103,114,130,143,170,202,213,215,216,217,218,219,220,221,222,223,228,253,292,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,244,245,120,120,120,]),'varcte':([99,103,114,130,143,170,202,213,215,216,217,218,219,220,221,222,223,228,253,292,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'cte_float':([99,103,114,130,143,170,202,213,215,216,217,218,219,220,221,222,223,228,253,292,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'var_readRec':([102,],[131,]),'write_rec':([103,],[133,]),'pn_verify_func':([104,],[135,]),'pn_add_dim':([108,],[138,]),'pn_open_parenthesis':([115,204,],[143,228,]),'pn_all_logical':([117,236,237,],[146,255,256,]),'pn_logical_exp':([118,238,239,240,241,],[148,257,258,259,260,]),'pn_exp':([119,242,243,],[150,261,262,]),'pn_termino':([120,244,245,],[152,263,264,]),'pn_add_constant':([123,124,125,],[155,157,158,]),'var_readRec1':([132,199,],[163,226,]),'pn_write_quad':([134,227,],[167,248,]),'pn_array_access2':([137,],[170,]),'pn_condicional':([145,],[176,]),'all_logical_rec':([146,255,256,],[178,279,280,]),'logical_exp_rec':([148,257,258,259,260,],[182,281,282,283,284,]),'exp_rec':([150,261,262,],[188,285,286,]),'termino_rec':([152,263,264,],[192,287,288,]),'write_rec1':([167,248,],[201,266,]),'pn_param_counter':([169,],[204,]),'list1':([172,],[207,]),'pn_func_quad':([173,],[209,]),'pn_operator':([179,180,183,184,185,186,189,190,193,194,],[213,215,216,217,218,219,220,221,222,223,]),'pn_while_jump':([197,],[224,]),'pn_array_access3':([206,],[229,]),'pn_close_parenthesis':([211,249,],[233,267,]),'while_loop':([224,],[246,]),'func_call_rec':([228,],[249,]),'func_return':([232,],[252,]),'pn_param_match':([250,301,],[268,303,]),'pn_access_return':([251,],[270,]),'condicional_else':([254,],[275,]),'pn_condicional_final':([254,306,],[277,307,]),'func_call_rec1':([268,303,],[291,305,]),'pn_end_func':([272,],[294,]),'pn_condicional_else':([276,],[297,]),'pn_while_jump1':([289,],[299,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM pn_start_program pn_start_func ID SEMICOLON init_dec main','program',7,'p_program','AnalizadorSintactico.py',44),
  ('main -> MAIN pn_internal_scope LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable bloque_rec RIGHT_CURLYB pn_end_main','main',10,'p_main','AnalizadorSintactico.py',56),
  ('vars_rec -> var_dec vars_rec','vars_rec',2,'p_vars_rec','AnalizadorSintactico.py',62),
  ('vars_rec -> empty','vars_rec',1,'p_vars_rec','AnalizadorSintactico.py',63),
  ('pn_internal_scope -> empty','pn_internal_scope',1,'p_pn_internal_scope','AnalizadorSintactico.py',66),
  ('pn_start_program -> empty','pn_start_program',1,'p_pn_start_program','AnalizadorSintactico.py',73),
  ('pn_start_func -> empty','pn_start_func',1,'p_pn_start_func','AnalizadorSintactico.py',86),
  ('init_dec -> empty','init_dec',1,'p_init_dec','AnalizadorSintactico.py',95),
  ('init_dec -> dec init_dec','init_dec',2,'p_init_dec','AnalizadorSintactico.py',96),
  ('dec -> var_dec','dec',1,'p_dec','AnalizadorSintactico.py',99),
  ('dec -> func_dec','dec',1,'p_dec','AnalizadorSintactico.py',100),
  ('dec -> class_dec','dec',1,'p_dec','AnalizadorSintactico.py',101),
  ('class_dec -> empty','class_dec',1,'p_class_dec','AnalizadorSintactico.py',104),
  ('var -> ID varArray','var',2,'p_var','AnalizadorSintactico.py',107),
  ('varArray -> empty','varArray',1,'p_varArray','AnalizadorSintactico.py',111),
  ('varArray -> pn_array_access1 LEFT_BRACKET pn_array_access2 all_logical pn_array_access3 RIGHT_BRACKET pn_access_return','varArray',7,'p_varArray','AnalizadorSintactico.py',112),
  ('pn_array_access1 -> empty','pn_array_access1',1,'p_pn_array_access1','AnalizadorSintactico.py',115),
  ('pn_array_access2 -> empty','pn_array_access2',1,'p_pn_array_access2','AnalizadorSintactico.py',137),
  ('pn_array_access3 -> empty','pn_array_access3',1,'p_pn_array_access3','AnalizadorSintactico.py',154),
  ('pn_access_return -> empty','pn_access_return',1,'p_pn_access_return','AnalizadorSintactico.py',175),
  ('var_dec -> VAR tipo pn_var_type pn_value_type ID pn_current_name SEMICOLON pn_add_variable','var_dec',8,'p_var_dec','AnalizadorSintactico.py',197),
  ('var_dec -> LIST tipo pn_var_type pn_value_type ID pn_current_name LEFT_BRACKET cte_int pn_add_variable pn_add_dim_list pn_add_dim RIGHT_BRACKET list1 SEMICOLON','var_dec',14,'p_var_dec','AnalizadorSintactico.py',198),
  ('list1 -> empty','list1',1,'p_list1','AnalizadorSintactico.py',201),
  ('pn_add_dim_list -> empty','pn_add_dim_list',1,'p_pn_add_dim_list','AnalizadorSintactico.py',212),
  ('pn_add_dim -> empty','pn_add_dim',1,'p_pn_add_dim','AnalizadorSintactico.py',218),
  ('pn_var_type -> empty','pn_var_type',1,'p_pn_var_type','AnalizadorSintactico.py',228),
  ('pn_value_type -> empty','pn_value_type',1,'p_pn_value_type','AnalizadorSintactico.py',233),
  ('pn_current_name -> empty','pn_current_name',1,'p_pn_current_name','AnalizadorSintactico.py',238),
  ('pn_add_variable -> empty','pn_add_variable',1,'p_pn_add_variable','AnalizadorSintactico.py',243),
  ('bloque -> asignacion','bloque',1,'p_bloque','AnalizadorSintactico.py',260),
  ('bloque -> condicional','bloque',1,'p_bloque','AnalizadorSintactico.py',261),
  ('bloque -> while','bloque',1,'p_bloque','AnalizadorSintactico.py',262),
  ('bloque -> read','bloque',1,'p_bloque','AnalizadorSintactico.py',263),
  ('bloque -> write','bloque',1,'p_bloque','AnalizadorSintactico.py',264),
  ('bloque -> func_call SEMICOLON','bloque',2,'p_bloque','AnalizadorSintactico.py',265),
  ('asignacion -> var pn_var_assign EQUAL_ASSIGN all_logical SEMICOLON','asignacion',5,'p_asignacion','AnalizadorSintactico.py',268),
  ('pn_var_assign -> empty','pn_var_assign',1,'p_pn_var_asignacion','AnalizadorSintactico.py',286),
  ('pn_operator -> empty','pn_operator',1,'p_pn_operator','AnalizadorSintactico.py',289),
  ('all_logical -> logical_exp pn_all_logical all_logical_rec','all_logical',3,'p_all_logical','AnalizadorSintactico.py',293),
  ('all_logical_rec -> AND pn_operator logical_exp pn_all_logical all_logical_rec','all_logical_rec',5,'p_all_logical_rec','AnalizadorSintactico.py',297),
  ('all_logical_rec -> OR pn_operator logical_exp pn_all_logical all_logical_rec','all_logical_rec',5,'p_all_logical_rec','AnalizadorSintactico.py',298),
  ('all_logical_rec -> empty','all_logical_rec',1,'p_all_logical_rec','AnalizadorSintactico.py',299),
  ('pn_all_logical -> empty','pn_all_logical',1,'p_pn_all_logical','AnalizadorSintactico.py',302),
  ('logical_exp -> exp pn_logical_exp logical_exp_rec','logical_exp',3,'p_logical_exp','AnalizadorSintactico.py',306),
  ('logical_exp_rec -> GREATER_THAN pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',310),
  ('logical_exp_rec -> LESS_THAN pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',311),
  ('logical_exp_rec -> EQUAL_COMPARE pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',312),
  ('logical_exp_rec -> NOT_EQUAL pn_operator exp pn_logical_exp logical_exp_rec','logical_exp_rec',5,'p_logical_exp_rec','AnalizadorSintactico.py',313),
  ('logical_exp_rec -> empty','logical_exp_rec',1,'p_logical_exp_rec','AnalizadorSintactico.py',314),
  ('pn_logical_exp -> empty','pn_logical_exp',1,'p_pn_logical_exp','AnalizadorSintactico.py',317),
  ('exp -> termino pn_exp exp_rec','exp',3,'p_exp','AnalizadorSintactico.py',321),
  ('pn_exp -> empty','pn_exp',1,'p_pn_exp','AnalizadorSintactico.py',325),
  ('exp_rec -> PLUS pn_operator termino pn_exp exp_rec','exp_rec',5,'p_exp_rec','AnalizadorSintactico.py',329),
  ('exp_rec -> MINUS pn_operator termino pn_exp exp_rec','exp_rec',5,'p_exp_rec','AnalizadorSintactico.py',330),
  ('exp_rec -> empty','exp_rec',1,'p_exp_rec','AnalizadorSintactico.py',331),
  ('termino -> factor pn_termino termino_rec','termino',3,'p_termino','AnalizadorSintactico.py',334),
  ('termino_rec -> MULTIPLICATION pn_operator factor pn_termino termino_rec','termino_rec',5,'p_termino_rec','AnalizadorSintactico.py',338),
  ('termino_rec -> DIVISION pn_operator factor pn_termino termino_rec','termino_rec',5,'p_termino_rec','AnalizadorSintactico.py',339),
  ('termino_rec -> empty','termino_rec',1,'p_termino_rec','AnalizadorSintactico.py',340),
  ('pn_termino -> empty','pn_termino',1,'p_pn_termino','AnalizadorSintactico.py',343),
  ('factor -> varcte','factor',1,'p_factor','AnalizadorSintactico.py',347),
  ('factor -> LEFT_PARENTHESIS pn_open_parenthesis all_logical RIGHT_PARENTHESIS pn_close_parenthesis','factor',5,'p_factor','AnalizadorSintactico.py',348),
  ('factor -> func_call empty','factor',2,'p_factor','AnalizadorSintactico.py',349),
  ('varcte -> cte_int pn_add_constant','varcte',2,'p_varcte','AnalizadorSintactico.py',356),
  ('varcte -> cte_float pn_add_constant','varcte',2,'p_varcte','AnalizadorSintactico.py',357),
  ('varcte -> CONST_BOOL pn_add_constant','varcte',2,'p_varcte','AnalizadorSintactico.py',358),
  ('varcte -> CONST_STRING empty empty','varcte',3,'p_varcte','AnalizadorSintactico.py',359),
  ('varcte -> var','varcte',1,'p_varcte','AnalizadorSintactico.py',360),
  ('cte_int -> CONST_INT','cte_int',1,'p_cte_int','AnalizadorSintactico.py',374),
  ('cte_int -> MINUS CONST_INT','cte_int',2,'p_cte_int','AnalizadorSintactico.py',375),
  ('cte_float -> CONST_FLOAT','cte_float',1,'p_cte_float','AnalizadorSintactico.py',382),
  ('cte_float -> MINUS CONST_FLOAT','cte_float',2,'p_cte_float','AnalizadorSintactico.py',383),
  ('pn_add_constant -> empty','pn_add_constant',1,'p_pn_add_constant','AnalizadorSintactico.py',390),
  ('pn_open_parenthesis -> empty','pn_open_parenthesis',1,'p_pn_open_parenthesis','AnalizadorSintactico.py',401),
  ('pn_close_parenthesis -> empty','pn_close_parenthesis',1,'p_pn_close_parenthesis','AnalizadorSintactico.py',405),
  ('tipo -> INT','tipo',1,'p_tipo','AnalizadorSintactico.py',409),
  ('tipo -> FLOAT','tipo',1,'p_tipo','AnalizadorSintactico.py',410),
  ('tipo -> BOOL','tipo',1,'p_tipo','AnalizadorSintactico.py',411),
  ('tipo -> STRING','tipo',1,'p_tipo','AnalizadorSintactico.py',412),
  ('return_module -> tipo','return_module',1,'p_return_module','AnalizadorSintactico.py',416),
  ('return_module -> VOID','return_module',1,'p_return_module','AnalizadorSintactico.py',417),
  ('parametro -> tipo ID parametro_rec','parametro',3,'p_parametro','AnalizadorSintactico.py',421),
  ('parametro -> empty','parametro',1,'p_parametro','AnalizadorSintactico.py',422),
  ('parametro_rec -> COMMA tipo ID parametro_rec','parametro_rec',4,'p_parametro_rec','AnalizadorSintactico.py',429),
  ('parametro_rec -> empty','parametro_rec',1,'p_parametro_rec','AnalizadorSintactico.py',430),
  ('condicional -> IF LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_condicional LEFT_CURLYB bloque_rec RIGHT_CURLYB condicional_else','condicional',9,'p_condicional','AnalizadorSintactico.py',437),
  ('condicional_else -> ELSE pn_condicional_else LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_condicional_final','condicional_else',6,'p_condicional_else','AnalizadorSintactico.py',440),
  ('condicional_else -> pn_condicional_final','condicional_else',1,'p_condicional_else','AnalizadorSintactico.py',441),
  ('pn_condicional -> empty','pn_condicional',1,'p_pn_condicional','AnalizadorSintactico.py',444),
  ('pn_condicional_else -> empty','pn_condicional_else',1,'p_pn_condicional_else','AnalizadorSintactico.py',453),
  ('pn_condicional_final -> empty','pn_condicional_final',1,'p_pn_condicional_final','AnalizadorSintactico.py',460),
  ('while -> WHILE pn_while LEFT_PARENTHESIS all_logical RIGHT_PARENTHESIS pn_while_jump while_loop','while',7,'p_while','AnalizadorSintactico.py',465),
  ('while_loop -> LEFT_CURLYB bloque_rec RIGHT_CURLYB pn_while_jump1','while_loop',4,'p_while_loop','AnalizadorSintactico.py',468),
  ('pn_while -> empty','pn_while',1,'p_pn_while','AnalizadorSintactico.py',471),
  ('pn_while_jump -> empty','pn_while_jump',1,'p_pn_while_jump','AnalizadorSintactico.py',475),
  ('pn_while_jump1 -> empty','pn_while_jump1',1,'p_pn_while_jump1','AnalizadorSintactico.py',485),
  ('read -> READ LEFT_PARENTHESIS var_readRec RIGHT_PARENTHESIS SEMICOLON','read',5,'p_read','AnalizadorSintactico.py',494),
  ('var_readRec -> var var_readRec1','var_readRec',2,'p_var_readRec','AnalizadorSintactico.py',500),
  ('var_readRec1 -> COMMA var var_readRec1','var_readRec1',3,'p_var_readRec1','AnalizadorSintactico.py',504),
  ('var_readRec1 -> empty','var_readRec1',1,'p_var_readRec1','AnalizadorSintactico.py',505),
  ('write -> WRITE LEFT_PARENTHESIS write_rec RIGHT_PARENTHESIS SEMICOLON','write',5,'p_write','AnalizadorSintactico.py',512),
  ('write_rec -> all_logical pn_write_quad write_rec1','write_rec',3,'p_write_rec','AnalizadorSintactico.py',515),
  ('write_rec1 -> MORE all_logical pn_write_quad write_rec1','write_rec1',4,'p_write_rec1','AnalizadorSintactico.py',518),
  ('write_rec1 -> empty','write_rec1',1,'p_write_rec1','AnalizadorSintactico.py',519),
  ('pn_write_quad -> empty','pn_write_quad',1,'p_pn_write_quad','AnalizadorSintactico.py',522),
  ('func_call -> CALL ID pn_verify_func LEFT_PARENTHESIS pn_param_counter pn_open_parenthesis func_call_rec pn_close_parenthesis RIGHT_PARENTHESIS','func_call',9,'p_func_call','AnalizadorSintactico.py',530),
  ('pn_verify_func -> empty','pn_verify_func',1,'p_pn_verify_func','AnalizadorSintactico.py',553),
  ('pn_param_counter -> empty','pn_param_counter',1,'p_pn_param_counter','AnalizadorSintactico.py',564),
  ('func_call_rec -> all_logical pn_param_match func_call_rec1','func_call_rec',3,'p_func_call_rec','AnalizadorSintactico.py',569),
  ('func_call_rec1 -> COMMA all_logical pn_param_match func_call_rec1','func_call_rec1',4,'p_func_call_rec1','AnalizadorSintactico.py',572),
  ('func_call_rec1 -> empty','func_call_rec1',1,'p_func_call_rec1','AnalizadorSintactico.py',573),
  ('pn_param_match -> empty','pn_param_match',1,'p_pn_param_match','AnalizadorSintactico.py',576),
  ('func_dec -> FUNC return_module ID pn_add_func LEFT_PARENTHESIS parametro pn_add_param_vartable pn_return_type RIGHT_PARENTHESIS LEFT_CURLYB vars_rec pn_gen_vartable pn_func_quad bloque_rec func_return RIGHT_CURLYB pn_end_func','func_dec',17,'p_func_dec','AnalizadorSintactico.py',594),
  ('pn_add_param_vartable -> empty','pn_add_param_vartable',1,'p_pn_add_param_vartable','AnalizadorSintactico.py',601),
  ('pn_gen_vartable -> empty','pn_gen_vartable',1,'p_pn_gen_vartable','AnalizadorSintactico.py',613),
  ('pn_func_quad -> empty','pn_func_quad',1,'p_pn_func_quad','AnalizadorSintactico.py',617),
  ('pn_end_main -> empty','pn_end_main',1,'p_pn_end_main','AnalizadorSintactico.py',621),
  ('pn_end_func -> empty','pn_end_func',1,'p_pn_end_func','AnalizadorSintactico.py',626),
  ('pn_add_func -> empty','pn_add_func',1,'p_pn_add_func','AnalizadorSintactico.py',633),
  ('pn_return_type -> empty','pn_return_type',1,'p_pn_return_type','AnalizadorSintactico.py',639),
  ('func_return -> RETURN all_logical SEMICOLON','func_return',3,'p_func_return','AnalizadorSintactico.py',647),
  ('func_return -> RETURN SEMICOLON','func_return',2,'p_func_return','AnalizadorSintactico.py',648),
  ('bloque_rec -> bloque bloque_rec','bloque_rec',2,'p_bloque_rec','AnalizadorSintactico.py',667),
  ('bloque_rec -> empty','bloque_rec',1,'p_bloque_rec','AnalizadorSintactico.py',668),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',672),
]
